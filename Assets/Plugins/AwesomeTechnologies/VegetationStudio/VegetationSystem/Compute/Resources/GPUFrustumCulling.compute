#pragma kernel GPUFrustumCulling
#pragma kernel DistanceCulling

//#pragma enable_d3d11_debug_symbols

struct IndirectShaderData
{
	float4x4 PositionMatrix;
	float4x4 InversePositionMatrix;
	float4 ControlData;
};

uint _InstanceCount;
bool UseLODs;

//Used for run-time masks
float4 _TerrainPosition;
float4 _TerrainSize;
int _RealTimeMaskWidth;
int _RealTimeMaskHeight;
int _RealTimeMaskBand;
bool _RealTimeMaskEnabled;
bool _RealTimeMaskInvert;
float _RealTimeMaskCutoff;
Texture2D<float4> _RealTimeMaskTexture;

//Used for frustum culling
float4 _VS_CameraFrustumPlane0;
float4 _VS_CameraFrustumPlane1;
float4 _VS_CameraFrustumPlane2;
float4 _VS_CameraFrustumPlane3;
float4 _VS_CameraFrustumPlane4;
float4 _VS_CameraFrustumPlane5;
float4 _WorldSpaceCameraPos;

//Used for vegetatuion distance culling
float	_CullFarStart;
float	_CullFarDistance;
float	_BoundingSphereRadius;

//Used for LODs
//float   _LOD1Distance;
//float   _LOD2Distance;

StructuredBuffer<IndirectShaderData> SourceShaderDataBuffer;
AppendStructuredBuffer<IndirectShaderData> VisibleBufferLOD0;
//AppendStructuredBuffer<IndirectShaderData> VisibleBufferLOD1;
//AppendStructuredBuffer<IndirectShaderData> VisibleBufferLOD2;

SamplerState _LinearClamp;

bool SampleRealTimeMask(float3 instancePosition)
{
	float cellSizeX = _TerrainSize.x /_RealTimeMaskWidth;
	float cellSizeZ = _TerrainSize.z /_RealTimeMaskHeight;
	float3 localPosition = instancePosition.xyz - _TerrainPosition.xyz;

	uint2 texturePosition;
	texturePosition.x = clamp(floor(localPosition.x / cellSizeX),0,_RealTimeMaskWidth -1);
	texturePosition.y = clamp(floor(localPosition.z / cellSizeZ),0,_RealTimeMaskHeight -1);

	//float4 maskColor = _RealTimeMaskTexture.SampleLevel(_LinearClamp,normalizedPos,0);	
	float4 maskColor = _RealTimeMaskTexture[texturePosition];
	float sampleValue = maskColor.r;

	if (_RealTimeMaskBand == 1){sampleValue = maskColor.r; }
	if (_RealTimeMaskBand == 2){sampleValue = maskColor.g; }
	if (_RealTimeMaskBand == 3){sampleValue = maskColor.b; }
	if (_RealTimeMaskBand == 4){sampleValue = maskColor.a; }

	if (_RealTimeMaskInvert)
	{
	 sampleValue = 1 - sampleValue;
	}

	if (sampleValue > _RealTimeMaskCutoff)
	{ 
		return true;
	}
	else
	{
		return false;
	}	
}

[numthreads(32,1,1)]
void GPUFrustumCulling(uint3 id : SV_DispatchThreadID)
{
	uint instanceId = id.x;
	if (instanceId < _InstanceCount)
	{		
		IndirectShaderData instanceData;
		instanceData.PositionMatrix = SourceShaderDataBuffer[id.x].PositionMatrix;
		instanceData.InversePositionMatrix = SourceShaderDataBuffer[id.x].InversePositionMatrix;
		instanceData.ControlData = float4(0,0,0,0);

		#define transformPosition mul(instanceData.PositionMatrix, float4(0,0,0,1)).xyz
		float3 position = transformPosition + float3(0.0f, _BoundingSphereRadius * 0.5f, 0.0f);

		if (_RealTimeMaskEnabled)
		{
			if (SampleRealTimeMask(transformPosition))
			{
				return;
			}
		}

		float4 CameraDistances0 = float4(
				dot(_VS_CameraFrustumPlane0.xyz, position) + _VS_CameraFrustumPlane0.w,
				dot(_VS_CameraFrustumPlane1.xyz, position) + _VS_CameraFrustumPlane1.w,
				dot(_VS_CameraFrustumPlane2.xyz, position) + _VS_CameraFrustumPlane2.w,
				dot(_VS_CameraFrustumPlane3.xyz, position) + _VS_CameraFrustumPlane3.w
			);

		float4 CameraDistances1 = float4(
			dot(_VS_CameraFrustumPlane4.xyz, position) + _VS_CameraFrustumPlane4.w,
			dot(_VS_CameraFrustumPlane5.xyz, position) + _VS_CameraFrustumPlane5.w,
			0.0f,
			0.0f
			);

			if (!(all(CameraDistances0 >= -_BoundingSphereRadius)
				&& all(CameraDistances1 >= -_BoundingSphereRadius)))
			{
					
			}
			else		
			{
				#define distanceToCamera length(transformPosition - _WorldSpaceCameraPos.xyz)
				if (distanceToCamera < _CullFarStart + _CullFarDistance)
				{
				/*
					if (UseLODs)
					{
						if (distanceToCamera < _LOD1Distance)
						{
							VisibleBufferLOD0.Append(instanceData);
						}
						else if (distanceToCamera < _LOD2Distance)
						{
							VisibleBufferLOD1.Append(instanceData);
						}
						else
						{
							VisibleBufferLOD2.Append(instanceData);
						}
					}
					else
					{
					*/
						VisibleBufferLOD0.Append(instanceData);
					//}					
				}
			}
	}
}

[numthreads(32,1,1)]
void DistanceCulling(uint3 id : SV_DispatchThreadID)
{
	uint instanceId = id.x;
	if (instanceId < _InstanceCount)
	{
		IndirectShaderData instanceData;
		instanceData.PositionMatrix = SourceShaderDataBuffer[id.x].PositionMatrix;
		instanceData.InversePositionMatrix = SourceShaderDataBuffer[id.x].InversePositionMatrix;
		instanceData.ControlData = float4(0,0,0,0);

		#define transformPosition mul(instanceData.PositionMatrix, float4(0,0,0,1)).xyz
		#define distanceToCamera length(transformPosition - _WorldSpaceCameraPos.xyz)

		if (_RealTimeMaskEnabled)
		{
			if (SampleRealTimeMask(transformPosition))
			{
				return;
			}
		}

		if (distanceToCamera < _CullFarStart + _CullFarDistance)
		{
		/*
			if (UseLODs)
			{
				if (distanceToCamera < _LOD1Distance)
				{
					VisibleBufferLOD0.Append(instanceData);
				}
				else if (distanceToCamera < _LOD2Distance)
				{
					VisibleBufferLOD1.Append(instanceData);
				}
				else
				{
					VisibleBufferLOD2.Append(instanceData);
				}
			}
			else
			{
			*/
				VisibleBufferLOD0.Append(instanceData);
			//}					
		}
	}
}