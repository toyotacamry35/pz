#pragma kernel CreateInverseMatrix

#pragma enable_d3d11_debug_symbols

struct IndirectShaderData
{
	float4x4 PositionMatrix;
	float4x4 InversePositionMatrix;
	float4 ControlData;
};

StructuredBuffer<float4x4> positionBuffer;
RWStructuredBuffer<IndirectShaderData> IndirectShaderDataBuffer;

float4x4 inverse(float4x4 input)
{
#define minor(a,b,c) determinant(float3x3(input.a, input.b, input.c))

	float4x4 cofactors = float4x4(
		minor(_22_23_24, _32_33_34, _42_43_44),
		-minor(_21_23_24, _31_33_34, _41_43_44),
		minor(_21_22_24, _31_32_34, _41_42_44),
		-minor(_21_22_23, _31_32_33, _41_42_43),

		-minor(_12_13_14, _32_33_34, _42_43_44),
		minor(_11_13_14, _31_33_34, _41_43_44),
		-minor(_11_12_14, _31_32_34, _41_42_44),
		minor(_11_12_13, _31_32_33, _41_42_43),

		minor(_12_13_14, _22_23_24, _42_43_44),
		-minor(_11_13_14, _21_23_24, _41_43_44),
		minor(_11_12_14, _21_22_24, _41_42_44),
		-minor(_11_12_13, _21_22_23, _41_42_43),

		-minor(_12_13_14, _22_23_24, _32_33_34),
		minor(_11_13_14, _21_23_24, _31_33_34),
		-minor(_11_12_14, _21_22_24, _31_32_34),
		minor(_11_12_13, _21_22_23, _31_32_33)
		);
#undef minor
	return transpose(cofactors) / determinant(input);
}


[numthreads(32,1,1)]
void CreateInverseMatrix(uint3 id : SV_DispatchThreadID)
{
	uint instanceId = id.x;
	//if (instanceId < _InstanceCount)
	{
		float4x4 ObjectToWorldMatrix = positionBuffer[id.x];
		IndirectShaderDataBuffer[id.x].PositionMatrix = ObjectToWorldMatrix;
		IndirectShaderDataBuffer[id.x].InversePositionMatrix = inverse(ObjectToWorldMatrix);
		IndirectShaderDataBuffer[id.x].ControlData = float4(0,0,0,0);
	//_VisibleList.Append(id.x);
	}
	//IndirectShaderDataBuffer.Append(newData);
	//inversePositionBuffer[id.x] = inverse(ObjectToWorldMatrix);
}

