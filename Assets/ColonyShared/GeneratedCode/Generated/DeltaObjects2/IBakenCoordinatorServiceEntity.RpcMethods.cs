// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class BakenCoordinatorServiceEntity
    {
        public ValueTask OnUserConnected(System.Guid charId, System.Guid repoId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnUserConnectedRunMaster(charId, repoId);
                else
                    return OnUserConnectedRun(charId, repoId);
            else
                return SendFuncs.OnUserConnected(charId, repoId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task> OnUserConnectedCreateDeferredDelegate(System.Guid charId, System.Guid repoId) => () =>
        {
            return OnUserConnected(charId, repoId).AsTask();
        }

        ;
        public async ValueTask OnUserConnectedRunMaster(System.Guid charId, System.Guid repoId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnUserConnectedCreateDeferredDelegate(charId, repoId), nameof(OnUserConnected));
            }

            await OnUserConnectedRun(charId, repoId);
        }

        public async ValueTask OnUserConnectedRun(System.Guid charId, System.Guid repoId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IBakenCoordinatorServiceEntity), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnUserConnected)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnUserConnectedImpl(charId, repoId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public ValueTask OnUserDisconnected(System.Guid repoId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnUserDisconnectedRunMaster(repoId);
                else
                    return OnUserDisconnectedRun(repoId);
            else
                return SendFuncs.OnUserDisconnected(repoId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task> OnUserDisconnectedCreateDeferredDelegate(System.Guid repoId) => () =>
        {
            return OnUserDisconnected(repoId).AsTask();
        }

        ;
        public async ValueTask OnUserDisconnectedRunMaster(System.Guid repoId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnUserDisconnectedCreateDeferredDelegate(repoId), nameof(OnUserDisconnected));
            }

            await OnUserDisconnectedRun(repoId);
        }

        public async ValueTask OnUserDisconnectedRun(System.Guid repoId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IBakenCoordinatorServiceEntity), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnUserDisconnected)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnUserDisconnectedImpl(repoId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public ValueTask CheckForLoad(System.Guid charId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CheckForLoadRunMaster(charId);
                else
                    return CheckForLoadRun(charId);
            else
                return SendFuncs.CheckForLoad(charId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task> CheckForLoadCreateDeferredDelegate(System.Guid charId) => () =>
        {
            return CheckForLoad(charId).AsTask();
        }

        ;
        public async ValueTask CheckForLoadRunMaster(System.Guid charId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CheckForLoadCreateDeferredDelegate(charId), nameof(CheckForLoad));
            }

            await CheckForLoadRun(charId);
        }

        public async ValueTask CheckForLoadRun(System.Guid charId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IBakenCoordinatorServiceEntity), 2);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(CheckForLoad)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = CheckForLoadImpl(charId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public ValueTask CheckForUnload(System.Guid charId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CheckForUnloadRunMaster(charId);
                else
                    return CheckForUnloadRun(charId);
            else
                return SendFuncs.CheckForUnload(charId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task> CheckForUnloadCreateDeferredDelegate(System.Guid charId) => () =>
        {
            return CheckForUnload(charId).AsTask();
        }

        ;
        public async ValueTask CheckForUnloadRunMaster(System.Guid charId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CheckForUnloadCreateDeferredDelegate(charId), nameof(CheckForUnload));
            }

            await CheckForUnloadRun(charId);
        }

        public async ValueTask CheckForUnloadRun(System.Guid charId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IBakenCoordinatorServiceEntity), 3);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(CheckForUnload)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = CheckForUnloadImpl(charId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public ValueTask RegisterBaken(System.Guid characterId, System.Guid masterRepoId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RegisterBakenRunMaster(characterId, masterRepoId, bakenRef);
                else
                    return RegisterBakenRun(characterId, masterRepoId, bakenRef);
            else
                return SendFuncs.RegisterBaken(characterId, masterRepoId, bakenRef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task> RegisterBakenCreateDeferredDelegate(System.Guid characterId, System.Guid masterRepoId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef) => () =>
        {
            return RegisterBaken(characterId, masterRepoId, bakenRef).AsTask();
        }

        ;
        public async ValueTask RegisterBakenRunMaster(System.Guid characterId, System.Guid masterRepoId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RegisterBakenCreateDeferredDelegate(characterId, masterRepoId, bakenRef), nameof(RegisterBaken));
            }

            await RegisterBakenRun(characterId, masterRepoId, bakenRef);
        }

        public async ValueTask RegisterBakenRun(System.Guid characterId, System.Guid masterRepoId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IBakenCoordinatorServiceEntity), 4);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RegisterBaken)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RegisterBakenImpl(characterId, masterRepoId, bakenRef);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public ValueTask UnregisterBaken(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UnregisterBakenRunMaster(bakenRef);
                else
                    return UnregisterBakenRun(bakenRef);
            else
                return SendFuncs.UnregisterBaken(bakenRef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task> UnregisterBakenCreateDeferredDelegate(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef) => () =>
        {
            return UnregisterBaken(bakenRef).AsTask();
        }

        ;
        public async ValueTask UnregisterBakenRunMaster(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UnregisterBakenCreateDeferredDelegate(bakenRef), nameof(UnregisterBaken));
            }

            await UnregisterBakenRun(bakenRef);
        }

        public async ValueTask UnregisterBakenRun(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IBakenCoordinatorServiceEntity), 5);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(UnregisterBaken)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = UnregisterBakenImpl(bakenRef);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public ValueTask BakenIsDestroyed(System.Guid characterId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return BakenIsDestroyedRunMaster(characterId, bakenRef);
                else
                    return BakenIsDestroyedRun(characterId, bakenRef);
            else
                return SendFuncs.BakenIsDestroyed(characterId, bakenRef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task> BakenIsDestroyedCreateDeferredDelegate(System.Guid characterId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef) => () =>
        {
            return BakenIsDestroyed(characterId, bakenRef).AsTask();
        }

        ;
        public async ValueTask BakenIsDestroyedRunMaster(System.Guid characterId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(BakenIsDestroyedCreateDeferredDelegate(characterId, bakenRef), nameof(BakenIsDestroyed));
            }

            await BakenIsDestroyedRun(characterId, bakenRef);
        }

        public async ValueTask BakenIsDestroyedRun(System.Guid characterId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IBakenCoordinatorServiceEntity), 6);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(BakenIsDestroyed)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = BakenIsDestroyedImpl(characterId, bakenRef);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task SetCharacterLoaded(System.Guid characterId, bool loaded)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetCharacterLoadedRunMaster(characterId, loaded).AsTask();
                else
                    return SetCharacterLoadedRun(characterId, loaded).AsTask();
            else
                return SendFuncs.SetCharacterLoaded(characterId, loaded, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> SetCharacterLoadedCreateDeferredDelegate(System.Guid characterId, bool loaded) => () =>
        {
            return SetCharacterLoaded(characterId, loaded);
        }

        ;
        public async ValueTask SetCharacterLoadedRunMaster(System.Guid characterId, bool loaded)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetCharacterLoadedCreateDeferredDelegate(characterId, loaded), nameof(SetCharacterLoaded));
            }

            await SetCharacterLoadedRun(characterId, loaded);
        }

        public async ValueTask SetCharacterLoadedRun(System.Guid characterId, bool loaded)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IBakenCoordinatorServiceEntity), 7);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = SetCharacterLoadedImpl(characterId, loaded);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> ActivateBaken(System.Guid characterId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ActivateBakenRunMaster(characterId, bakenRef).AsTask();
                else
                    return ActivateBakenRun(characterId, bakenRef).AsTask();
            else
                return SendFuncs.ActivateBaken(characterId, bakenRef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ActivateBakenCreateDeferredDelegate(System.Guid characterId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef) => () =>
        {
            return ActivateBaken(characterId, bakenRef);
        }

        ;
        public async ValueTask<bool> ActivateBakenRunMaster(System.Guid characterId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ActivateBakenCreateDeferredDelegate(characterId, bakenRef), nameof(ActivateBaken));
            }

            return await ActivateBakenRun(characterId, bakenRef);
        }

        public async ValueTask<bool> ActivateBakenRun(System.Guid characterId, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IBakenCoordinatorServiceEntity), 8);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = ActivateBakenImpl(characterId, bakenRef);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetActiveBaken(System.Guid characterId)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetActiveBakenRunMaster(characterId).AsTask();
                else
                    return GetActiveBakenRun(characterId).AsTask();
            else
                return SendFuncs.GetActiveBaken(characterId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> GetActiveBakenCreateDeferredDelegate(System.Guid characterId) => () =>
        {
            return GetActiveBaken(characterId);
        }

        ;
        public async ValueTask<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetActiveBakenRunMaster(System.Guid characterId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetActiveBakenCreateDeferredDelegate(characterId), nameof(GetActiveBaken));
            }

            return await GetActiveBakenRun(characterId);
        }

        public async ValueTask<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetActiveBakenRun(System.Guid characterId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IBakenCoordinatorServiceEntity), 9);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetActiveBakenImpl(characterId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}