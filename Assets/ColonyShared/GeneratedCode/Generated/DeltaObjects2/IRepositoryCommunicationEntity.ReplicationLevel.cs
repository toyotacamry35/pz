// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class RepositoryCommunicationEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityAlways
    {
        public RepositoryCommunicationEntityAlways(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.IRepositoryCommunicationEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Cloud.CloudNodeType CloudNodeType => __deltaObject__.CloudNodeType;
        public SharedCode.Entities.Cloud.WantsToDisconnectEventProxy WantsToDisconnect => __deltaObject__.WantsToDisconnect;
        public System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatch updateBatch)
        {
            return __deltaObject__.EntityUpdate(updateBatch);
        }

        public System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer)
        {
            return __deltaObject__.EntityUpdate(updateBatchContainer);
        }

        public System.Threading.Tasks.Task EntityUpload(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer)
        {
            return __deltaObject__.EntityUpload(uploadBatchContainer);
        }

        public System.Threading.Tasks.Task EntityDestroyed(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer)
        {
            return __deltaObject__.EntityDestroyed(destroyBatchContainer);
        }

        public System.Threading.Tasks.Task EntityDowngrade(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer)
        {
            return __deltaObject__.EntityDowngrade(downgradeBatchContainer);
        }

        public System.Threading.Tasks.Task Dump(string fileName)
        {
            return __deltaObject__.Dump(fileName);
        }

        public System.Threading.Tasks.Task DumpEntity(int typeId, System.Guid entityId, string fileName)
        {
            return __deltaObject__.DumpEntity(typeId, entityId, fileName);
        }

        public System.Threading.Tasks.Task DumpEntitySerializedData(string fileName, int entityTypeId, System.Guid entityId, long replicationMask)
        {
            return __deltaObject__.DumpEntitySerializedData(fileName, entityTypeId, entityId, replicationMask);
        }

        public System.Threading.Tasks.Task<bool> SubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            return __deltaObject__.SubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        }

        public System.Threading.Tasks.Task<bool> UnsubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            return __deltaObject__.UnsubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        }

        public System.Threading.Tasks.Task<string> GetEntityStatus(int typeId, System.Guid entityId)
        {
            return __deltaObject__.GetEntityStatus(typeId, entityId);
        }

        public System.Threading.Tasks.Task<string> GetAllServiceEntityStatus()
        {
            return __deltaObject__.GetAllServiceEntityStatus();
        }

        public System.Threading.Tasks.Task<bool> ForceCloseConnection(System.Guid userId)
        {
            return __deltaObject__.ForceCloseConnection(userId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 18:
                    currProperty = CloudNodeType;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -2120620774;
    }

    public class RepositoryCommunicationEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityClientBroadcast
    {
        public RepositoryCommunicationEntityClientBroadcast(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.IRepositoryCommunicationEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Cloud.CloudNodeType CloudNodeType => __deltaObject__.CloudNodeType;
        public SharedCode.Entities.Cloud.WantsToDisconnectEventProxy WantsToDisconnect => __deltaObject__.WantsToDisconnect;
        public System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatch updateBatch)
        {
            return __deltaObject__.EntityUpdate(updateBatch);
        }

        public System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer)
        {
            return __deltaObject__.EntityUpdate(updateBatchContainer);
        }

        public System.Threading.Tasks.Task EntityUpload(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer)
        {
            return __deltaObject__.EntityUpload(uploadBatchContainer);
        }

        public System.Threading.Tasks.Task EntityDestroyed(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer)
        {
            return __deltaObject__.EntityDestroyed(destroyBatchContainer);
        }

        public System.Threading.Tasks.Task EntityDowngrade(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer)
        {
            return __deltaObject__.EntityDowngrade(downgradeBatchContainer);
        }

        public System.Threading.Tasks.Task Dump(string fileName)
        {
            return __deltaObject__.Dump(fileName);
        }

        public System.Threading.Tasks.Task DumpEntity(int typeId, System.Guid entityId, string fileName)
        {
            return __deltaObject__.DumpEntity(typeId, entityId, fileName);
        }

        public System.Threading.Tasks.Task DumpEntitySerializedData(string fileName, int entityTypeId, System.Guid entityId, long replicationMask)
        {
            return __deltaObject__.DumpEntitySerializedData(fileName, entityTypeId, entityId, replicationMask);
        }

        public System.Threading.Tasks.Task<bool> SubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            return __deltaObject__.SubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        }

        public System.Threading.Tasks.Task<bool> UnsubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            return __deltaObject__.UnsubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        }

        public System.Threading.Tasks.Task<string> GetEntityStatus(int typeId, System.Guid entityId)
        {
            return __deltaObject__.GetEntityStatus(typeId, entityId);
        }

        public System.Threading.Tasks.Task<string> GetAllServiceEntityStatus()
        {
            return __deltaObject__.GetAllServiceEntityStatus();
        }

        public System.Threading.Tasks.Task<bool> ForceCloseConnection(System.Guid userId)
        {
            return __deltaObject__.ForceCloseConnection(userId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 18:
                    currProperty = CloudNodeType;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1646642743;
    }

    public class RepositoryCommunicationEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityClientFullApi
    {
        public RepositoryCommunicationEntityClientFullApi(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.IRepositoryCommunicationEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1557784057;
    }

    public class RepositoryCommunicationEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityClientFull
    {
        public RepositoryCommunicationEntityClientFull(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.IRepositoryCommunicationEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Cloud.CloudNodeType CloudNodeType => __deltaObject__.CloudNodeType;
        public SharedCode.Entities.Cloud.WantsToDisconnectEventProxy WantsToDisconnect => __deltaObject__.WantsToDisconnect;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsClientFull PingDiagnostics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsClientFull)__deltaObject__.PingDiagnostics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatch updateBatch)
        {
            return __deltaObject__.EntityUpdate(updateBatch);
        }

        public System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer)
        {
            return __deltaObject__.EntityUpdate(updateBatchContainer);
        }

        public System.Threading.Tasks.Task EntityUpload(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer)
        {
            return __deltaObject__.EntityUpload(uploadBatchContainer);
        }

        public System.Threading.Tasks.Task EntityDestroyed(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer)
        {
            return __deltaObject__.EntityDestroyed(destroyBatchContainer);
        }

        public System.Threading.Tasks.Task EntityDowngrade(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer)
        {
            return __deltaObject__.EntityDowngrade(downgradeBatchContainer);
        }

        public System.Threading.Tasks.Task Dump(string fileName)
        {
            return __deltaObject__.Dump(fileName);
        }

        public System.Threading.Tasks.Task DumpEntity(int typeId, System.Guid entityId, string fileName)
        {
            return __deltaObject__.DumpEntity(typeId, entityId, fileName);
        }

        public System.Threading.Tasks.Task DumpEntitySerializedData(string fileName, int entityTypeId, System.Guid entityId, long replicationMask)
        {
            return __deltaObject__.DumpEntitySerializedData(fileName, entityTypeId, entityId, replicationMask);
        }

        public System.Threading.Tasks.Task<bool> SubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            return __deltaObject__.SubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        }

        public System.Threading.Tasks.Task<bool> UnsubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            return __deltaObject__.UnsubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        }

        public System.Threading.Tasks.Task<string> GetEntityStatus(int typeId, System.Guid entityId)
        {
            return __deltaObject__.GetEntityStatus(typeId, entityId);
        }

        public System.Threading.Tasks.Task<string> GetAllServiceEntityStatus()
        {
            return __deltaObject__.GetAllServiceEntityStatus();
        }

        public System.Threading.Tasks.Task<bool> ForceCloseConnection(System.Guid userId)
        {
            return __deltaObject__.ForceCloseConnection(userId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 18:
                    currProperty = CloudNodeType;
                    break;
                case 20:
                    currProperty = PingDiagnostics;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1474565398;
    }

    public class RepositoryCommunicationEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityServerApi
    {
        public RepositoryCommunicationEntityServerApi(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.IRepositoryCommunicationEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1430193222;
    }

    public class RepositoryCommunicationEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityServer
    {
        public RepositoryCommunicationEntityServer(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.IRepositoryCommunicationEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)__deltaObjectBase__;
            }
        }

        public string ConfigId => __deltaObject__.ConfigId;
        public int Num => __deltaObject__.Num;
        public SharedCode.Entities.Cloud.EndpointAddress InternalAddress => __deltaObject__.InternalAddress;
        public SharedCode.Entities.Cloud.EndpointAddress ExternalAddress => __deltaObject__.ExternalAddress;
        public bool CloudRequirementsMet => __deltaObject__.CloudRequirementsMet;
        public bool InitializationTasksCompleted => __deltaObject__.InitializationTasksCompleted;
        public bool ExternalCommunicationNodeOpen => __deltaObject__.ExternalCommunicationNodeOpen;
        public SharedCode.Cloud.CloudNodeType CloudNodeType => __deltaObject__.CloudNodeType;
        public int ProcessId => __deltaObject__.ProcessId;
        public SharedCode.Entities.Cloud.WantsToDisconnectEventProxy WantsToDisconnect => __deltaObject__.WantsToDisconnect;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsServer PingDiagnostics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsServer)__deltaObject__.PingDiagnostics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<bool> FireOnDisconnect()
        {
            return __deltaObject__.FireOnDisconnect();
        }

        public System.Threading.Tasks.Task<bool> NotifyOfExistingConnections(System.Collections.Generic.List<SharedCode.Entities.Cloud.EndpointAddress> endpoints)
        {
            return __deltaObject__.NotifyOfExistingConnections(endpoints);
        }

        public System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatch updateBatch)
        {
            return __deltaObject__.EntityUpdate(updateBatch);
        }

        public System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer)
        {
            return __deltaObject__.EntityUpdate(updateBatchContainer);
        }

        public System.Threading.Tasks.Task EntityUpload(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer)
        {
            return __deltaObject__.EntityUpload(uploadBatchContainer);
        }

        public System.Threading.Tasks.Task EntityDestroyed(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer)
        {
            return __deltaObject__.EntityDestroyed(destroyBatchContainer);
        }

        public System.Threading.Tasks.Task EntityDowngrade(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer)
        {
            return __deltaObject__.EntityDowngrade(downgradeBatchContainer);
        }

        public System.Threading.Tasks.Task Dump(string fileName)
        {
            return __deltaObject__.Dump(fileName);
        }

        public System.Threading.Tasks.Task DumpEntity(int typeId, System.Guid entityId, string fileName)
        {
            return __deltaObject__.DumpEntity(typeId, entityId, fileName);
        }

        public System.Threading.Tasks.Task DumpEntitySerializedData(string fileName, int entityTypeId, System.Guid entityId, long replicationMask)
        {
            return __deltaObject__.DumpEntitySerializedData(fileName, entityTypeId, entityId, replicationMask);
        }

        public System.Threading.Tasks.Task<bool> SubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            return __deltaObject__.SubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        }

        public System.Threading.Tasks.Task<bool> UnsubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            return __deltaObject__.UnsubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        }

        public System.Threading.Tasks.Task<string> GetEntityStatus(int typeId, System.Guid entityId)
        {
            return __deltaObject__.GetEntityStatus(typeId, entityId);
        }

        public System.Threading.Tasks.Task<string> GetAllServiceEntityStatus()
        {
            return __deltaObject__.GetAllServiceEntityStatus();
        }

        public System.Threading.Tasks.Task<bool> ForceCloseConnection(System.Guid userId)
        {
            return __deltaObject__.ForceCloseConnection(userId);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Cloud.StartMigrateEntityResult> StartMigrateEntity(int entityTypeId, System.Guid entityId)
        {
            return __deltaObject__.StartMigrateEntity(entityTypeId, entityId);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.FinishMigrateEntityResult> FinishMigrateEntity(int entityTypeId, System.Guid entityId, System.Collections.Generic.Dictionary<(int, System.Guid), System.Collections.Generic.Dictionary<System.Guid, int>> replicateRefsVersions)
        {
            return __deltaObject__.FinishMigrateEntity(entityTypeId, entityId, replicateRefsVersions);
        }

        public System.Threading.Tasks.Task DispatchMigratedEntityDeferredRpc(int entityTypeId, System.Guid entityId)
        {
            return __deltaObject__.DispatchMigratedEntityDeferredRpc(entityTypeId, entityId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = ConfigId;
                    break;
                case 12:
                    currProperty = Num;
                    break;
                case 13:
                    currProperty = InternalAddress;
                    break;
                case 14:
                    currProperty = ExternalAddress;
                    break;
                case 15:
                    currProperty = CloudRequirementsMet;
                    break;
                case 16:
                    currProperty = InitializationTasksCompleted;
                    break;
                case 17:
                    currProperty = ExternalCommunicationNodeOpen;
                    break;
                case 18:
                    currProperty = CloudNodeType;
                    break;
                case 19:
                    currProperty = ProcessId;
                    break;
                case 20:
                    currProperty = PingDiagnostics;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 400969187;
    }
}