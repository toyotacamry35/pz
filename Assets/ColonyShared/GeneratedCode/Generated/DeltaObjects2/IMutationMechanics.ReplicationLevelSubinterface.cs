// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, -1170580212, typeof(SharedCode.Entities.IMutationMechanics))]
    public interface IMutationMechanicsAlways : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, -154796931, typeof(SharedCode.Entities.IMutationMechanics))]
    public interface IMutationMechanicsClientBroadcast : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef Stage
        {
            get;
        }
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, -1168475503, typeof(SharedCode.Entities.IMutationMechanics))]
    public interface IMutationMechanicsClientFullApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, -1944327691, typeof(SharedCode.Entities.IMutationMechanics))]
    public interface IMutationMechanicsClientFull : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionsDef FactionsDef
        {
            get;
        }

        Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef Faction
        {
            get;
        }

        Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef NewFaction
        {
            get;
        }

        Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef Stage
        {
            get;
        }

        Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef NewStage
        {
            get;
        }

        float Mutation
        {
            get;
        }

        long AllowedTimeMutationChange
        {
            get;
        }

        System.Threading.Tasks.Task<bool> CanChangeMutation(float value, Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef toFaction);
        System.Threading.Tasks.Task<bool> ChangeMutation(float value, Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef toFaction, float coolDownTime, bool forceChange);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, 1751642967, typeof(SharedCode.Entities.IMutationMechanics))]
    public interface IMutationMechanicsServerApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, -990070987, typeof(SharedCode.Entities.IMutationMechanics))]
    public interface IMutationMechanicsServer : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionsDef FactionsDef
        {
            get;
        }

        Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef Faction
        {
            get;
        }

        Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef NewFaction
        {
            get;
        }

        Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef Stage
        {
            get;
        }

        Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef NewStage
        {
            get;
        }

        float Mutation
        {
            get;
        }

        long AllowedTimeMutationChange
        {
            get;
        }

        System.Threading.Tasks.Task<bool> CanChangeMutation(float value, Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef toFaction);
        System.Threading.Tasks.Task<bool> ChangeMutation(float value, Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef toFaction, float coolDownTime, bool forceChange);
        System.Threading.Tasks.Task<bool> ApplyMutationChangeForced(Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef newStage, Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef newFaction);
    }
}