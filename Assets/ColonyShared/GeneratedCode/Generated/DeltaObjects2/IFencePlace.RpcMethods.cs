// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class FencePlace
    {
        public Task<bool> StateSet(SharedCode.DeltaObjects.Building.BuildState value)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return StateSetRunMaster(value).AsTask();
                else
                    return StateSetRun(value).AsTask();
            else
                return SendFuncs.StateSet(value, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> StateSetCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildState value) => () =>
        {
            return StateSet(value);
        }

        ;
        public async ValueTask<bool> StateSetRunMaster(SharedCode.DeltaObjects.Building.BuildState value)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(StateSetCreateDeferredDelegate(value), nameof(StateSet));
            }

            return await StateSetRun(value);
        }

        public async ValueTask<bool> StateSetRun(SharedCode.DeltaObjects.Building.BuildState value)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(StateSet)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = StateSetImpl(value);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> NameSet(string value)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return NameSetRunMaster(value).AsTask();
                else
                    return NameSetRun(value).AsTask();
            else
                return SendFuncs.NameSet(value, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> NameSetCreateDeferredDelegate(string value) => () =>
        {
            return NameSet(value);
        }

        ;
        public async ValueTask<bool> NameSetRunMaster(string value)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(NameSetCreateDeferredDelegate(value), nameof(NameSet));
            }

            return await NameSetRun(value);
        }

        public async ValueTask<bool> NameSetRun(string value)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(NameSet)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = NameSetImpl(value);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> PrefabSet(string value)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return PrefabSetRunMaster(value).AsTask();
                else
                    return PrefabSetRun(value).AsTask();
            else
                return SendFuncs.PrefabSet(value, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> PrefabSetCreateDeferredDelegate(string value) => () =>
        {
            return PrefabSet(value);
        }

        ;
        public async ValueTask<bool> PrefabSetRunMaster(string value)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(PrefabSetCreateDeferredDelegate(value), nameof(PrefabSet));
            }

            return await PrefabSetRun(value);
        }

        public async ValueTask<bool> PrefabSetRun(string value)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 2);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(PrefabSet)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = PrefabSetImpl(value);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ContainsKey(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainsKeyRunMaster(type, elementId).AsTask();
                else
                    return ContainsKeyRun(type, elementId).AsTask();
            else
                return SendFuncs.ContainsKey(type, elementId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ContainsKeyCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId) => () =>
        {
            return ContainsKey(type, elementId);
        }

        ;
        public async ValueTask<bool> ContainsKeyRunMaster(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainsKeyCreateDeferredDelegate(type, elementId), nameof(ContainsKey));
            }

            return await ContainsKeyRun(type, elementId);
        }

        public async ValueTask<bool> ContainsKeyRun(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 3);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = ContainsKeyImpl(type, elementId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.DeltaObjects.Building.IPositionedBuild> TryGetValue(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return TryGetValueRunMaster(type, elementId).AsTask();
                else
                    return TryGetValueRun(type, elementId).AsTask();
            else
                return SendFuncs.TryGetValue(type, elementId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.DeltaObjects.Building.IPositionedBuild>> TryGetValueCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId) => () =>
        {
            return TryGetValue(type, elementId);
        }

        ;
        public async ValueTask<SharedCode.DeltaObjects.Building.IPositionedBuild> TryGetValueRunMaster(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(TryGetValueCreateDeferredDelegate(type, elementId), nameof(TryGetValue));
            }

            return await TryGetValueRun(type, elementId);
        }

        public async ValueTask<SharedCode.DeltaObjects.Building.IPositionedBuild> TryGetValueRun(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 4);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = TryGetValueImpl(type, elementId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CheckStructure(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CheckStructureRunMaster(type, build).AsTask();
                else
                    return CheckStructureRun(type, build).AsTask();
            else
                return SendFuncs.CheckStructure(type, build, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CheckStructureCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build) => () =>
        {
            return CheckStructure(type, build);
        }

        ;
        public async ValueTask<bool> CheckStructureRunMaster(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CheckStructureCreateDeferredDelegate(type, build), nameof(CheckStructure));
            }

            return await CheckStructureRun(type, build);
        }

        public async ValueTask<bool> CheckStructureRun(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 5);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CheckStructureImpl(type, build);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> AddStructure(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddStructureRunMaster(type, build).AsTask();
                else
                    return AddStructureRun(type, build).AsTask();
            else
                return SendFuncs.AddStructure(type, build, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> AddStructureCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build) => () =>
        {
            return AddStructure(type, build);
        }

        ;
        public async ValueTask<bool> AddStructureRunMaster(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddStructureCreateDeferredDelegate(type, build), nameof(AddStructure));
            }

            return await AddStructureRun(type, build);
        }

        public async ValueTask<bool> AddStructureRun(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 6);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(AddStructure)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = AddStructureImpl(type, build);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>>> RemoveStructure(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveStructureRunMaster(type, elementId).AsTask();
                else
                    return RemoveStructureRun(type, elementId).AsTask();
            else
                return SendFuncs.RemoveStructure(type, elementId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>>>> RemoveStructureCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId) => () =>
        {
            return RemoveStructure(type, elementId);
        }

        ;
        public async ValueTask<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>>> RemoveStructureRunMaster(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveStructureCreateDeferredDelegate(type, elementId), nameof(RemoveStructure));
            }

            return await RemoveStructureRun(type, elementId);
        }

        public async ValueTask<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>>> RemoveStructureRun(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 7);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RemoveStructure)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RemoveStructureImpl(type, elementId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> AddElement(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddElementRunMaster(type, build).AsTask();
                else
                    return AddElementRun(type, build).AsTask();
            else
                return SendFuncs.AddElement(type, build, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> AddElementCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build) => () =>
        {
            return AddElement(type, build);
        }

        ;
        public async ValueTask<bool> AddElementRunMaster(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddElementCreateDeferredDelegate(type, build), nameof(AddElement));
            }

            return await AddElementRun(type, build);
        }

        public async ValueTask<bool> AddElementRun(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.DeltaObjects.Building.IPositionedBuild build)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 8);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(AddElement)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = AddElementImpl(type, build);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> RemoveElements(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveElementsRunMaster(elements).AsTask();
                else
                    return RemoveElementsRun(elements).AsTask();
            else
                return SendFuncs.RemoveElements(elements, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> RemoveElementsCreateDeferredDelegate(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements) => () =>
        {
            return RemoveElements(elements);
        }

        ;
        public async ValueTask<bool> RemoveElementsRunMaster(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveElementsCreateDeferredDelegate(elements), nameof(RemoveElements));
            }

            return await RemoveElementsRun(elements);
        }

        public async ValueTask<bool> RemoveElementsRun(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 9);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RemoveElements)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RemoveElementsImpl(elements);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken> StartChain(SharedCode.DeltaObjects.Building.BuildType type, float tick, int count, System.Guid elementId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return StartChainRunMaster(type, tick, count, elementId).AsTask();
                else
                    return StartChainRun(type, tick, count, elementId).AsTask();
            else
                return SendFuncs.StartChain(type, tick, count, elementId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken>> StartChainCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, float tick, int count, System.Guid elementId) => () =>
        {
            return StartChain(type, tick, count, elementId);
        }

        ;
        public async ValueTask<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken> StartChainRunMaster(SharedCode.DeltaObjects.Building.BuildType type, float tick, int count, System.Guid elementId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(StartChainCreateDeferredDelegate(type, tick, count, elementId), nameof(StartChain));
            }

            return await StartChainRun(type, tick, count, elementId);
        }

        public async ValueTask<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken> StartChainRun(SharedCode.DeltaObjects.Building.BuildType type, float tick, int count, System.Guid elementId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 10);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = StartChainImpl(type, tick, count, elementId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CancelChain(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.EntitySystem.ChainCalls.ChainCancellationToken token)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CancelChainRunMaster(type, token).AsTask();
                else
                    return CancelChainRun(type, token).AsTask();
            else
                return SendFuncs.CancelChain(type, token, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CancelChainCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.EntitySystem.ChainCalls.ChainCancellationToken token) => () =>
        {
            return CancelChain(type, token);
        }

        ;
        public async ValueTask<bool> CancelChainRunMaster(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.EntitySystem.ChainCalls.ChainCancellationToken token)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CancelChainCreateDeferredDelegate(type, token), nameof(CancelChain));
            }

            return await CancelChainRun(type, token);
        }

        public async ValueTask<bool> CancelChainRun(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.EntitySystem.ChainCalls.ChainCancellationToken token)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 11);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CancelChainImpl(type, token);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> RemoveChain(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveChainRunMaster(elements).AsTask();
                else
                    return RemoveChainRun(elements).AsTask();
            else
                return SendFuncs.RemoveChain(elements, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> RemoveChainCreateDeferredDelegate(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements) => () =>
        {
            return RemoveChain(elements);
        }

        ;
        public async ValueTask<bool> RemoveChainRunMaster(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveChainCreateDeferredDelegate(elements), nameof(RemoveChain));
            }

            return await RemoveChainRun(elements);
        }

        public async ValueTask<bool> RemoveChainRun(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 12);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = RemoveChainImpl(elements);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> OnProgress(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnProgressRunMaster(type, elementId).AsTask();
                else
                    return OnProgressRun(type, elementId).AsTask();
            else
                return SendFuncs.OnProgress(type, elementId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> OnProgressCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId) => () =>
        {
            return OnProgress(type, elementId);
        }

        ;
        public async ValueTask<bool> OnProgressRunMaster(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnProgressCreateDeferredDelegate(type, elementId), nameof(OnProgress));
            }

            return await OnProgressRun(type, elementId);
        }

        public async ValueTask<bool> OnProgressRun(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 13);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnProgress)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnProgressImpl(type, elementId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> RemoveDelay(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveDelayRunMaster(elements).AsTask();
                else
                    return RemoveDelayRun(elements).AsTask();
            else
                return SendFuncs.RemoveDelay(elements, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> RemoveDelayCreateDeferredDelegate(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements) => () =>
        {
            return RemoveDelay(elements);
        }

        ;
        public async ValueTask<bool> RemoveDelayRunMaster(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveDelayCreateDeferredDelegate(elements), nameof(RemoveDelay));
            }

            return await RemoveDelayRun(elements);
        }

        public async ValueTask<bool> RemoveDelayRun(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IFencePlace), 14);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RemoveDelay)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RemoveDelayImpl(elements);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }
    }
}