// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class TimeSyncerEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITimeSyncerEntityAlways
    {
        public TimeSyncerEntityAlways(SharedCode.Entities.ITimeSyncerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ITimeSyncerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ITimeSyncerEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1178407192;
    }

    public class TimeSyncerEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITimeSyncerEntityClientBroadcast
    {
        public TimeSyncerEntityClientBroadcast(SharedCode.Entities.ITimeSyncerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ITimeSyncerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ITimeSyncerEntity)__deltaObjectBase__;
            }
        }

        public long LastServerTime => __deltaObject__.LastServerTime;
        public System.Threading.Tasks.Task<bool> UpdateTime()
        {
            return __deltaObject__.UpdateTime();
        }

        public System.Threading.Tasks.Task<long> Ping()
        {
            return __deltaObject__.Ping();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = LastServerTime;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1620635931;
    }

    public class TimeSyncerEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITimeSyncerEntityClientFullApi
    {
        public TimeSyncerEntityClientFullApi(SharedCode.Entities.ITimeSyncerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ITimeSyncerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ITimeSyncerEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1954827039;
    }

    public class TimeSyncerEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITimeSyncerEntityClientFull
    {
        public TimeSyncerEntityClientFull(SharedCode.Entities.ITimeSyncerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ITimeSyncerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ITimeSyncerEntity)__deltaObjectBase__;
            }
        }

        public long LastServerTime => __deltaObject__.LastServerTime;
        public System.Threading.Tasks.Task<bool> UpdateTime()
        {
            return __deltaObject__.UpdateTime();
        }

        public System.Threading.Tasks.Task<long> Ping()
        {
            return __deltaObject__.Ping();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = LastServerTime;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 258242146;
    }

    public class TimeSyncerEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITimeSyncerEntityServerApi
    {
        public TimeSyncerEntityServerApi(SharedCode.Entities.ITimeSyncerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ITimeSyncerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ITimeSyncerEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1697462906;
    }

    public class TimeSyncerEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITimeSyncerEntityServer
    {
        public TimeSyncerEntityServer(SharedCode.Entities.ITimeSyncerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ITimeSyncerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ITimeSyncerEntity)__deltaObjectBase__;
            }
        }

        public long LastServerTime => __deltaObject__.LastServerTime;
        public System.Threading.Tasks.Task<bool> UpdateTime()
        {
            return __deltaObject__.UpdateTime();
        }

        public System.Threading.Tasks.Task<long> Ping()
        {
            return __deltaObject__.Ping();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = LastServerTime;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -2064880702;
    }
}