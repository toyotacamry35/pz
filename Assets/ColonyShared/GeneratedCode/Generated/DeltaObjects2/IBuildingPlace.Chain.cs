// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Entities.Service;
using SharedCode.EntitySystem.ChainCalls;
using SharedCode.Logging;
using SharedCode.OurSimpleIoC;
using SharedCode.Utils;
using System.Linq;
using System.Collections.Generic;
using System.CodeDom.Compiler;

namespace GeneratedCode.DeltaObjects.Chain
{
    [GeneratedCode("CodeGen", "1.0")]
    public class BuildingPlaceChainProxy : BaseChainEntity
    {
        public BuildingPlaceChainProxy(SharedCode.Entities.Building.IBuildingPlace entity): base(entity)
        {
        }

        public BuildingPlaceChainProxy(SharedCode.Entities.Building.IBuildingPlace entity, IChainedEntity fromChain): base(entity, fromChain)
        {
        }

        public BuildingPlaceChainProxy StateSet(ChainArgument<SharedCode.DeltaObjects.Building.BuildState> value)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (value is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)value).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.BuildState)value);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 0, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy StartPlace(ChainArgument<bool> instant)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (instant is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)instant).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (bool)instant);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 1, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy CancelPlace()
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 2, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy OnProgressPlace()
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 3, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy NameSet(ChainArgument<string> value)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (value is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)value).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (string)value);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 4, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy PrefabSet(ChainArgument<string> value)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (value is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)value).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (string)value);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 5, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy ContainsKey(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<System.Guid> elementId)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (type is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)type).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.BuildType)type);
                if (elementId is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)elementId).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (System.Guid)elementId);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 6, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy TryGetValue(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<System.Guid> elementId)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (type is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)type).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.BuildType)type);
                if (elementId is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)elementId).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (System.Guid)elementId);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 7, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy CheckStructure(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<SharedCode.DeltaObjects.Building.IPositionedBuild> build)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (type is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)type).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.BuildType)type);
                if (build is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)build).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.IPositionedBuild)build);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 8, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy AddStructure(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<SharedCode.DeltaObjects.Building.IPositionedBuild> build)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (type is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)type).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.BuildType)type);
                if (build is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)build).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.IPositionedBuild)build);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 9, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy RemoveStructure(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<System.Guid> elementId)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (type is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)type).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.BuildType)type);
                if (elementId is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)elementId).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (System.Guid)elementId);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 10, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy AddElement(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<SharedCode.DeltaObjects.Building.IPositionedBuild> build)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (type is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)type).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.BuildType)type);
                if (build is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)build).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.IPositionedBuild)build);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 11, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy RemoveElements(ChainArgument<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>>> elements)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (elements is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)elements).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>>)elements);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 12, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy StartChain(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<float> tick, ChainArgument<int> count, ChainArgument<System.Guid> elementId)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (type is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)type).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.BuildType)type);
                if (tick is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)tick).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (float)tick);
                if (count is IChainResult)
                    argumetRefs.Add(2, ((IChainResult)count).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)count);
                if (elementId is IChainResult)
                    argumetRefs.Add(3, ((IChainResult)elementId).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (System.Guid)elementId);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 13, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy CancelChain(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken> token)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (type is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)type).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.BuildType)type);
                if (token is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)token).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.EntitySystem.ChainCalls.ChainCancellationToken)token);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 14, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy RemoveChain(ChainArgument<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>>> elements)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (elements is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)elements).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>>)elements);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 15, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy OnProgress(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<System.Guid> elementId)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (type is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)type).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.DeltaObjects.Building.BuildType)type);
                if (elementId is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)elementId).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (System.Guid)elementId);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 16, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy RemoveDelay(ChainArgument<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>>> elements)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (elements is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)elements).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>>)elements);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 17, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BuildingPlaceChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
        {
            chainBatch.Chain.Add(new ChainBlockPeriod(duration, repeat ? -1 : 0, fromUtcNow));
            return this;
        }

        public BuildingPlaceChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
        {
            chainBatch.Chain.Add(new ChainBlockPeriod(duration, count, fromUtcNow));
            return this;
        }

        public BuildingPlaceChainProxy StoreResult(string name)
        {
            ((ChainBlockCall)chainBatch.Chain.Last()).SetStoreResultKey(name);
            return this;
        }
    }

    public static partial class ChainProxyExtensions
    {
        public static BuildingPlaceChainProxy Chain(this SharedCode.Entities.Building.IBuildingPlace entity)
        {
            return new BuildingPlaceChainProxy(entity);
        }

        public static BuildingPlaceChainProxy ContinueChain(this SharedCode.Entities.Building.IBuildingPlace entity, IChainedEntity fromChain)
        {
            return new BuildingPlaceChainProxy(entity, fromChain);
        }
    }
}