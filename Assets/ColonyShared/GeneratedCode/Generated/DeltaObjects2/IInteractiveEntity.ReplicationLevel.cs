// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class InteractiveEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInteractiveEntityAlways
    {
        public InteractiveEntityAlways(Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineAlways ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineAlways)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = ComputableStateMachine;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 15:
                    currProperty = Buffs;
                    break;
                case 18:
                    currProperty = Def;
                    break;
                case 19:
                    currProperty = MapOwner;
                    break;
                case 20:
                    currProperty = StaticIdFromExport;
                    break;
                case 21:
                    currProperty = Name;
                    break;
                case 22:
                    currProperty = Prefab;
                    break;
                case 23:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 24:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 26:
                    currProperty = WorldSpaced;
                    break;
                case 27:
                    currProperty = MovementSync;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1845943449;
    }

    public class InteractiveEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInteractiveEntityClientBroadcast
    {
        public InteractiveEntityClientBroadcast(Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableClientBroadcast Lootable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableClientBroadcast)__deltaObject__.Lootable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientBroadcast ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientBroadcast)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientBroadcast LinksEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientBroadcast)__deltaObject__.LinksEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientBroadcast Lifespan => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientBroadcast)__deltaObject__.Lifespan?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Lootable;
                    break;
                case 11:
                    currProperty = ComputableStateMachine;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 14:
                    currProperty = SpawnedObject;
                    break;
                case 15:
                    currProperty = Buffs;
                    break;
                case 16:
                    currProperty = LinksEngine;
                    break;
                case 17:
                    currProperty = Lifespan;
                    break;
                case 18:
                    currProperty = Def;
                    break;
                case 19:
                    currProperty = MapOwner;
                    break;
                case 20:
                    currProperty = StaticIdFromExport;
                    break;
                case 21:
                    currProperty = Name;
                    break;
                case 22:
                    currProperty = Prefab;
                    break;
                case 23:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 24:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 26:
                    currProperty = WorldSpaced;
                    break;
                case 27:
                    currProperty = MovementSync;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 735457852;
    }

    public class InteractiveEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInteractiveEntityClientFullApi
    {
        public InteractiveEntityClientFullApi(Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1652027442;
    }

    public class InteractiveEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInteractiveEntityClientFull
    {
        public InteractiveEntityClientFull(Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableClientFull Lootable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableClientFull)__deltaObject__.Lootable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientFull ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientFull)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientFull LinksEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientFull)__deltaObject__.LinksEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientFull Lifespan => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientFull)__deltaObject__.Lifespan?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Lootable;
                    break;
                case 11:
                    currProperty = ComputableStateMachine;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 14:
                    currProperty = SpawnedObject;
                    break;
                case 15:
                    currProperty = Buffs;
                    break;
                case 16:
                    currProperty = LinksEngine;
                    break;
                case 17:
                    currProperty = Lifespan;
                    break;
                case 18:
                    currProperty = Def;
                    break;
                case 19:
                    currProperty = MapOwner;
                    break;
                case 20:
                    currProperty = StaticIdFromExport;
                    break;
                case 21:
                    currProperty = Name;
                    break;
                case 22:
                    currProperty = Prefab;
                    break;
                case 23:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 24:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 26:
                    currProperty = WorldSpaced;
                    break;
                case 27:
                    currProperty = MovementSync;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -253433788;
    }

    public class InteractiveEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInteractiveEntityServerApi
    {
        public InteractiveEntityServerApi(Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1309978782;
    }

    public class InteractiveEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInteractiveEntityServer
    {
        public InteractiveEntityServer(Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IInteractiveEntity)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableServer Lootable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableServer)__deltaObject__.Lootable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineServer ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineServer)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer Destroyable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer)__deltaObject__.Destroyable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineServer LinksEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineServer)__deltaObject__.LinksEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanServer Lifespan => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanServer)__deltaObject__.Lifespan?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Lootable;
                    break;
                case 11:
                    currProperty = ComputableStateMachine;
                    break;
                case 12:
                    currProperty = Destroyable;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 14:
                    currProperty = SpawnedObject;
                    break;
                case 15:
                    currProperty = Buffs;
                    break;
                case 16:
                    currProperty = LinksEngine;
                    break;
                case 17:
                    currProperty = Lifespan;
                    break;
                case 18:
                    currProperty = Def;
                    break;
                case 19:
                    currProperty = MapOwner;
                    break;
                case 20:
                    currProperty = StaticIdFromExport;
                    break;
                case 21:
                    currProperty = Name;
                    break;
                case 22:
                    currProperty = Prefab;
                    break;
                case 23:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 24:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 26:
                    currProperty = WorldSpaced;
                    break;
                case 27:
                    currProperty = MovementSync;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1515594736;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class CorpseInteractiveEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICorpseInteractiveEntityAlways
    {
        public CorpseInteractiveEntityAlways(Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineAlways ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineAlways)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = MapOwner;
                    break;
                case 12:
                    currProperty = StaticIdFromExport;
                    break;
                case 13:
                    currProperty = Name;
                    break;
                case 14:
                    currProperty = Prefab;
                    break;
                case 15:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 16:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 18:
                    currProperty = WorldSpaced;
                    break;
                case 20:
                    currProperty = ComputableStateMachine;
                    break;
                case 22:
                    currProperty = Mortal;
                    break;
                case 23:
                    currProperty = MovementSync;
                    break;
                case 25:
                    currProperty = Buffs;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 32:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1717726856;
    }

    public class CorpseInteractiveEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICorpseInteractiveEntityClientBroadcast
    {
        public CorpseInteractiveEntityClientBroadcast(Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableClientBroadcast Lootable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableClientBroadcast)__deltaObject__.Lootable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientBroadcast ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientBroadcast)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientBroadcast LinksEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientBroadcast)__deltaObject__.LinksEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientBroadcast Doll => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientBroadcast)__deltaObject__.Doll?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientBroadcast OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientBroadcast)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientBroadcast Lifespan => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientBroadcast)__deltaObject__.Lifespan?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = MapOwner;
                    break;
                case 12:
                    currProperty = StaticIdFromExport;
                    break;
                case 13:
                    currProperty = Name;
                    break;
                case 14:
                    currProperty = Prefab;
                    break;
                case 15:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 16:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 18:
                    currProperty = WorldSpaced;
                    break;
                case 19:
                    currProperty = Lootable;
                    break;
                case 20:
                    currProperty = ComputableStateMachine;
                    break;
                case 22:
                    currProperty = Mortal;
                    break;
                case 23:
                    currProperty = MovementSync;
                    break;
                case 24:
                    currProperty = SpawnedObject;
                    break;
                case 25:
                    currProperty = Buffs;
                    break;
                case 26:
                    currProperty = LinksEngine;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 28:
                    currProperty = Doll;
                    break;
                case 30:
                    currProperty = OpenMechanics;
                    break;
                case 31:
                    currProperty = Lifespan;
                    break;
                case 32:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 47054934;
    }

    public class CorpseInteractiveEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICorpseInteractiveEntityClientFullApi
    {
        public CorpseInteractiveEntityClientFullApi(Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -879663632;
    }

    public class CorpseInteractiveEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICorpseInteractiveEntityClientFull
    {
        public CorpseInteractiveEntityClientFull(Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableClientFull Lootable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableClientFull)__deltaObject__.Lootable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientFull ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientFull)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientFull LinksEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientFull)__deltaObject__.LinksEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientFull Doll => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientFull)__deltaObject__.Doll?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientFull OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientFull)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientFull Lifespan => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientFull)__deltaObject__.Lifespan?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> MoveAllItems(SharedCode.EntitySystem.PropertyAddress source, SharedCode.EntitySystem.PropertyAddress destination)
        {
            return __deltaObject__.MoveAllItems(source, destination);
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = MapOwner;
                    break;
                case 12:
                    currProperty = StaticIdFromExport;
                    break;
                case 13:
                    currProperty = Name;
                    break;
                case 14:
                    currProperty = Prefab;
                    break;
                case 15:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 16:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 18:
                    currProperty = WorldSpaced;
                    break;
                case 19:
                    currProperty = Lootable;
                    break;
                case 20:
                    currProperty = ComputableStateMachine;
                    break;
                case 22:
                    currProperty = Mortal;
                    break;
                case 23:
                    currProperty = MovementSync;
                    break;
                case 24:
                    currProperty = SpawnedObject;
                    break;
                case 25:
                    currProperty = Buffs;
                    break;
                case 26:
                    currProperty = LinksEngine;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 28:
                    currProperty = Doll;
                    break;
                case 29:
                    currProperty = Inventory;
                    break;
                case 30:
                    currProperty = OpenMechanics;
                    break;
                case 31:
                    currProperty = Lifespan;
                    break;
                case 32:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1184396877;
    }

    public class CorpseInteractiveEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICorpseInteractiveEntityServerApi
    {
        public CorpseInteractiveEntityServerApi(Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1665908032;
    }

    public class CorpseInteractiveEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICorpseInteractiveEntityServer
    {
        public CorpseInteractiveEntityServer(Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.ICorpseInteractiveEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableServer Lootable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILootableServer)__deltaObject__.Lootable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineServer ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineServer)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer Destroyable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer)__deltaObject__.Destroyable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineServer LinksEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineServer)__deltaObject__.LinksEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollServer Doll => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollServer)__deltaObject__.Doll?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsServer OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsServer)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanServer Lifespan => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanServer)__deltaObject__.Lifespan?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> MoveAllItems(SharedCode.EntitySystem.PropertyAddress source, SharedCode.EntitySystem.PropertyAddress destination)
        {
            return __deltaObject__.MoveAllItems(source, destination);
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public System.Threading.Tasks.Task<ResourceSystem.Utils.OuterRef> GetOpenOuterRef(ResourceSystem.Utils.OuterRef oref)
        {
            return __deltaObject__.GetOpenOuterRef(oref);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = MapOwner;
                    break;
                case 12:
                    currProperty = StaticIdFromExport;
                    break;
                case 13:
                    currProperty = Name;
                    break;
                case 14:
                    currProperty = Prefab;
                    break;
                case 15:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 16:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 18:
                    currProperty = WorldSpaced;
                    break;
                case 19:
                    currProperty = Lootable;
                    break;
                case 20:
                    currProperty = ComputableStateMachine;
                    break;
                case 21:
                    currProperty = Destroyable;
                    break;
                case 22:
                    currProperty = Mortal;
                    break;
                case 23:
                    currProperty = MovementSync;
                    break;
                case 24:
                    currProperty = SpawnedObject;
                    break;
                case 25:
                    currProperty = Buffs;
                    break;
                case 26:
                    currProperty = LinksEngine;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 28:
                    currProperty = Doll;
                    break;
                case 29:
                    currProperty = Inventory;
                    break;
                case 30:
                    currProperty = OpenMechanics;
                    break;
                case 31:
                    currProperty = Lifespan;
                    break;
                case 32:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1019800930;
    }
}