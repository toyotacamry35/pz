// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    public partial class KnowledgeEngine
    {
        internal static class ExecuteMethods
        {
            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(0, "IKnowledgeEngine_AddKnowledge_KnowledgeDef_Message")]
            internal static async System.Threading.Tasks.Task AddKnowledge_0(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                SharedCode.Aspects.Science.KnowledgeDef knowledgeDef;
                (knowledgeDef, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Aspects.Science.KnowledgeDef>(__data__, __offset__, 0, chainContext, argumentRefs);
                var __result__ = await ((SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObj__).AddKnowledge(knowledgeDef);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(1, "IKnowledgeEngine_AddTechnology_TechnologyDef_Message")]
            internal static async System.Threading.Tasks.Task AddTechnology_1(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                SharedCode.Aspects.Science.TechnologyDef technologyDef;
                (technologyDef, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Aspects.Science.TechnologyDef>(__data__, __offset__, 0, chainContext, argumentRefs);
                await ((SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObj__).AddTechnology(technologyDef);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(2, "IKnowledgeEngine_Explore_KnowledgeDef_TechPointCountDef_Message")]
            internal static async System.Threading.Tasks.Task Explore_2(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                SharedCode.Aspects.Science.KnowledgeDef knowledgeDef;
                (knowledgeDef, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Aspects.Science.KnowledgeDef>(__data__, __offset__, 0, chainContext, argumentRefs);
                SharedCode.Aspects.Science.TechPointCountDef[] rewardPoints;
                (rewardPoints, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Aspects.Science.TechPointCountDef[]>(__data__, __offset__, 1, chainContext, argumentRefs);
                var __result__ = await ((SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObj__).Explore(knowledgeDef, rewardPoints);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(3, "IKnowledgeEngine_TryToActivate_TechnologyDef_Boolean_Message")]
            internal static async System.Threading.Tasks.Task TryToActivate_3(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                SharedCode.Aspects.Science.TechnologyDef technologyDef;
                (technologyDef, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Aspects.Science.TechnologyDef>(__data__, __offset__, 0, chainContext, argumentRefs);
                bool doActivate;
                (doActivate, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<bool>(__data__, __offset__, 1, chainContext, argumentRefs);
                var __result__ = await ((SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObj__).TryToActivate(technologyDef, doActivate);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(4, "IKnowledgeEngine_ChangeRPoints_TechPointCountDef_Boolean_Message")]
            internal static async System.Threading.Tasks.Task ChangeRPoints_4(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts;
                (techPointCounts, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Aspects.Science.TechPointCountDef[]>(__data__, __offset__, 0, chainContext, argumentRefs);
                bool isIncrement;
                (isIncrement, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<bool>(__data__, __offset__, 1, chainContext, argumentRefs);
                var __result__ = await ((SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObj__).ChangeRPoints(techPointCounts, isIncrement);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(5, "IKnowledgeEngine_CanChangeRPoints_TechPointCountDef_Boolean_Message")]
            internal static async System.Threading.Tasks.Task CanChangeRPoints_5(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts;
                (techPointCounts, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Aspects.Science.TechPointCountDef[]>(__data__, __offset__, 0, chainContext, argumentRefs);
                bool isIncrement;
                (isIncrement, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<bool>(__data__, __offset__, 1, chainContext, argumentRefs);
                var __result__ = await ((SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObj__).CanChangeRPoints(techPointCounts, isIncrement);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(6, "IKnowledgeEngine_AddShownKnowledgeRecord_KnowledgeRecordDef_Message")]
            internal static async System.Threading.Tasks.Task AddShownKnowledgeRecord_6(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                SharedCode.Aspects.Science.KnowledgeRecordDef knowledgeRecordDef;
                (knowledgeRecordDef, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Aspects.Science.KnowledgeRecordDef>(__data__, __offset__, 0, chainContext, argumentRefs);
                var __result__ = await ((SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObj__).AddShownKnowledgeRecord(knowledgeRecordDef);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }
        }
    }
}