// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class FogOfWarAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IFogOfWarAlways
    {
        public FogOfWarAlways(SharedCode.FogOfWar.IFogOfWar deltaObject): base(deltaObject)
        {
        }

        SharedCode.FogOfWar.IFogOfWar __deltaObject__
        {
            get
            {
                return (SharedCode.FogOfWar.IFogOfWar)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1717394472;
    }

    public class FogOfWarClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IFogOfWarClientBroadcast
    {
        public FogOfWarClientBroadcast(SharedCode.FogOfWar.IFogOfWar deltaObject): base(deltaObject)
        {
        }

        SharedCode.FogOfWar.IFogOfWar __deltaObject__
        {
            get
            {
                return (SharedCode.FogOfWar.IFogOfWar)__deltaObjectBase__;
            }
        }

        public System.Threading.Tasks.Task ClearRegions()
        {
            return __deltaObject__.ClearRegions();
        }

        public override int TypeId => 1794612450;
    }

    public class FogOfWarClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IFogOfWarClientFullApi
    {
        public FogOfWarClientFullApi(SharedCode.FogOfWar.IFogOfWar deltaObject): base(deltaObject)
        {
        }

        SharedCode.FogOfWar.IFogOfWar __deltaObject__
        {
            get
            {
                return (SharedCode.FogOfWar.IFogOfWar)__deltaObjectBase__;
            }
        }

        public override int TypeId => -593644836;
    }

    public class FogOfWarClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IFogOfWarClientFull
    {
        public FogOfWarClientFull(SharedCode.FogOfWar.IFogOfWar deltaObject): base(deltaObject)
        {
        }

        SharedCode.FogOfWar.IFogOfWar __deltaObject__
        {
            get
            {
                return (SharedCode.FogOfWar.IFogOfWar)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<Assets.Src.SpatialSystem.IndexedRegionDef, bool> Regions
        {
            get
            {
                return __deltaObject__.Regions;
            }
        }

        public IDeltaList<Assets.Src.SpatialSystem.IndexedRegionDef> CurrentRegions => __deltaObject__.CurrentRegions;
        public IDeltaDictionary<Assets.Src.SpatialSystem.IndexedRegionGroupDef, bool> RegionGroups
        {
            get
            {
                return __deltaObject__.RegionGroups;
            }
        }

        public IDeltaList<Assets.Src.SpatialSystem.IndexedRegionGroupDef> CurrentGroups => __deltaObject__.CurrentGroups;
        public System.Threading.Tasks.Task<bool> SetRegionVisited(Assets.Src.SpatialSystem.IndexedRegionDef region)
        {
            return __deltaObject__.SetRegionVisited(region);
        }

        public System.Threading.Tasks.Task<bool> SetGroupVisited(Assets.Src.SpatialSystem.IndexedRegionGroupDef group)
        {
            return __deltaObject__.SetGroupVisited(group);
        }

        public System.Threading.Tasks.Task<float> GetGroupPercent(Assets.Src.SpatialSystem.IndexedRegionGroupDef group)
        {
            return __deltaObject__.GetGroupPercent(group);
        }

        public System.Threading.Tasks.Task ClearRegions()
        {
            return __deltaObject__.ClearRegions();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Regions;
                    break;
                case 11:
                    currProperty = CurrentRegions;
                    break;
                case 12:
                    currProperty = RegionGroups;
                    break;
                case 13:
                    currProperty = CurrentGroups;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 2139593029;
    }

    public class FogOfWarServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IFogOfWarServerApi
    {
        public FogOfWarServerApi(SharedCode.FogOfWar.IFogOfWar deltaObject): base(deltaObject)
        {
        }

        SharedCode.FogOfWar.IFogOfWar __deltaObject__
        {
            get
            {
                return (SharedCode.FogOfWar.IFogOfWar)__deltaObjectBase__;
            }
        }

        public override int TypeId => 127234861;
    }

    public class FogOfWarServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IFogOfWarServer
    {
        public FogOfWarServer(SharedCode.FogOfWar.IFogOfWar deltaObject): base(deltaObject)
        {
        }

        SharedCode.FogOfWar.IFogOfWar __deltaObject__
        {
            get
            {
                return (SharedCode.FogOfWar.IFogOfWar)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<Assets.Src.SpatialSystem.IndexedRegionDef, bool> Regions
        {
            get
            {
                return __deltaObject__.Regions;
            }
        }

        public IDeltaList<Assets.Src.SpatialSystem.IndexedRegionDef> CurrentRegions => __deltaObject__.CurrentRegions;
        public IDeltaDictionary<Assets.Src.SpatialSystem.IndexedRegionGroupDef, bool> RegionGroups
        {
            get
            {
                return __deltaObject__.RegionGroups;
            }
        }

        public IDeltaList<Assets.Src.SpatialSystem.IndexedRegionGroupDef> CurrentGroups => __deltaObject__.CurrentGroups;
        public System.Threading.Tasks.Task<bool> DiscoverRegion(Assets.Src.SpatialSystem.IndexedRegionDef region)
        {
            return __deltaObject__.DiscoverRegion(region);
        }

        public System.Threading.Tasks.Task<bool> SetRegionVisited(Assets.Src.SpatialSystem.IndexedRegionDef region)
        {
            return __deltaObject__.SetRegionVisited(region);
        }

        public System.Threading.Tasks.Task<bool> DiscoverGroup(Assets.Src.SpatialSystem.IndexedRegionGroupDef group)
        {
            return __deltaObject__.DiscoverGroup(group);
        }

        public System.Threading.Tasks.Task<bool> SetGroupVisited(Assets.Src.SpatialSystem.IndexedRegionGroupDef group)
        {
            return __deltaObject__.SetGroupVisited(group);
        }

        public System.Threading.Tasks.Task<float> GetGroupPercent(Assets.Src.SpatialSystem.IndexedRegionGroupDef group)
        {
            return __deltaObject__.GetGroupPercent(group);
        }

        public System.Threading.Tasks.Task ClearRegions()
        {
            return __deltaObject__.ClearRegions();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Regions;
                    break;
                case 11:
                    currProperty = CurrentRegions;
                    break;
                case 12:
                    currProperty = RegionGroups;
                    break;
                case 13:
                    currProperty = CurrentGroups;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1771914613;
    }
}