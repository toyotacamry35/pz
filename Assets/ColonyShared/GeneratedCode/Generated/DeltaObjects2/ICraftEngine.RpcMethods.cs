// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class CraftEngine
    {
        public Task SetResultContainerAddress(SharedCode.EntitySystem.PropertyAddress resultContainerAddress)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetResultContainerAddressRunMaster(resultContainerAddress).AsTask();
                else
                    return SetResultContainerAddressRun(resultContainerAddress).AsTask();
            else
                return SendFuncs.SetResultContainerAddress(resultContainerAddress, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> SetResultContainerAddressCreateDeferredDelegate(SharedCode.EntitySystem.PropertyAddress resultContainerAddress) => () =>
        {
            return SetResultContainerAddress(resultContainerAddress);
        }

        ;
        public async ValueTask SetResultContainerAddressRunMaster(SharedCode.EntitySystem.PropertyAddress resultContainerAddress)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetResultContainerAddressCreateDeferredDelegate(resultContainerAddress), nameof(SetResultContainerAddress));
            }

            await SetResultContainerAddressRun(resultContainerAddress);
        }

        public async ValueTask SetResultContainerAddressRun(SharedCode.EntitySystem.PropertyAddress resultContainerAddress)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(SetResultContainerAddress)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = SetResultContainerAddressImpl(resultContainerAddress);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task UpdateFuelTime()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UpdateFuelTimeRunMaster().AsTask();
                else
                    return UpdateFuelTimeRun().AsTask();
            else
                return SendFuncs.UpdateFuelTime(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> UpdateFuelTimeCreateDeferredDelegate() => () =>
        {
            return UpdateFuelTime();
        }

        ;
        public async ValueTask UpdateFuelTimeRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UpdateFuelTimeCreateDeferredDelegate(), nameof(UpdateFuelTime));
            }

            await UpdateFuelTimeRun();
        }

        public async ValueTask UpdateFuelTimeRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(UpdateFuelTime)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = UpdateFuelTimeImpl();
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task UpdateCraftingTime()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UpdateCraftingTimeRunMaster().AsTask();
                else
                    return UpdateCraftingTimeRun().AsTask();
            else
                return SendFuncs.UpdateCraftingTime(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> UpdateCraftingTimeCreateDeferredDelegate() => () =>
        {
            return UpdateCraftingTime();
        }

        ;
        public async ValueTask UpdateCraftingTimeRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UpdateCraftingTimeCreateDeferredDelegate(), nameof(UpdateCraftingTime));
            }

            await UpdateCraftingTimeRun();
        }

        public async ValueTask UpdateCraftingTimeRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 2);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(UpdateCraftingTime)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = UpdateCraftingTimeImpl();
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task UpdateRepairTime(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UpdateRepairTimeRunMaster(itemAddress, itemIndex).AsTask();
                else
                    return UpdateRepairTimeRun(itemAddress, itemIndex).AsTask();
            else
                return SendFuncs.UpdateRepairTime(itemAddress, itemIndex, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> UpdateRepairTimeCreateDeferredDelegate(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex) => () =>
        {
            return UpdateRepairTime(itemAddress, itemIndex);
        }

        ;
        public async ValueTask UpdateRepairTimeRunMaster(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UpdateRepairTimeCreateDeferredDelegate(itemAddress, itemIndex), nameof(UpdateRepairTime));
            }

            await UpdateRepairTimeRun(itemAddress, itemIndex);
        }

        public async ValueTask UpdateRepairTimeRun(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 3);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(UpdateRepairTime)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = UpdateRepairTimeImpl(itemAddress, itemIndex);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> CanRun()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CanRunRunMaster().AsTask();
                else
                    return CanRunRun().AsTask();
            else
                return SendFuncs.CanRun(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CanRunCreateDeferredDelegate() => () =>
        {
            return CanRun();
        }

        ;
        public async ValueTask<bool> CanRunRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanRunCreateDeferredDelegate(), nameof(CanRun));
            }

            return await CanRunRun();
        }

        public async ValueTask<bool> CanRunRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 4);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(CanRun)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = CanRunImpl();
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.CraftOperationResult> RunCraft()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RunCraftRunMaster().AsTask();
                else
                    return RunCraftRun().AsTask();
            else
                return SendFuncs.RunCraft(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.CraftOperationResult>> RunCraftCreateDeferredDelegate() => () =>
        {
            return RunCraft();
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> RunCraftRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RunCraftCreateDeferredDelegate(), nameof(RunCraft));
            }

            return await RunCraftRun();
        }

        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> RunCraftRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 5);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RunCraft)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RunCraftImpl();
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task StopCraft()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return StopCraftRunMaster().AsTask();
                else
                    return StopCraftRun().AsTask();
            else
                return SendFuncs.StopCraft(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> StopCraftCreateDeferredDelegate() => () =>
        {
            return StopCraft();
        }

        ;
        public async ValueTask StopCraftRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(StopCraftCreateDeferredDelegate(), nameof(StopCraft));
            }

            await StopCraftRun();
        }

        public async ValueTask StopCraftRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 6);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(StopCraft)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = StopCraftImpl();
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.CraftOperationResult> Craft(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipe, int variantIdx, int count, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress inventoryAddress, SharedCode.EntitySystem.PropertyAddress inventoryAddress2)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CraftRunMaster(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2).AsTask();
                else
                    return CraftRun(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2).AsTask();
            else
                return SendFuncs.Craft(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.CraftOperationResult>> CraftCreateDeferredDelegate(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipe, int variantIdx, int count, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress inventoryAddress, SharedCode.EntitySystem.PropertyAddress inventoryAddress2) => () =>
        {
            return Craft(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> CraftRunMaster(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipe, int variantIdx, int count, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress inventoryAddress, SharedCode.EntitySystem.PropertyAddress inventoryAddress2)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CraftCreateDeferredDelegate(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2), nameof(Craft));
            }

            return await CraftRun(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2);
        }

        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> CraftRun(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipe, int variantIdx, int count, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress inventoryAddress, SharedCode.EntitySystem.PropertyAddress inventoryAddress2)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 7);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(Craft)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = CraftImpl(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.CraftOperationResult> Repair(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex, int recipeIndex, int variantIdx, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress2)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RepairRunMaster(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2).AsTask();
                else
                    return RepairRun(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2).AsTask();
            else
                return SendFuncs.Repair(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.CraftOperationResult>> RepairCreateDeferredDelegate(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex, int recipeIndex, int variantIdx, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress2) => () =>
        {
            return Repair(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> RepairRunMaster(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex, int recipeIndex, int variantIdx, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress2)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RepairCreateDeferredDelegate(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2), nameof(Repair));
            }

            return await RepairRun(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2);
        }

        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> RepairRun(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex, int recipeIndex, int variantIdx, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress2)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 8);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(Repair)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RepairImpl(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.CraftOperationResult> RemoveCraft(int recipeIndex)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveCraftRunMaster(recipeIndex).AsTask();
                else
                    return RemoveCraftRun(recipeIndex).AsTask();
            else
                return SendFuncs.RemoveCraft(recipeIndex, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.CraftOperationResult>> RemoveCraftCreateDeferredDelegate(int recipeIndex) => () =>
        {
            return RemoveCraft(recipeIndex);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> RemoveCraftRunMaster(int recipeIndex)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveCraftCreateDeferredDelegate(recipeIndex), nameof(RemoveCraft));
            }

            return await RemoveCraftRun(recipeIndex);
        }

        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> RemoveCraftRun(int recipeIndex)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 9);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RemoveCraft)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RemoveCraftImpl(recipeIndex);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.CraftOperationResult> SwapCraft(int index1, int index2)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SwapCraftRunMaster(index1, index2).AsTask();
                else
                    return SwapCraftRun(index1, index2).AsTask();
            else
                return SendFuncs.SwapCraft(index1, index2, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.CraftOperationResult>> SwapCraftCreateDeferredDelegate(int index1, int index2) => () =>
        {
            return SwapCraft(index1, index2);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> SwapCraftRunMaster(int index1, int index2)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SwapCraftCreateDeferredDelegate(index1, index2), nameof(SwapCraft));
            }

            return await SwapCraftRun(index1, index2);
        }

        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> SwapCraftRun(int index1, int index2)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 10);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(SwapCraft)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = SwapCraftImpl(index1, index2);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.CraftOperationResult> StopCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return StopCraftWithWorkbenchRunMaster(workbenchType).AsTask();
                else
                    return StopCraftWithWorkbenchRun(workbenchType).AsTask();
            else
                return SendFuncs.StopCraftWithWorkbench(workbenchType, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.CraftOperationResult>> StopCraftWithWorkbenchCreateDeferredDelegate(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType) => () =>
        {
            return StopCraftWithWorkbench(workbenchType);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> StopCraftWithWorkbenchRunMaster(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(StopCraftWithWorkbenchCreateDeferredDelegate(workbenchType), nameof(StopCraftWithWorkbench));
            }

            return await StopCraftWithWorkbenchRun(workbenchType);
        }

        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> StopCraftWithWorkbenchRun(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 11);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(StopCraftWithWorkbench)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = StopCraftWithWorkbenchImpl(workbenchType);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.CraftOperationResult> ContinueCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContinueCraftWithWorkbenchRunMaster(workbenchType).AsTask();
                else
                    return ContinueCraftWithWorkbenchRun(workbenchType).AsTask();
            else
                return SendFuncs.ContinueCraftWithWorkbench(workbenchType, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.CraftOperationResult>> ContinueCraftWithWorkbenchCreateDeferredDelegate(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType) => () =>
        {
            return ContinueCraftWithWorkbench(workbenchType);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> ContinueCraftWithWorkbenchRunMaster(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContinueCraftWithWorkbenchCreateDeferredDelegate(workbenchType), nameof(ContinueCraftWithWorkbench));
            }

            return await ContinueCraftWithWorkbenchRun(workbenchType);
        }

        public async ValueTask<SharedCode.Entities.Engine.CraftOperationResult> ContinueCraftWithWorkbenchRun(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.ICraftEngine), 12);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContinueCraftWithWorkbench)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContinueCraftWithWorkbenchImpl(workbenchType);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }
    }
}