// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    public interface IContainerApiImplementRemoteMethods
    {
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationAddPrepareResult> ContainerOperationMoveAddPrepareImpl(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, SharedCode.Entities.IItemWrapper itemWrapper, bool manual);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAddCommitImpl(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAddRollbackImpl(System.Guid transactionId);
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationRemovePrepareResult> ContainerOperationMoveRemovePrepareImpl(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, int count, System.Guid clientSrcEntityId, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveRemoveCommitImpl(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveRemoveRollbackImpl(System.Guid transactionId);
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationMoveAllAddPrepareResult> ContainerOperationMoveAllAddPrepareImpl(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers, bool manual, bool sameSlots);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllAddCommitImpl(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllAddRollbackImpl(System.Guid transactionId);
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationMoveAllRemovePrepareResult> ContainerOperationMoveAllRemovePrepareImpl(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, bool manual);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllRemoveCommitImpl(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllRemoveRollbackImpl(System.Guid transactionId);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveChangePrepareImpl(System.Guid transactionId, SharedCode.Entities.IItemWrapper itemWrapper);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddNewItemImpl(SharedCode.Entities.IItemWrapper itemWrapper, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddItemsImpl(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> itemResourcesToAdd, SharedCode.EntitySystem.PropertyAddress destination, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationRemoveBatchItemImpl(System.Collections.Generic.List<SharedCode.Entities.RemoveItemBatchElement> items, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveAllChangePrepareImpl(System.Guid transactionId, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers);
        System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> ContainerOperationSetSizeImpl(SharedCode.EntitySystem.PropertyAddress address, int size);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> DropImpl(SharedCode.EntitySystem.PropertyAddress address, int slotId, int stackCount);
    }
}