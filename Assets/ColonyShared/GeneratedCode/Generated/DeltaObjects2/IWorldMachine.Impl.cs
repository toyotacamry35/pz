// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("WorldMachine")]
    public partial class WorldMachine : SharedCode.EntitySystem.BaseEntity, SharedCode.Entities.IWorldMachine, IWorldMachineImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public WorldMachine()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                Inventory = new GeneratedCode.DeltaObjects.BuildingContainer();
                FuelContainer = new GeneratedCode.DeltaObjects.MachineFuelContainer();
                OutputContainer = new GeneratedCode.DeltaObjects.MachineOutputContainer();
                PriorityQueue = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Entities.ICraftingPriorityQueueItem>();
                Def = default(SharedCode.Entities.GameObjectEntities.IEntityObjectDef);
                MapOwner = default(GeneratedCode.MapSystem.MapOwner);
                StaticIdFromExport = default(System.Guid);
                Name = default(string);
                Prefab = default(string);
                SomeUnknownResourceThatMayBeUseful = default(Assets.Src.ResourcesSystem.Base.ISaveableResource);
                OnSceneObjectNetId = default(SharedCode.Entities.OnSceneObjectNetId);
                AutoAddToWorldSpace = new GeneratedCode.DeltaObjects.AutoAddToWorldSpace();
                WorldSpaced = new GeneratedCode.DeltaObjects.WorldSpaced();
                MovementSync = new GeneratedCode.DeltaObjects.SimpleMovementSync();
                OpenMechanics = new GeneratedCode.DeltaObjects.OpenMechanics();
                IsActive = default(bool);
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
                CraftProgressInfo = new GeneratedCode.DeltaObjects.CraftProgressInfo();
                ContainerApi = new GeneratedCode.DeltaObjects.ContainerApi();
                Stats = new GeneratedCode.DeltaObjects.StatsEngine();
                Health = new GeneratedCode.DeltaObjects.HealthEngine();
                SlaveWizardHolder = new GeneratedCode.DeltaObjects.SlaveWizardHolder();
            }

            constructor();
        }

        public WorldMachine(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                Inventory = new GeneratedCode.DeltaObjects.BuildingContainer();
                FuelContainer = new GeneratedCode.DeltaObjects.MachineFuelContainer();
                OutputContainer = new GeneratedCode.DeltaObjects.MachineOutputContainer();
                PriorityQueue = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Entities.ICraftingPriorityQueueItem>();
                Def = default(SharedCode.Entities.GameObjectEntities.IEntityObjectDef);
                MapOwner = default(GeneratedCode.MapSystem.MapOwner);
                StaticIdFromExport = default(System.Guid);
                Name = default(string);
                Prefab = default(string);
                SomeUnknownResourceThatMayBeUseful = default(Assets.Src.ResourcesSystem.Base.ISaveableResource);
                OnSceneObjectNetId = default(SharedCode.Entities.OnSceneObjectNetId);
                AutoAddToWorldSpace = new GeneratedCode.DeltaObjects.AutoAddToWorldSpace();
                WorldSpaced = new GeneratedCode.DeltaObjects.WorldSpaced();
                MovementSync = new GeneratedCode.DeltaObjects.SimpleMovementSync();
                OpenMechanics = new GeneratedCode.DeltaObjects.OpenMechanics();
                IsActive = default(bool);
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
                CraftProgressInfo = new GeneratedCode.DeltaObjects.CraftProgressInfo();
                ContainerApi = new GeneratedCode.DeltaObjects.ContainerApi();
                Stats = new GeneratedCode.DeltaObjects.StatsEngine();
                Health = new GeneratedCode.DeltaObjects.HealthEngine();
                SlaveWizardHolder = new GeneratedCode.DeltaObjects.SlaveWizardHolder();
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_Inventory != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Inventory).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_FuelContainer != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_FuelContainer).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_OutputContainer != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_OutputContainer).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_PriorityQueue != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_PriorityQueue).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Master) == (long)SharedCode.EntitySystem.ReplicationLevel.Master)
                if (_AutoAddToWorldSpace != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_AutoAddToWorldSpace).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Master, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_WorldSpaced != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_WorldSpaced).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_MovementSync != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_MovementSync).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_OpenMechanics != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_OpenMechanics).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if (_CraftEngine != null && ((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & replicationMask) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull && (!onlyDbEntities || GeneratedCode.EntitySystem.DeltaObjectHelper.DbEntity(_CraftEngine)))
                entities.Add((currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, _CraftEngine));
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_OwnerInformation != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_OwnerInformation).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_CraftProgressInfo != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_CraftProgressInfo).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_ContainerApi != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_ContainerApi).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_Stats != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Stats).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_Health != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Health).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if (_Wizard != null && ((long)SharedCode.EntitySystem.ReplicationLevel.Always & replicationMask) == (long)SharedCode.EntitySystem.ReplicationLevel.Always && (!onlyDbEntities || GeneratedCode.EntitySystem.DeltaObjectHelper.DbEntity(_Wizard)))
                entities.Add((currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, _Wizard));
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_SlaveWizardHolder != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_SlaveWizardHolder).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void LinkEntityRefs(SharedCode.EntitySystem.IEntitiesRepository repository)
        {
            base.LinkEntityRefs(repository);
            CraftEngine = GeneratedCode.EntitySystem.DeltaObjectHelper.LinkEntityRef(GetType(), CraftEngine, nameof(CraftEngine), repository);
            Wizard = GeneratedCode.EntitySystem.DeltaObjectHelper.LinkEntityRef(GetType(), Wizard, nameof(Wizard), repository);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Inventory, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _FuelContainer, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _OutputContainer, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _PriorityQueue, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _AutoAddToWorldSpace, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Master ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Master, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _WorldSpaced, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _MovementSync, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _OpenMechanics, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _OwnerInformation, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _CraftProgressInfo, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _ContainerApi, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Stats, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Health, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _SlaveWizardHolder, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Inventory, 10, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _FuelContainer, 11, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _OutputContainer, 12, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _PriorityQueue, 13, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _AutoAddToWorldSpace, 21, false, SharedCode.EntitySystem.ReplicationLevel.Master);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _WorldSpaced, 22, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _MovementSync, 23, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _OpenMechanics, 24, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _OwnerInformation, 27, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _CraftProgressInfo, 28, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _ContainerApi, 29, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Stats, 30, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Health, 31, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _SlaveWizardHolder, 33, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Inventory)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_FuelContainer)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OutputContainer)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_PriorityQueue)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AutoAddToWorldSpace)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_WorldSpaced)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_MovementSync)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OpenMechanics)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftProgressInfo)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ContainerApi)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Stats)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Health)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SlaveWizardHolder)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Inventory, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _FuelContainer, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _OutputContainer, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _PriorityQueue, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _AutoAddToWorldSpace, SharedCode.EntitySystem.ReplicationLevel.Master, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _WorldSpaced, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _MovementSync, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _OpenMechanics, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize((SharedCode.EntitySystem.IEntitiesRepositoryExtension)EntitiesRepository, parentEntity, _CraftEngine, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _OwnerInformation, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _CraftProgressInfo, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _ContainerApi, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Stats, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Health, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize((SharedCode.EntitySystem.IEntitiesRepositoryExtension)EntitiesRepository, parentEntity, _Wizard, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _SlaveWizardHolder, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Inventory)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_FuelContainer)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OutputContainer)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_PriorityQueue)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AutoAddToWorldSpace)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_WorldSpaced)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_MovementSync)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OpenMechanics)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftProgressInfo)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ContainerApi)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Stats)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Health)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SlaveWizardHolder)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Inventory":
                    Inventory__Changed += callback;
                    break;
                case "FuelContainer":
                    FuelContainer__Changed += callback;
                    break;
                case "OutputContainer":
                    OutputContainer__Changed += callback;
                    break;
                case "PriorityQueue":
                    PriorityQueue__Changed += callback;
                    break;
                case "Def":
                    Def__Changed += callback;
                    break;
                case "MapOwner":
                    MapOwner__Changed += callback;
                    break;
                case "StaticIdFromExport":
                    StaticIdFromExport__Changed += callback;
                    break;
                case "Name":
                    Name__Changed += callback;
                    break;
                case "Prefab":
                    Prefab__Changed += callback;
                    break;
                case "SomeUnknownResourceThatMayBeUseful":
                    SomeUnknownResourceThatMayBeUseful__Changed += callback;
                    break;
                case "OnSceneObjectNetId":
                    OnSceneObjectNetId__Changed += callback;
                    break;
                case "AutoAddToWorldSpace":
                    AutoAddToWorldSpace__Changed += callback;
                    break;
                case "WorldSpaced":
                    WorldSpaced__Changed += callback;
                    break;
                case "MovementSync":
                    MovementSync__Changed += callback;
                    break;
                case "OpenMechanics":
                    OpenMechanics__Changed += callback;
                    break;
                case "IsActive":
                    IsActive__Changed += callback;
                    break;
                case "CraftEngine":
                    CraftEngine__Changed += callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed += callback;
                    break;
                case "CraftProgressInfo":
                    CraftProgressInfo__Changed += callback;
                    break;
                case "ContainerApi":
                    ContainerApi__Changed += callback;
                    break;
                case "Stats":
                    Stats__Changed += callback;
                    break;
                case "Health":
                    Health__Changed += callback;
                    break;
                case "Wizard":
                    Wizard__Changed += callback;
                    break;
                case "SlaveWizardHolder":
                    SlaveWizardHolder__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Inventory":
                    Inventory__Changed -= callback;
                    break;
                case "FuelContainer":
                    FuelContainer__Changed -= callback;
                    break;
                case "OutputContainer":
                    OutputContainer__Changed -= callback;
                    break;
                case "PriorityQueue":
                    PriorityQueue__Changed -= callback;
                    break;
                case "Def":
                    Def__Changed -= callback;
                    break;
                case "MapOwner":
                    MapOwner__Changed -= callback;
                    break;
                case "StaticIdFromExport":
                    StaticIdFromExport__Changed -= callback;
                    break;
                case "Name":
                    Name__Changed -= callback;
                    break;
                case "Prefab":
                    Prefab__Changed -= callback;
                    break;
                case "SomeUnknownResourceThatMayBeUseful":
                    SomeUnknownResourceThatMayBeUseful__Changed -= callback;
                    break;
                case "OnSceneObjectNetId":
                    OnSceneObjectNetId__Changed -= callback;
                    break;
                case "AutoAddToWorldSpace":
                    AutoAddToWorldSpace__Changed -= callback;
                    break;
                case "WorldSpaced":
                    WorldSpaced__Changed -= callback;
                    break;
                case "MovementSync":
                    MovementSync__Changed -= callback;
                    break;
                case "OpenMechanics":
                    OpenMechanics__Changed -= callback;
                    break;
                case "IsActive":
                    IsActive__Changed -= callback;
                    break;
                case "CraftEngine":
                    CraftEngine__Changed -= callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed -= callback;
                    break;
                case "CraftProgressInfo":
                    CraftProgressInfo__Changed -= callback;
                    break;
                case "ContainerApi":
                    ContainerApi__Changed -= callback;
                    break;
                case "Stats":
                    Stats__Changed -= callback;
                    break;
                case "Health":
                    Health__Changed -= callback;
                    break;
                case "Wizard":
                    Wizard__Changed -= callback;
                    break;
                case "SlaveWizardHolder":
                    SlaveWizardHolder__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "Inventory":
                    Inventory__Changed = null;
                    break;
                case "FuelContainer":
                    FuelContainer__Changed = null;
                    break;
                case "OutputContainer":
                    OutputContainer__Changed = null;
                    break;
                case "PriorityQueue":
                    PriorityQueue__Changed = null;
                    break;
                case "Def":
                    Def__Changed = null;
                    break;
                case "MapOwner":
                    MapOwner__Changed = null;
                    break;
                case "StaticIdFromExport":
                    StaticIdFromExport__Changed = null;
                    break;
                case "Name":
                    Name__Changed = null;
                    break;
                case "Prefab":
                    Prefab__Changed = null;
                    break;
                case "SomeUnknownResourceThatMayBeUseful":
                    SomeUnknownResourceThatMayBeUseful__Changed = null;
                    break;
                case "OnSceneObjectNetId":
                    OnSceneObjectNetId__Changed = null;
                    break;
                case "AutoAddToWorldSpace":
                    AutoAddToWorldSpace__Changed = null;
                    break;
                case "WorldSpaced":
                    WorldSpaced__Changed = null;
                    break;
                case "MovementSync":
                    MovementSync__Changed = null;
                    break;
                case "OpenMechanics":
                    OpenMechanics__Changed = null;
                    break;
                case "IsActive":
                    IsActive__Changed = null;
                    break;
                case "CraftEngine":
                    CraftEngine__Changed = null;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed = null;
                    break;
                case "CraftProgressInfo":
                    CraftProgressInfo__Changed = null;
                    break;
                case "ContainerApi":
                    ContainerApi__Changed = null;
                    break;
                case "Stats":
                    Stats__Changed = null;
                    break;
                case "Health":
                    Health__Changed = null;
                    break;
                case "Wizard":
                    Wizard__Changed = null;
                    break;
                case "SlaveWizardHolder":
                    SlaveWizardHolder__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            Inventory__Changed = null;
            FuelContainer__Changed = null;
            OutputContainer__Changed = null;
            PriorityQueue__Changed = null;
            Def__Changed = null;
            MapOwner__Changed = null;
            StaticIdFromExport__Changed = null;
            Name__Changed = null;
            Prefab__Changed = null;
            SomeUnknownResourceThatMayBeUseful__Changed = null;
            OnSceneObjectNetId__Changed = null;
            AutoAddToWorldSpace__Changed = null;
            WorldSpaced__Changed = null;
            MovementSync__Changed = null;
            OpenMechanics__Changed = null;
            IsActive__Changed = null;
            CraftEngine__Changed = null;
            OwnerInformation__Changed = null;
            CraftProgressInfo__Changed = null;
            ContainerApi__Changed = null;
            Stats__Changed = null;
            Health__Changed = null;
            Wizard__Changed = null;
            SlaveWizardHolder__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && Inventory__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Inventory, nameof(Inventory), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Inventory__Changed);
            }

            if (NeedFireEvent(11) && FuelContainer__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_FuelContainer, nameof(FuelContainer), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, FuelContainer__Changed);
            }

            if (NeedFireEvent(12) && OutputContainer__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OutputContainer, nameof(OutputContainer), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OutputContainer__Changed);
            }

            if (NeedFireEvent(13) && PriorityQueue__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_PriorityQueue, nameof(PriorityQueue), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, PriorityQueue__Changed);
            }

            if (NeedFireEvent(14) && Def__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Def, nameof(Def), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Def__Changed);
            }

            if (NeedFireEvent(15) && MapOwner__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_MapOwner, nameof(MapOwner), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, MapOwner__Changed);
            }

            if (NeedFireEvent(16) && StaticIdFromExport__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 16;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_StaticIdFromExport, nameof(StaticIdFromExport), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, StaticIdFromExport__Changed);
            }

            if (NeedFireEvent(17) && Name__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 17;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Name, nameof(Name), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Name__Changed);
            }

            if (NeedFireEvent(18) && Prefab__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 18;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Prefab, nameof(Prefab), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Prefab__Changed);
            }

            if (NeedFireEvent(19) && SomeUnknownResourceThatMayBeUseful__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 19;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SomeUnknownResourceThatMayBeUseful, nameof(SomeUnknownResourceThatMayBeUseful), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SomeUnknownResourceThatMayBeUseful__Changed);
            }

            if (NeedFireEvent(20) && OnSceneObjectNetId__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 20;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OnSceneObjectNetId, nameof(OnSceneObjectNetId), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OnSceneObjectNetId__Changed);
            }

            if (NeedFireEvent(21) && AutoAddToWorldSpace__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 21;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AutoAddToWorldSpace, nameof(AutoAddToWorldSpace), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AutoAddToWorldSpace__Changed);
            }

            if (NeedFireEvent(22) && WorldSpaced__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 22;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_WorldSpaced, nameof(WorldSpaced), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, WorldSpaced__Changed);
            }

            if (NeedFireEvent(23) && MovementSync__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 23;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_MovementSync, nameof(MovementSync), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, MovementSync__Changed);
            }

            if (NeedFireEvent(24) && OpenMechanics__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 24;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OpenMechanics, nameof(OpenMechanics), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OpenMechanics__Changed);
            }

            if (NeedFireEvent(25) && IsActive__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 25;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_IsActive, nameof(IsActive), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, IsActive__Changed);
            }

            if (NeedFireEvent(26) && CraftEngine__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 26;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CraftEngine, nameof(CraftEngine), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CraftEngine__Changed);
            }

            if (NeedFireEvent(27) && OwnerInformation__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 27;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OwnerInformation, nameof(OwnerInformation), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OwnerInformation__Changed);
            }

            if (NeedFireEvent(28) && CraftProgressInfo__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 28;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CraftProgressInfo, nameof(CraftProgressInfo), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CraftProgressInfo__Changed);
            }

            if (NeedFireEvent(29) && ContainerApi__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 29;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ContainerApi, nameof(ContainerApi), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ContainerApi__Changed);
            }

            if (NeedFireEvent(30) && Stats__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 30;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Stats, nameof(Stats), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Stats__Changed);
            }

            if (NeedFireEvent(31) && Health__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 31;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Health, nameof(Health), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Health__Changed);
            }

            if (NeedFireEvent(32) && Wizard__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 32;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Wizard, nameof(Wizard), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Wizard__Changed);
            }

            if (NeedFireEvent(33) && SlaveWizardHolder__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 33;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SlaveWizardHolder, nameof(SlaveWizardHolder), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SlaveWizardHolder__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                Inventory = default;
            if (_Inventory != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Inventory).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                FuelContainer = default;
            if (_FuelContainer != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_FuelContainer).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                OutputContainer = default;
            if (_OutputContainer != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OutputContainer).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                PriorityQueue = default;
            if (_PriorityQueue != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_PriorityQueue).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                MapOwner = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Name = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Prefab = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                SomeUnknownResourceThatMayBeUseful = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                OnSceneObjectNetId = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                AutoAddToWorldSpace = default;
            if (_AutoAddToWorldSpace != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AutoAddToWorldSpace).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                WorldSpaced = default;
            if (_WorldSpaced != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_WorldSpaced).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                MovementSync = default;
            if (_MovementSync != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_MovementSync).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                OpenMechanics = default;
            if (_OpenMechanics != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OpenMechanics).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                IsActive = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                CraftEngine = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                OwnerInformation = default;
            if (_OwnerInformation != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                CraftProgressInfo = default;
            if (_CraftProgressInfo != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftProgressInfo).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                ContainerApi = default;
            if (_ContainerApi != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ContainerApi).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Stats = default;
            if (_Stats != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Stats).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Health = default;
            if (_Health != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Health).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Wizard = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                SlaveWizardHolder = default;
            if (_SlaveWizardHolder != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SlaveWizardHolder).Downgrade(mask);
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("CraftingPriorityQueueItem")]
    public partial class CraftingPriorityQueueItem : SharedCode.EntitySystem.BaseDeltaObject, SharedCode.Entities.ICraftingPriorityQueueItem
    {
        public CraftingPriorityQueueItem()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                CraftRecipe = default(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef);
            }

            constructor();
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "CraftRecipe":
                    CraftRecipe__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "CraftRecipe":
                    CraftRecipe__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "CraftRecipe":
                    CraftRecipe__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            CraftRecipe__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && CraftRecipe__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CraftRecipe, nameof(CraftRecipe), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CraftRecipe__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                CraftRecipe = default;
        }
    }
}