// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, 1509725559, typeof(SharedCode.Entities.Service.ICheatServiceEntity))]
    public interface ICheatServiceEntityAlways : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, 1596319760, typeof(SharedCode.Entities.Service.ICheatServiceEntity))]
    public interface ICheatServiceEntityClientBroadcast : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        System.Threading.Tasks.Task AddSomeItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> prototypeNames, SharedCode.EntitySystem.PropertyAddress source);
        System.Threading.Tasks.Task AddItemsInSlot(SharedCode.Entities.ItemResourcePack prototypeName, SharedCode.EntitySystem.PropertyAddress source, int slot);
        System.Threading.Tasks.Task AddQuest(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest, System.Guid characterId);
        System.Threading.Tasks.Task AddTechPoints(SharedCode.Aspects.Science.TechPointCount[] techPointCounts, System.Guid characterId);
        System.Threading.Tasks.Task AddKnowledge(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, System.Guid characterId);
        System.Threading.Tasks.Task SpawnInteractiveObjectEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task SpawnNewMineableEntity(SharedCode.Entities.GameObjectEntities.MineableEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task SpawnInteractiveEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task<string> GetRepositoryEntitiesCount();
        System.Threading.Tasks.Task<string> GetRepositoryEntitiesCountOnAllRepositories();
        System.Threading.Tasks.Task<string> SetVisibilityRadius(float enterRadius, float leaveRadius);
        System.Threading.Tasks.Task<string> GetTooLongEntityWaitQueues();
        System.Threading.Tasks.Task PrintBrokenLocomotions();
        System.Threading.Tasks.Task SetDebugMobPositionLogging(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus, bool dump);
        System.Threading.Tasks.Task SetCurveLoggerState(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool enabledStatus, bool dump, bool serverOnly, string loggerName, System.Guid dumpId);
        System.Threading.Tasks.Task SetLoggableEnable(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus);
        System.Threading.Tasks.Task MainUnityThreadOnServerSleep(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime);
        System.Threading.Tasks.Task CastSpell(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> entityRef, SharedCode.Wizardry.SpellCast spellCast);
        System.Threading.Tasks.Task SetServerCheatVariable(Assets.Src.ResourcesSystem.Base.BaseResource resource, string value);
        System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> TestCheckPZ15200Done(float waitBeforeReplicate);
        System.Threading.Tasks.Task EnableWizardLogger(ResourceSystem.Utils.OuterRef entity, bool enable);
        System.Threading.Tasks.Task SetGender(ResourceSystem.Utils.OuterRef entity, ResourceSystem.Aspects.Misc.GenderDef gender);
        System.Threading.Tasks.Task InvokeTrauma(ResourceSystem.Utils.OuterRef entity, string trauma);
        System.Threading.Tasks.Task StopTrauma(ResourceSystem.Utils.OuterRef entity, string trauma);
        event System.Func<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, bool, bool, string, System.Guid, System.Threading.Tasks.Task> SetCurveLoggerEvent;
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, -1653138385, typeof(SharedCode.Entities.Service.ICheatServiceEntity))]
    public interface ICheatServiceEntityClientFullApi : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, 737724562, typeof(SharedCode.Entities.Service.ICheatServiceEntity))]
    public interface ICheatServiceEntityClientFull : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        System.Threading.Tasks.Task AddSomeItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> prototypeNames, SharedCode.EntitySystem.PropertyAddress source);
        System.Threading.Tasks.Task AddItemsInSlot(SharedCode.Entities.ItemResourcePack prototypeName, SharedCode.EntitySystem.PropertyAddress source, int slot);
        System.Threading.Tasks.Task AddQuest(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest, System.Guid characterId);
        System.Threading.Tasks.Task AddTechPoints(SharedCode.Aspects.Science.TechPointCount[] techPointCounts, System.Guid characterId);
        System.Threading.Tasks.Task AddKnowledge(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, System.Guid characterId);
        System.Threading.Tasks.Task SpawnInteractiveObjectEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task SpawnNewMineableEntity(SharedCode.Entities.GameObjectEntities.MineableEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task SpawnInteractiveEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task<string> GetRepositoryEntitiesCount();
        System.Threading.Tasks.Task<string> GetRepositoryEntitiesCountOnAllRepositories();
        System.Threading.Tasks.Task<string> SetVisibilityRadius(float enterRadius, float leaveRadius);
        System.Threading.Tasks.Task<string> GetTooLongEntityWaitQueues();
        System.Threading.Tasks.Task<int> GetCCU();
        System.Threading.Tasks.Task SetDebugMode(bool enabled);
        System.Threading.Tasks.Task SetDebugMobs(bool enabledStatus, bool hard);
        System.Threading.Tasks.Task SetDebugSpells(bool enabledStatus);
        System.Threading.Tasks.Task PrintBrokenLocomotions();
        System.Threading.Tasks.ValueTask DamageAllItems(System.Guid character, float percent);
        System.Threading.Tasks.Task SetDebugMobPositionLogging(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus, bool dump);
        System.Threading.Tasks.Task SetCurveLoggerState(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool enabledStatus, bool dump, bool serverOnly, string loggerName, System.Guid dumpId);
        System.Threading.Tasks.Task SetLoggableEnable(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus);
        System.Threading.Tasks.Task MainUnityThreadOnServerSleep(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime);
        System.Threading.Tasks.Task<bool> ChangeHealth(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> victimEntity, int deltaValue);
        System.Threading.Tasks.Task<bool> Godmode(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> applicantEntityRef, bool enable);
        System.Threading.Tasks.Task<SharedCode.Utils.Vector3[]> ResolveCharacterCoords(System.Guid[] guids);
        System.Threading.Tasks.Task ForceGC(int count, System.Guid repositoryId);
        System.Threading.Tasks.Task ForceSelfCompactionGC();
        System.Threading.Tasks.Task CastSpell(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> entityRef, SharedCode.Wizardry.SpellCast spellCast);
        System.Threading.Tasks.Task SetServerCheatVariable(Assets.Src.ResourcesSystem.Base.BaseResource resource, string value);
        System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> TestCheckPZ15200Done(float waitBeforeReplicate);
        System.Threading.Tasks.Task EnableWizardLogger(ResourceSystem.Utils.OuterRef entity, bool enable);
        System.Threading.Tasks.Task SetGender(ResourceSystem.Utils.OuterRef entity, ResourceSystem.Aspects.Misc.GenderDef gender);
        System.Threading.Tasks.Task InvokeTrauma(ResourceSystem.Utils.OuterRef entity, string trauma);
        System.Threading.Tasks.Task StopTrauma(ResourceSystem.Utils.OuterRef entity, string trauma);
        event System.Func<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, bool, bool, string, System.Guid, System.Threading.Tasks.Task> SetCurveLoggerEvent;
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, 1924522926, typeof(SharedCode.Entities.Service.ICheatServiceEntity))]
    public interface ICheatServiceEntityServerApi : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, -268174264, typeof(SharedCode.Entities.Service.ICheatServiceEntity))]
    public interface ICheatServiceEntityServer : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        System.Threading.Tasks.Task AddSomeItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> prototypeNames, SharedCode.EntitySystem.PropertyAddress source);
        System.Threading.Tasks.Task AddItemsInSlot(SharedCode.Entities.ItemResourcePack prototypeName, SharedCode.EntitySystem.PropertyAddress source, int slot);
        System.Threading.Tasks.Task AddQuest(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest, System.Guid characterId);
        System.Threading.Tasks.Task AddTechPoints(SharedCode.Aspects.Science.TechPointCount[] techPointCounts, System.Guid characterId);
        System.Threading.Tasks.Task AddKnowledge(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, System.Guid characterId);
        System.Threading.Tasks.Task SpawnInteractiveObjectEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task SpawnNewMineableEntity(SharedCode.Entities.GameObjectEntities.MineableEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task SpawnInteractiveEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task<string> GetRepositoryEntitiesCount();
        System.Threading.Tasks.Task<string> GetRepositoryEntitiesCountOnAllRepositories();
        System.Threading.Tasks.Task DumpAllServerRepositories();
        System.Threading.Tasks.Task<string> SetVisibilityRadius(float enterRadius, float leaveRadius);
        System.Threading.Tasks.Task<string> GetTooLongEntityWaitQueues();
        System.Threading.Tasks.Task<int> GetCCU();
        System.Threading.Tasks.Task SetDebugMode(bool enabled);
        System.Threading.Tasks.Task SetDebugMobs(bool enabledStatus, bool hard);
        System.Threading.Tasks.Task SetDebugSpells(bool enabledStatus);
        System.Threading.Tasks.Task PrintBrokenLocomotions();
        System.Threading.Tasks.ValueTask DamageAllItems(System.Guid character, float percent);
        System.Threading.Tasks.Task SetDebugMobPositionLogging(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus, bool dump);
        System.Threading.Tasks.Task SetCurveLoggerState(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool enabledStatus, bool dump, bool serverOnly, string loggerName, System.Guid dumpId);
        System.Threading.Tasks.Task SetLoggableEnable(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus);
        System.Threading.Tasks.Task MainUnityThreadOnServerSleep(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime);
        System.Threading.Tasks.Task<bool> ChangeHealth(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> victimEntity, int deltaValue);
        System.Threading.Tasks.Task<bool> Godmode(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> applicantEntityRef, bool enable);
        System.Threading.Tasks.Task Version01();
        System.Threading.Tasks.Task<SharedCode.Utils.Vector3[]> ResolveCharacterCoords(System.Guid[] guids);
        System.Threading.Tasks.Task ForceGC(int count, System.Guid repositoryId);
        System.Threading.Tasks.Task ForceSelfCompactionGC();
        System.Threading.Tasks.Task SetGCEnabled(bool enabled, System.Guid repositoryId);
        System.Threading.Tasks.Task CastSpell(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> entityRef, SharedCode.Wizardry.SpellCast spellCast);
        System.Threading.Tasks.Task SetServerCheatVariable(Assets.Src.ResourcesSystem.Base.BaseResource resource, string value);
        System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> TestCheckPZ15200Done(float waitBeforeReplicate);
        System.Threading.Tasks.Task EnableWizardLogger(ResourceSystem.Utils.OuterRef entity, bool enable);
        System.Threading.Tasks.Task SetGender(ResourceSystem.Utils.OuterRef entity, ResourceSystem.Aspects.Misc.GenderDef gender);
        System.Threading.Tasks.Task InvokeTrauma(ResourceSystem.Utils.OuterRef entity, string trauma);
        System.Threading.Tasks.Task StopTrauma(ResourceSystem.Utils.OuterRef entity, string trauma);
        event System.Func<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, bool, bool, string, System.Guid, System.Threading.Tasks.Task> SetCurveLoggerEvent;
    }
}