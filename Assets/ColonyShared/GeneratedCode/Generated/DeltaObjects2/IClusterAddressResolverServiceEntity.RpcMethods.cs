// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class ClusterAddressResolverServiceEntity
    {
        public ValueTask<System.Guid> GetEntityAddressRepositoryId(int typeId, System.Guid entityId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetEntityAddressRepositoryIdRunMaster(typeId, entityId);
                else
                    return GetEntityAddressRepositoryIdRun(typeId, entityId);
            else
                return SendFuncs.GetEntityAddressRepositoryId(typeId, entityId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<System.Guid>> GetEntityAddressRepositoryIdCreateDeferredDelegate(int typeId, System.Guid entityId) => () =>
        {
            return GetEntityAddressRepositoryId(typeId, entityId).AsTask();
        }

        ;
        public async ValueTask<System.Guid> GetEntityAddressRepositoryIdRunMaster(int typeId, System.Guid entityId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetEntityAddressRepositoryIdCreateDeferredDelegate(typeId, entityId), nameof(GetEntityAddressRepositoryId));
            }

            return await GetEntityAddressRepositoryIdRun(typeId, entityId);
        }

        public async ValueTask<System.Guid> GetEntityAddressRepositoryIdRun(int typeId, System.Guid entityId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IClusterAddressResolverServiceEntity), 0);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetEntityAddressRepositoryIdImpl(typeId, entityId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public ValueTask<System.Collections.Generic.IReadOnlyList<(System.Guid entityId, System.Guid repoId)>> GetAllEntitiesByType(int typeId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetAllEntitiesByTypeRunMaster(typeId);
                else
                    return GetAllEntitiesByTypeRun(typeId);
            else
                return SendFuncs.GetAllEntitiesByType(typeId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<System.Collections.Generic.IReadOnlyList<(System.Guid entityId, System.Guid repoId)>>> GetAllEntitiesByTypeCreateDeferredDelegate(int typeId) => () =>
        {
            return GetAllEntitiesByType(typeId).AsTask();
        }

        ;
        public async ValueTask<System.Collections.Generic.IReadOnlyList<(System.Guid entityId, System.Guid repoId)>> GetAllEntitiesByTypeRunMaster(int typeId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetAllEntitiesByTypeCreateDeferredDelegate(typeId), nameof(GetAllEntitiesByType));
            }

            return await GetAllEntitiesByTypeRun(typeId);
        }

        public async ValueTask<System.Collections.Generic.IReadOnlyList<(System.Guid entityId, System.Guid repoId)>> GetAllEntitiesByTypeRun(int typeId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IClusterAddressResolverServiceEntity), 1);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetAllEntitiesByTypeImpl(typeId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task SetEntityAddressRepositoryId(int typeId, System.Guid entityId, System.Guid repositoryId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetEntityAddressRepositoryIdRunMaster(typeId, entityId, repositoryId).AsTask();
                else
                    return SetEntityAddressRepositoryIdRun(typeId, entityId, repositoryId).AsTask();
            else
                return SendFuncs.SetEntityAddressRepositoryId(typeId, entityId, repositoryId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> SetEntityAddressRepositoryIdCreateDeferredDelegate(int typeId, System.Guid entityId, System.Guid repositoryId) => () =>
        {
            return SetEntityAddressRepositoryId(typeId, entityId, repositoryId);
        }

        ;
        public async ValueTask SetEntityAddressRepositoryIdRunMaster(int typeId, System.Guid entityId, System.Guid repositoryId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetEntityAddressRepositoryIdCreateDeferredDelegate(typeId, entityId, repositoryId), nameof(SetEntityAddressRepositoryId));
            }

            await SetEntityAddressRepositoryIdRun(typeId, entityId, repositoryId);
        }

        public async ValueTask SetEntityAddressRepositoryIdRun(int typeId, System.Guid entityId, System.Guid repositoryId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IClusterAddressResolverServiceEntity), 2);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = SetEntityAddressRepositoryIdImpl(typeId, entityId, repositoryId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task SetEntitiesAddressRepositoryId(System.Collections.Generic.Dictionary<int, System.Guid> entities, System.Guid repositoryId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetEntitiesAddressRepositoryIdRunMaster(entities, repositoryId).AsTask();
                else
                    return SetEntitiesAddressRepositoryIdRun(entities, repositoryId).AsTask();
            else
                return SendFuncs.SetEntitiesAddressRepositoryId(entities, repositoryId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> SetEntitiesAddressRepositoryIdCreateDeferredDelegate(System.Collections.Generic.Dictionary<int, System.Guid> entities, System.Guid repositoryId) => () =>
        {
            return SetEntitiesAddressRepositoryId(entities, repositoryId);
        }

        ;
        public async ValueTask SetEntitiesAddressRepositoryIdRunMaster(System.Collections.Generic.Dictionary<int, System.Guid> entities, System.Guid repositoryId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetEntitiesAddressRepositoryIdCreateDeferredDelegate(entities, repositoryId), nameof(SetEntitiesAddressRepositoryId));
            }

            await SetEntitiesAddressRepositoryIdRun(entities, repositoryId);
        }

        public async ValueTask SetEntitiesAddressRepositoryIdRun(System.Collections.Generic.Dictionary<int, System.Guid> entities, System.Guid repositoryId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IClusterAddressResolverServiceEntity), 3);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = SetEntitiesAddressRepositoryIdImpl(entities, repositoryId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task RemoveEntityAddressRepositoryId(int typeId, System.Guid entityId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveEntityAddressRepositoryIdRunMaster(typeId, entityId).AsTask();
                else
                    return RemoveEntityAddressRepositoryIdRun(typeId, entityId).AsTask();
            else
                return SendFuncs.RemoveEntityAddressRepositoryId(typeId, entityId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> RemoveEntityAddressRepositoryIdCreateDeferredDelegate(int typeId, System.Guid entityId) => () =>
        {
            return RemoveEntityAddressRepositoryId(typeId, entityId);
        }

        ;
        public async ValueTask RemoveEntityAddressRepositoryIdRunMaster(int typeId, System.Guid entityId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveEntityAddressRepositoryIdCreateDeferredDelegate(typeId, entityId), nameof(RemoveEntityAddressRepositoryId));
            }

            await RemoveEntityAddressRepositoryIdRun(typeId, entityId);
        }

        public async ValueTask RemoveEntityAddressRepositoryIdRun(int typeId, System.Guid entityId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IClusterAddressResolverServiceEntity), 4);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = RemoveEntityAddressRepositoryIdImpl(typeId, entityId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}