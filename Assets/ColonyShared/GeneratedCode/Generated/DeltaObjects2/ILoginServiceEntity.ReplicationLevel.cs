// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class LoginServiceEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityAlways
    {
        public LoginServiceEntityAlways(SharedCode.Entities.Cloud.ILoginServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.ILoginServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.ILoginServiceEntity)__deltaObjectBase__;
            }
        }

        public System.Threading.Tasks.Task<bool> IsMapDead(System.Guid map, System.Guid realmId)
        {
            return __deltaObject__.IsMapDead(map, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> RequestUpdateAccountData(System.Guid accId)
        {
            return __deltaObject__.RequestUpdateAccountData(accId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfJoining(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfJoining(accId, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfLeaving(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfLeaving(accId, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfRealmGiveUp(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfRealmGiveUp(accId, realmId);
        }

        public override int TypeId => 2034909350;
    }

    public class LoginServiceEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityClientBroadcast
    {
        public LoginServiceEntityClientBroadcast(SharedCode.Entities.Cloud.ILoginServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.ILoginServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.ILoginServiceEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Aspects.Sessions.RealmRulesConfigDef RealmRulesConfigDef => __deltaObject__.RealmRulesConfigDef;
        public System.Threading.Tasks.Task<bool> AttachMapToRealm(System.Guid mapId, GeneratedCode.Custom.Config.MapDef mapDef, System.Guid realmId)
        {
            return __deltaObject__.AttachMapToRealm(mapId, mapDef, realmId);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Cloud.LoginResult> Login(SharedCode.Data.Platform platform, string version, string userId, string code)
        {
            return __deltaObject__.Login(platform, version, userId, code);
        }

        public System.Threading.Tasks.Task Logout()
        {
            return __deltaObject__.Logout();
        }

        public System.Threading.Tasks.ValueTask<bool> SetMaxCCU(int ccu)
        {
            return __deltaObject__.SetMaxCCU(ccu);
        }

        public System.Threading.Tasks.ValueTask<int> GetCCU()
        {
            return __deltaObject__.GetCCU();
        }

        public System.Threading.Tasks.ValueTask<int> GetMaxCCU()
        {
            return __deltaObject__.GetMaxCCU();
        }

        public System.Threading.Tasks.Task<bool> IsMapDead(System.Guid map, System.Guid realmId)
        {
            return __deltaObject__.IsMapDead(map, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> RequestUpdateAccountData(System.Guid accId)
        {
            return __deltaObject__.RequestUpdateAccountData(accId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfJoining(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfJoining(accId, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfLeaving(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfLeaving(accId, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfRealmGiveUp(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfRealmGiveUp(accId, realmId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = RealmRulesConfigDef;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1595489856;
    }

    public class LoginServiceEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityClientFullApi
    {
        public LoginServiceEntityClientFullApi(SharedCode.Entities.Cloud.ILoginServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.ILoginServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.ILoginServiceEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 2101470845;
    }

    public class LoginServiceEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityClientFull
    {
        public LoginServiceEntityClientFull(SharedCode.Entities.Cloud.ILoginServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.ILoginServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.ILoginServiceEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Aspects.Sessions.RealmRulesConfigDef RealmRulesConfigDef => __deltaObject__.RealmRulesConfigDef;
        public System.Threading.Tasks.Task<bool> AttachMapToRealm(System.Guid mapId, GeneratedCode.Custom.Config.MapDef mapDef, System.Guid realmId)
        {
            return __deltaObject__.AttachMapToRealm(mapId, mapDef, realmId);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Cloud.LoginResult> Login(SharedCode.Data.Platform platform, string version, string userId, string code)
        {
            return __deltaObject__.Login(platform, version, userId, code);
        }

        public System.Threading.Tasks.Task Logout()
        {
            return __deltaObject__.Logout();
        }

        public System.Threading.Tasks.ValueTask<bool> SetMaxCCU(int ccu)
        {
            return __deltaObject__.SetMaxCCU(ccu);
        }

        public System.Threading.Tasks.ValueTask<int> GetCCU()
        {
            return __deltaObject__.GetCCU();
        }

        public System.Threading.Tasks.ValueTask<int> GetMaxCCU()
        {
            return __deltaObject__.GetMaxCCU();
        }

        public System.Threading.Tasks.Task<bool> IsMapDead(System.Guid map, System.Guid realmId)
        {
            return __deltaObject__.IsMapDead(map, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> RequestUpdateAccountData(System.Guid accId)
        {
            return __deltaObject__.RequestUpdateAccountData(accId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfJoining(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfJoining(accId, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfLeaving(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfLeaving(accId, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfRealmGiveUp(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfRealmGiveUp(accId, realmId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = RealmRulesConfigDef;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1334008780;
    }

    public class LoginServiceEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityServerApi
    {
        public LoginServiceEntityServerApi(SharedCode.Entities.Cloud.ILoginServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.ILoginServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.ILoginServiceEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1667817493;
    }

    public class LoginServiceEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityServer
    {
        public LoginServiceEntityServer(SharedCode.Entities.Cloud.ILoginServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Cloud.ILoginServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Cloud.ILoginServiceEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Aspects.Sessions.RealmRulesConfigDef RealmRulesConfigDef => __deltaObject__.RealmRulesConfigDef;
        public System.Threading.Tasks.Task<SharedCode.Entities.Cloud.FindRealmRequestResult> FindRealm(SharedCode.Aspects.Sessions.RealmRulesQueryDef query, System.Guid accountId, System.Guid currentRealm)
        {
            return __deltaObject__.FindRealm(query, accountId, currentRealm);
        }

        public System.Threading.Tasks.Task<System.Guid> GetUserRealm(System.Guid userId)
        {
            return __deltaObject__.GetUserRealm(userId);
        }

        public System.Threading.Tasks.Task<bool> AttachMapToRealm(System.Guid mapId, GeneratedCode.Custom.Config.MapDef mapDef, System.Guid realmId)
        {
            return __deltaObject__.AttachMapToRealm(mapId, mapDef, realmId);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Cloud.LoginResult> Login(SharedCode.Data.Platform platform, string version, string userId, string code)
        {
            return __deltaObject__.Login(platform, version, userId, code);
        }

        public System.Threading.Tasks.Task Logout()
        {
            return __deltaObject__.Logout();
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Cloud.RealmStatus> GetRealmStatus()
        {
            return __deltaObject__.GetRealmStatus();
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Cloud.ELogoutResult> Kick(System.Guid id)
        {
            return __deltaObject__.Kick(id);
        }

        public System.Threading.Tasks.ValueTask<bool> SetMaxCCU(int ccu)
        {
            return __deltaObject__.SetMaxCCU(ccu);
        }

        public System.Threading.Tasks.ValueTask<int> GetCCU()
        {
            return __deltaObject__.GetCCU();
        }

        public System.Threading.Tasks.ValueTask<int> GetMaxCCU()
        {
            return __deltaObject__.GetMaxCCU();
        }

        public System.Threading.Tasks.ValueTask<SharedCode.Entities.Cloud.AccountList> GetAllAccountsOnline()
        {
            return __deltaObject__.GetAllAccountsOnline();
        }

        public System.Threading.Tasks.Task<bool> IsMapDead(System.Guid map, System.Guid realmId)
        {
            return __deltaObject__.IsMapDead(map, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> DeleteAllCharacters(System.Guid accountId)
        {
            return __deltaObject__.DeleteAllCharacters(accountId);
        }

        public System.Threading.Tasks.ValueTask<SharedCode.Entities.Cloud.CharacterList> GetAllCharactersForAccount(System.Guid accountId)
        {
            return __deltaObject__.GetAllCharactersForAccount(accountId);
        }

        public System.Threading.Tasks.ValueTask<int> GetAccountExperience(System.Guid accountId)
        {
            return __deltaObject__.GetAccountExperience(accountId);
        }

        public System.Threading.Tasks.ValueTask<int> AddAccountExperience(System.Guid accountId, int expToGive)
        {
            return __deltaObject__.AddAccountExperience(accountId, expToGive);
        }

        public System.Threading.Tasks.ValueTask<bool> RequestUpdateAccountData(System.Guid accId)
        {
            return __deltaObject__.RequestUpdateAccountData(accId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfJoining(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfJoining(accId, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfLeaving(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfLeaving(accId, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfRealmGiveUp(System.Guid accId, System.Guid realmId)
        {
            return __deltaObject__.NotifyPlatformOfRealmGiveUp(accId, realmId);
        }

        public System.Threading.Tasks.ValueTask<bool> GiveUpRealmOnDeath(System.Guid accId)
        {
            return __deltaObject__.GiveUpRealmOnDeath(accId);
        }

        public System.Threading.Tasks.Task<System.Guid> GetAccountIdByUserId(System.Guid userId)
        {
            return __deltaObject__.GetAccountIdByUserId(userId);
        }

        public System.Threading.Tasks.ValueTask<SharedCode.Entities.AccountStatsData> GetAccountDataForAccStats(System.Guid accountId)
        {
            return __deltaObject__.GetAccountDataForAccStats(accountId);
        }

        public System.Threading.Tasks.Task<bool> AssignAccountToMap(System.Guid accId, System.Guid mapId)
        {
            return __deltaObject__.AssignAccountToMap(accId, mapId);
        }

        public System.Threading.Tasks.Task<bool> GrantAccountReward(System.Guid characterId, ResourceSystem.Aspects.Rewards.RewardDef reward)
        {
            return __deltaObject__.GrantAccountReward(characterId, reward);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = RealmRulesConfigDef;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 609797587;
    }
}