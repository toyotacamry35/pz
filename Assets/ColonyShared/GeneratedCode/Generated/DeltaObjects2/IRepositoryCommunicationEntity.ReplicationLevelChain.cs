// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Entities.Service;
using SharedCode.EntitySystem.ChainCalls;
using SharedCode.Logging;
using SharedCode.OurSimpleIoC;
using SharedCode.Serializers;
using SharedCode.Utils;
using System.Linq;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using GeneratedCode.DeltaObjects.Chain;

[GeneratedCode("CodeGen", "1.0")]
public class RepositoryCommunicationEntityAlwaysChainProxy : IChainedEntity
{
    private RepositoryCommunicationEntityChainProxy __chain__;
    public RepositoryCommunicationEntityAlwaysChainProxy(RepositoryCommunicationEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public RepositoryCommunicationEntityAlwaysChainProxy EntityUpdate(ChainArgument<SharedCode.EntitySystem.UpdateBatch> updateBatch)
    {
        __chain__.EntityUpdate(updateBatch);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy EntityUpdate(ChainArgument<SharedCode.EntitySystem.UpdateBatchContainer> updateBatchContainer)
    {
        __chain__.EntityUpdate(updateBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy EntityUpload(ChainArgument<SharedCode.EntitySystem.UploadBatchContainer> uploadBatchContainer)
    {
        __chain__.EntityUpload(uploadBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy EntityDestroyed(ChainArgument<SharedCode.EntitySystem.DestroyBatchContainer> destroyBatchContainer)
    {
        __chain__.EntityDestroyed(destroyBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy EntityDowngrade(ChainArgument<SharedCode.EntitySystem.DowngradeBatchContainer> downgradeBatchContainer)
    {
        __chain__.EntityDowngrade(downgradeBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy Dump(ChainArgument<string> fileName)
    {
        __chain__.Dump(fileName);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy DumpEntity(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<string> fileName)
    {
        __chain__.DumpEntity(typeId, entityId, fileName);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy DumpEntitySerializedData(ChainArgument<string> fileName, ChainArgument<int> entityTypeId, ChainArgument<System.Guid> entityId, ChainArgument<long> replicationMask)
    {
        __chain__.DumpEntitySerializedData(fileName, entityTypeId, entityId, replicationMask);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy SubscribeReplication(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<System.Guid> repositoryId, ChainArgument<SharedCode.EntitySystem.ReplicationLevel> replicationLevel)
    {
        __chain__.SubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy UnsubscribeReplication(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<System.Guid> repositoryId, ChainArgument<SharedCode.EntitySystem.ReplicationLevel> replicationLevel)
    {
        __chain__.UnsubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy GetEntityStatus(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId)
    {
        __chain__.GetEntityStatus(typeId, entityId);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy GetAllServiceEntityStatus()
    {
        __chain__.GetAllServiceEntityStatus();
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy ForceCloseConnection(ChainArgument<System.Guid> userId)
    {
        __chain__.ForceCloseConnection(userId);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityAlwaysChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static RepositoryCommunicationEntityAlwaysChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityAlways entity)
    {
        return new RepositoryCommunicationEntityAlwaysChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject()));
    }

    public static RepositoryCommunicationEntityAlwaysChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityAlways entity, IChainedEntity fromChain)
    {
        return new RepositoryCommunicationEntityAlwaysChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class RepositoryCommunicationEntityClientBroadcastChainProxy : IChainedEntity
{
    private RepositoryCommunicationEntityChainProxy __chain__;
    public RepositoryCommunicationEntityClientBroadcastChainProxy(RepositoryCommunicationEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy EntityUpdate(ChainArgument<SharedCode.EntitySystem.UpdateBatch> updateBatch)
    {
        __chain__.EntityUpdate(updateBatch);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy EntityUpdate(ChainArgument<SharedCode.EntitySystem.UpdateBatchContainer> updateBatchContainer)
    {
        __chain__.EntityUpdate(updateBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy EntityUpload(ChainArgument<SharedCode.EntitySystem.UploadBatchContainer> uploadBatchContainer)
    {
        __chain__.EntityUpload(uploadBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy EntityDestroyed(ChainArgument<SharedCode.EntitySystem.DestroyBatchContainer> destroyBatchContainer)
    {
        __chain__.EntityDestroyed(destroyBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy EntityDowngrade(ChainArgument<SharedCode.EntitySystem.DowngradeBatchContainer> downgradeBatchContainer)
    {
        __chain__.EntityDowngrade(downgradeBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy Dump(ChainArgument<string> fileName)
    {
        __chain__.Dump(fileName);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy DumpEntity(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<string> fileName)
    {
        __chain__.DumpEntity(typeId, entityId, fileName);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy DumpEntitySerializedData(ChainArgument<string> fileName, ChainArgument<int> entityTypeId, ChainArgument<System.Guid> entityId, ChainArgument<long> replicationMask)
    {
        __chain__.DumpEntitySerializedData(fileName, entityTypeId, entityId, replicationMask);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy SubscribeReplication(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<System.Guid> repositoryId, ChainArgument<SharedCode.EntitySystem.ReplicationLevel> replicationLevel)
    {
        __chain__.SubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy UnsubscribeReplication(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<System.Guid> repositoryId, ChainArgument<SharedCode.EntitySystem.ReplicationLevel> replicationLevel)
    {
        __chain__.UnsubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy GetEntityStatus(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId)
    {
        __chain__.GetEntityStatus(typeId, entityId);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy GetAllServiceEntityStatus()
    {
        __chain__.GetAllServiceEntityStatus();
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy ForceCloseConnection(ChainArgument<System.Guid> userId)
    {
        __chain__.ForceCloseConnection(userId);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityClientBroadcastChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static RepositoryCommunicationEntityClientBroadcastChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityClientBroadcast entity)
    {
        return new RepositoryCommunicationEntityClientBroadcastChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject()));
    }

    public static RepositoryCommunicationEntityClientBroadcastChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityClientBroadcast entity, IChainedEntity fromChain)
    {
        return new RepositoryCommunicationEntityClientBroadcastChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class RepositoryCommunicationEntityClientFullApiChainProxy : IChainedEntity
{
    private RepositoryCommunicationEntityChainProxy __chain__;
    public RepositoryCommunicationEntityClientFullApiChainProxy(RepositoryCommunicationEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public RepositoryCommunicationEntityClientFullApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityClientFullApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityClientFullApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static RepositoryCommunicationEntityClientFullApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityClientFullApi entity)
    {
        return new RepositoryCommunicationEntityClientFullApiChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject()));
    }

    public static RepositoryCommunicationEntityClientFullApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityClientFullApi entity, IChainedEntity fromChain)
    {
        return new RepositoryCommunicationEntityClientFullApiChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class RepositoryCommunicationEntityClientFullChainProxy : IChainedEntity
{
    private RepositoryCommunicationEntityChainProxy __chain__;
    public RepositoryCommunicationEntityClientFullChainProxy(RepositoryCommunicationEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public RepositoryCommunicationEntityClientFullChainProxy EntityUpdate(ChainArgument<SharedCode.EntitySystem.UpdateBatch> updateBatch)
    {
        __chain__.EntityUpdate(updateBatch);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy EntityUpdate(ChainArgument<SharedCode.EntitySystem.UpdateBatchContainer> updateBatchContainer)
    {
        __chain__.EntityUpdate(updateBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy EntityUpload(ChainArgument<SharedCode.EntitySystem.UploadBatchContainer> uploadBatchContainer)
    {
        __chain__.EntityUpload(uploadBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy EntityDestroyed(ChainArgument<SharedCode.EntitySystem.DestroyBatchContainer> destroyBatchContainer)
    {
        __chain__.EntityDestroyed(destroyBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy EntityDowngrade(ChainArgument<SharedCode.EntitySystem.DowngradeBatchContainer> downgradeBatchContainer)
    {
        __chain__.EntityDowngrade(downgradeBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy Dump(ChainArgument<string> fileName)
    {
        __chain__.Dump(fileName);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy DumpEntity(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<string> fileName)
    {
        __chain__.DumpEntity(typeId, entityId, fileName);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy DumpEntitySerializedData(ChainArgument<string> fileName, ChainArgument<int> entityTypeId, ChainArgument<System.Guid> entityId, ChainArgument<long> replicationMask)
    {
        __chain__.DumpEntitySerializedData(fileName, entityTypeId, entityId, replicationMask);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy SubscribeReplication(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<System.Guid> repositoryId, ChainArgument<SharedCode.EntitySystem.ReplicationLevel> replicationLevel)
    {
        __chain__.SubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy UnsubscribeReplication(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<System.Guid> repositoryId, ChainArgument<SharedCode.EntitySystem.ReplicationLevel> replicationLevel)
    {
        __chain__.UnsubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy GetEntityStatus(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId)
    {
        __chain__.GetEntityStatus(typeId, entityId);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy GetAllServiceEntityStatus()
    {
        __chain__.GetAllServiceEntityStatus();
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy ForceCloseConnection(ChainArgument<System.Guid> userId)
    {
        __chain__.ForceCloseConnection(userId);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityClientFullChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static RepositoryCommunicationEntityClientFullChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityClientFull entity)
    {
        return new RepositoryCommunicationEntityClientFullChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject()));
    }

    public static RepositoryCommunicationEntityClientFullChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityClientFull entity, IChainedEntity fromChain)
    {
        return new RepositoryCommunicationEntityClientFullChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class RepositoryCommunicationEntityServerApiChainProxy : IChainedEntity
{
    private RepositoryCommunicationEntityChainProxy __chain__;
    public RepositoryCommunicationEntityServerApiChainProxy(RepositoryCommunicationEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public RepositoryCommunicationEntityServerApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityServerApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityServerApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static RepositoryCommunicationEntityServerApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityServerApi entity)
    {
        return new RepositoryCommunicationEntityServerApiChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject()));
    }

    public static RepositoryCommunicationEntityServerApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityServerApi entity, IChainedEntity fromChain)
    {
        return new RepositoryCommunicationEntityServerApiChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class RepositoryCommunicationEntityServerChainProxy : IChainedEntity
{
    private RepositoryCommunicationEntityChainProxy __chain__;
    public RepositoryCommunicationEntityServerChainProxy(RepositoryCommunicationEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public RepositoryCommunicationEntityServerChainProxy FireOnDisconnect()
    {
        __chain__.FireOnDisconnect();
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy NotifyOfExistingConnections(ChainArgument<System.Collections.Generic.List<SharedCode.Entities.Cloud.EndpointAddress>> endpoints)
    {
        __chain__.NotifyOfExistingConnections(endpoints);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy EntityUpdate(ChainArgument<SharedCode.EntitySystem.UpdateBatch> updateBatch)
    {
        __chain__.EntityUpdate(updateBatch);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy EntityUpdate(ChainArgument<SharedCode.EntitySystem.UpdateBatchContainer> updateBatchContainer)
    {
        __chain__.EntityUpdate(updateBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy EntityUpload(ChainArgument<SharedCode.EntitySystem.UploadBatchContainer> uploadBatchContainer)
    {
        __chain__.EntityUpload(uploadBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy EntityDestroyed(ChainArgument<SharedCode.EntitySystem.DestroyBatchContainer> destroyBatchContainer)
    {
        __chain__.EntityDestroyed(destroyBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy EntityDowngrade(ChainArgument<SharedCode.EntitySystem.DowngradeBatchContainer> downgradeBatchContainer)
    {
        __chain__.EntityDowngrade(downgradeBatchContainer);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy Dump(ChainArgument<string> fileName)
    {
        __chain__.Dump(fileName);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy DumpEntity(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<string> fileName)
    {
        __chain__.DumpEntity(typeId, entityId, fileName);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy DumpEntitySerializedData(ChainArgument<string> fileName, ChainArgument<int> entityTypeId, ChainArgument<System.Guid> entityId, ChainArgument<long> replicationMask)
    {
        __chain__.DumpEntitySerializedData(fileName, entityTypeId, entityId, replicationMask);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy SubscribeReplication(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<System.Guid> repositoryId, ChainArgument<SharedCode.EntitySystem.ReplicationLevel> replicationLevel)
    {
        __chain__.SubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy UnsubscribeReplication(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId, ChainArgument<System.Guid> repositoryId, ChainArgument<SharedCode.EntitySystem.ReplicationLevel> replicationLevel)
    {
        __chain__.UnsubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy GetEntityStatus(ChainArgument<int> typeId, ChainArgument<System.Guid> entityId)
    {
        __chain__.GetEntityStatus(typeId, entityId);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy GetAllServiceEntityStatus()
    {
        __chain__.GetAllServiceEntityStatus();
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy ForceCloseConnection(ChainArgument<System.Guid> userId)
    {
        __chain__.ForceCloseConnection(userId);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy StartMigrateEntity(ChainArgument<int> entityTypeId, ChainArgument<System.Guid> entityId)
    {
        __chain__.StartMigrateEntity(entityTypeId, entityId);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy FinishMigrateEntity(ChainArgument<int> entityTypeId, ChainArgument<System.Guid> entityId, ChainArgument<System.Collections.Generic.Dictionary<(int, System.Guid), System.Collections.Generic.Dictionary<System.Guid, int>>> replicateRefsVersions)
    {
        __chain__.FinishMigrateEntity(entityTypeId, entityId, replicateRefsVersions);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy DispatchMigratedEntityDeferredRpc(ChainArgument<int> entityTypeId, ChainArgument<System.Guid> entityId)
    {
        __chain__.DispatchMigratedEntityDeferredRpc(entityTypeId, entityId);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public RepositoryCommunicationEntityServerChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static RepositoryCommunicationEntityServerChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityServer entity)
    {
        return new RepositoryCommunicationEntityServerChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject()));
    }

    public static RepositoryCommunicationEntityServerChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IRepositoryCommunicationEntityServer entity, IChainedEntity fromChain)
    {
        return new RepositoryCommunicationEntityServerChainProxy(new RepositoryCommunicationEntityChainProxy((SharedCode.Entities.Cloud.IRepositoryCommunicationEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}