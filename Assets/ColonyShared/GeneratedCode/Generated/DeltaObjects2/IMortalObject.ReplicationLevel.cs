// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class MortalAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways
    {
        public MortalAlways(Assets.ColonyShared.SharedCode.Entities.IMortal deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IMortal __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IMortal)__deltaObjectBase__;
            }
        }

        public bool IsAlive => __deltaObject__.IsAlive;
        public bool PermaDead => __deltaObject__.PermaDead;
        public bool IsKnockedDown => __deltaObject__.IsKnockedDown;
        public System.Threading.Tasks.Task<bool> GetIsAlive()
        {
            return __deltaObject__.GetIsAlive();
        }

        public event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> DieEvent
        {
            add
            {
                __deltaObject__.DieEvent += value;
            }

            remove
            {
                __deltaObject__.DieEvent -= value;
            }
        }

        public event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> ResurrectEvent
        {
            add
            {
                __deltaObject__.ResurrectEvent += value;
            }

            remove
            {
                __deltaObject__.ResurrectEvent -= value;
            }
        }

        public event System.Func<System.Threading.Tasks.Task> KnockedDown
        {
            add
            {
                __deltaObject__.KnockedDown += value;
            }

            remove
            {
                __deltaObject__.KnockedDown -= value;
            }
        }

        public event System.Func<System.Threading.Tasks.Task> ReviveFromKnockdown
        {
            add
            {
                __deltaObject__.ReviveFromKnockdown += value;
            }

            remove
            {
                __deltaObject__.ReviveFromKnockdown -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = IsAlive;
                    break;
                case 11:
                    currProperty = PermaDead;
                    break;
                case 12:
                    currProperty = IsKnockedDown;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1449077587;
    }

    public class MortalClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast
    {
        public MortalClientBroadcast(Assets.ColonyShared.SharedCode.Entities.IMortal deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IMortal __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IMortal)__deltaObjectBase__;
            }
        }

        public bool IsAlive => __deltaObject__.IsAlive;
        public bool PermaDead => __deltaObject__.PermaDead;
        public bool IsKnockedDown => __deltaObject__.IsKnockedDown;
        public long LastResurrectTime => __deltaObject__.LastResurrectTime;
        public System.Threading.Tasks.Task<bool> GetIsAlive()
        {
            return __deltaObject__.GetIsAlive();
        }

        public event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> DieEvent
        {
            add
            {
                __deltaObject__.DieEvent += value;
            }

            remove
            {
                __deltaObject__.DieEvent -= value;
            }
        }

        public event System.Func<System.Guid, int, System.Threading.Tasks.Task> BeforeResurrectEvent
        {
            add
            {
                __deltaObject__.BeforeResurrectEvent += value;
            }

            remove
            {
                __deltaObject__.BeforeResurrectEvent -= value;
            }
        }

        public event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> ResurrectEvent
        {
            add
            {
                __deltaObject__.ResurrectEvent += value;
            }

            remove
            {
                __deltaObject__.ResurrectEvent -= value;
            }
        }

        public event System.Func<System.Threading.Tasks.Task> KnockedDown
        {
            add
            {
                __deltaObject__.KnockedDown += value;
            }

            remove
            {
                __deltaObject__.KnockedDown -= value;
            }
        }

        public event System.Func<System.Threading.Tasks.Task> ReviveFromKnockdown
        {
            add
            {
                __deltaObject__.ReviveFromKnockdown += value;
            }

            remove
            {
                __deltaObject__.ReviveFromKnockdown -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = IsAlive;
                    break;
                case 11:
                    currProperty = PermaDead;
                    break;
                case 12:
                    currProperty = IsKnockedDown;
                    break;
                case 14:
                    currProperty = LastResurrectTime;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -908200249;
    }

    public class MortalClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFullApi
    {
        public MortalClientFullApi(Assets.ColonyShared.SharedCode.Entities.IMortal deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IMortal __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IMortal)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1492509719;
    }

    public class MortalClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull
    {
        public MortalClientFull(Assets.ColonyShared.SharedCode.Entities.IMortal deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IMortal __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IMortal)__deltaObjectBase__;
            }
        }

        public bool IsAlive => __deltaObject__.IsAlive;
        public bool PermaDead => __deltaObject__.PermaDead;
        public bool IsKnockedDown => __deltaObject__.IsKnockedDown;
        public long LastResurrectTime => __deltaObject__.LastResurrectTime;
        public System.Threading.Tasks.Task<bool> GetIsAlive()
        {
            return __deltaObject__.GetIsAlive();
        }

        public System.Threading.Tasks.Task<bool> FinishOff()
        {
            return __deltaObject__.FinishOff();
        }

        public event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> DieEvent
        {
            add
            {
                __deltaObject__.DieEvent += value;
            }

            remove
            {
                __deltaObject__.DieEvent -= value;
            }
        }

        public event System.Func<System.Guid, int, System.Threading.Tasks.Task> BeforeResurrectEvent
        {
            add
            {
                __deltaObject__.BeforeResurrectEvent += value;
            }

            remove
            {
                __deltaObject__.BeforeResurrectEvent -= value;
            }
        }

        public event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> ResurrectEvent
        {
            add
            {
                __deltaObject__.ResurrectEvent += value;
            }

            remove
            {
                __deltaObject__.ResurrectEvent -= value;
            }
        }

        public event System.Func<System.Threading.Tasks.Task> KnockedDown
        {
            add
            {
                __deltaObject__.KnockedDown += value;
            }

            remove
            {
                __deltaObject__.KnockedDown -= value;
            }
        }

        public event System.Func<System.Threading.Tasks.Task> ReviveFromKnockdown
        {
            add
            {
                __deltaObject__.ReviveFromKnockdown += value;
            }

            remove
            {
                __deltaObject__.ReviveFromKnockdown -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = IsAlive;
                    break;
                case 11:
                    currProperty = PermaDead;
                    break;
                case 12:
                    currProperty = IsKnockedDown;
                    break;
                case 14:
                    currProperty = LastResurrectTime;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1970953034;
    }

    public class MortalServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServerApi
    {
        public MortalServerApi(Assets.ColonyShared.SharedCode.Entities.IMortal deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IMortal __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IMortal)__deltaObjectBase__;
            }
        }

        public override int TypeId => 741524165;
    }

    public class MortalServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer
    {
        public MortalServer(Assets.ColonyShared.SharedCode.Entities.IMortal deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IMortal __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IMortal)__deltaObjectBase__;
            }
        }

        public bool IsAlive => __deltaObject__.IsAlive;
        public bool PermaDead => __deltaObject__.PermaDead;
        public bool IsKnockedDown => __deltaObject__.IsKnockedDown;
        public long LastResurrectTime => __deltaObject__.LastResurrectTime;
        public System.Threading.Tasks.Task<bool> GetIsAlive()
        {
            return __deltaObject__.GetIsAlive();
        }

        public System.Threading.Tasks.Task<bool> ZeroHealthReached()
        {
            return __deltaObject__.ZeroHealthReached();
        }

        public System.Threading.Tasks.Task<bool> Die()
        {
            return __deltaObject__.Die();
        }

        public System.Threading.Tasks.Task<bool> Resurrect(SharedCode.Entities.GameObjectEntities.PositionRotation at)
        {
            return __deltaObject__.Resurrect(at);
        }

        public System.Threading.Tasks.Task<bool> KnockDown()
        {
            return __deltaObject__.KnockDown();
        }

        public System.Threading.Tasks.Task<bool> Revive()
        {
            return __deltaObject__.Revive();
        }

        public System.Threading.Tasks.Task<bool> FinishOff()
        {
            return __deltaObject__.FinishOff();
        }

        public System.Threading.Tasks.Task<bool> DeactivatePreDeathState()
        {
            return __deltaObject__.DeactivatePreDeathState();
        }

        public System.Threading.Tasks.Task AddStrike(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> objectRef)
        {
            return __deltaObject__.AddStrike(objectRef);
        }

        public event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> DieEvent
        {
            add
            {
                __deltaObject__.DieEvent += value;
            }

            remove
            {
                __deltaObject__.DieEvent -= value;
            }
        }

        public event System.Func<System.Guid, int, System.Threading.Tasks.Task> BeforeResurrectEvent
        {
            add
            {
                __deltaObject__.BeforeResurrectEvent += value;
            }

            remove
            {
                __deltaObject__.BeforeResurrectEvent -= value;
            }
        }

        public event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> ResurrectEvent
        {
            add
            {
                __deltaObject__.ResurrectEvent += value;
            }

            remove
            {
                __deltaObject__.ResurrectEvent -= value;
            }
        }

        public event System.Func<System.Threading.Tasks.Task> KnockedDown
        {
            add
            {
                __deltaObject__.KnockedDown += value;
            }

            remove
            {
                __deltaObject__.KnockedDown -= value;
            }
        }

        public event System.Func<System.Threading.Tasks.Task> ReviveFromKnockdown
        {
            add
            {
                __deltaObject__.ReviveFromKnockdown += value;
            }

            remove
            {
                __deltaObject__.ReviveFromKnockdown -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = IsAlive;
                    break;
                case 11:
                    currProperty = PermaDead;
                    break;
                case 12:
                    currProperty = IsKnockedDown;
                    break;
                case 14:
                    currProperty = LastResurrectTime;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1822310390;
    }
}