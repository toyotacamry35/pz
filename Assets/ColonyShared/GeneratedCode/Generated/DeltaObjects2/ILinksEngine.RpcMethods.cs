// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class LinksEngine
    {
        public Task SetLinksFromScene(System.Collections.Generic.Dictionary<Assets.ResourceSystem.Aspects.Links.LinkTypeDef, System.Collections.Generic.List<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> links)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetLinksFromSceneRunMaster(links).AsTask();
                else
                    return SetLinksFromSceneRun(links).AsTask();
            else
                return SendFuncs.SetLinksFromScene(links, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> SetLinksFromSceneCreateDeferredDelegate(System.Collections.Generic.Dictionary<Assets.ResourceSystem.Aspects.Links.LinkTypeDef, System.Collections.Generic.List<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> links) => () =>
        {
            return SetLinksFromScene(links);
        }

        ;
        public async ValueTask SetLinksFromSceneRunMaster(System.Collections.Generic.Dictionary<Assets.ResourceSystem.Aspects.Links.LinkTypeDef, System.Collections.Generic.List<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> links)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetLinksFromSceneCreateDeferredDelegate(links), nameof(SetLinksFromScene));
            }

            await SetLinksFromSceneRun(links);
        }

        public async ValueTask SetLinksFromSceneRun(System.Collections.Generic.Dictionary<Assets.ResourceSystem.Aspects.Links.LinkTypeDef, System.Collections.Generic.List<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> links)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(SetLinksFromScene)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = SetLinksFromSceneImpl(links);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public ValueTask<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetLinked(Assets.ResourceSystem.Aspects.Links.LinkTypeDef link)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.NeedDeferredRpcOnMigrating())
                return GetLinkedRunMaster(link);
            else
                return GetLinkedRun(link);
        }

        private Func<Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> GetLinkedCreateDeferredDelegate(Assets.ResourceSystem.Aspects.Links.LinkTypeDef link) => () =>
        {
            return GetLinked(link).AsTask();
        }

        ;
        public async ValueTask<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetLinkedRunMaster(Assets.ResourceSystem.Aspects.Links.LinkTypeDef link)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetLinkedCreateDeferredDelegate(link), nameof(GetLinked));
            }

            return await GetLinkedRun(link);
        }

        public async ValueTask<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetLinkedRun(Assets.ResourceSystem.Aspects.Links.LinkTypeDef link)
        {
            this.CheckValidateEntityInAsyncContext();
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 1);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetLinkedImpl(link);
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public ValueTask<System.Collections.Generic.IEnumerable<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> GetLinkeds(Assets.ResourceSystem.Aspects.Links.LinkTypeDef link)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.NeedDeferredRpcOnMigrating())
                return GetLinkedsRunMaster(link);
            else
                return GetLinkedsRun(link);
        }

        private Func<Task<System.Collections.Generic.IEnumerable<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>>> GetLinkedsCreateDeferredDelegate(Assets.ResourceSystem.Aspects.Links.LinkTypeDef link) => () =>
        {
            return GetLinkeds(link).AsTask();
        }

        ;
        public async ValueTask<System.Collections.Generic.IEnumerable<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> GetLinkedsRunMaster(Assets.ResourceSystem.Aspects.Links.LinkTypeDef link)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetLinkedsCreateDeferredDelegate(link), nameof(GetLinkeds));
            }

            return await GetLinkedsRun(link);
        }

        public async ValueTask<System.Collections.Generic.IEnumerable<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> GetLinkedsRun(Assets.ResourceSystem.Aspects.Links.LinkTypeDef link)
        {
            this.CheckValidateEntityInAsyncContext();
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 2);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetLinkedsImpl(link);
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task AddLinkRef(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool watched, bool saved)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddLinkRefRunMaster(key, outerRef, watched, saved).AsTask();
                else
                    return AddLinkRefRun(key, outerRef, watched, saved).AsTask();
            else
                return SendFuncs.AddLinkRef(key, outerRef, watched, saved, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> AddLinkRefCreateDeferredDelegate(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool watched, bool saved) => () =>
        {
            return AddLinkRef(key, outerRef, watched, saved);
        }

        ;
        public async ValueTask AddLinkRefRunMaster(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool watched, bool saved)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddLinkRefCreateDeferredDelegate(key, outerRef, watched, saved), nameof(AddLinkRef));
            }

            await AddLinkRefRun(key, outerRef, watched, saved);
        }

        public async ValueTask AddLinkRefRun(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool watched, bool saved)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 3);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(AddLinkRef)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = AddLinkRefImpl(key, outerRef, watched, saved);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task RemoveLinkKey(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveLinkKeyRunMaster(key).AsTask();
                else
                    return RemoveLinkKeyRun(key).AsTask();
            else
                return SendFuncs.RemoveLinkKey(key, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> RemoveLinkKeyCreateDeferredDelegate(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key) => () =>
        {
            return RemoveLinkKey(key);
        }

        ;
        public async ValueTask RemoveLinkKeyRunMaster(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveLinkKeyCreateDeferredDelegate(key), nameof(RemoveLinkKey));
            }

            await RemoveLinkKeyRun(key);
        }

        public async ValueTask RemoveLinkKeyRun(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 4);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RemoveLinkKey)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RemoveLinkKeyImpl(key);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task RemoveLinkRef(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveLinkRefRunMaster(outerRef).AsTask();
                else
                    return RemoveLinkRefRun(outerRef).AsTask();
            else
                return SendFuncs.RemoveLinkRef(outerRef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> RemoveLinkRefCreateDeferredDelegate(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef) => () =>
        {
            return RemoveLinkRef(outerRef);
        }

        ;
        public async ValueTask RemoveLinkRefRunMaster(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveLinkRefCreateDeferredDelegate(outerRef), nameof(RemoveLinkRef));
            }

            await RemoveLinkRefRun(outerRef);
        }

        public async ValueTask RemoveLinkRefRun(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 5);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RemoveLinkRef)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RemoveLinkRefImpl(outerRef);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task RemoveLinkRefByKey(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveLinkRefByKeyRunMaster(key, outerRef).AsTask();
                else
                    return RemoveLinkRefByKeyRun(key, outerRef).AsTask();
            else
                return SendFuncs.RemoveLinkRefByKey(key, outerRef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> RemoveLinkRefByKeyCreateDeferredDelegate(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef) => () =>
        {
            return RemoveLinkRefByKey(key, outerRef);
        }

        ;
        public async ValueTask RemoveLinkRefByKeyRunMaster(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveLinkRefByKeyCreateDeferredDelegate(key, outerRef), nameof(RemoveLinkRefByKey));
            }

            await RemoveLinkRefByKeyRun(key, outerRef);
        }

        public async ValueTask RemoveLinkRefByKeyRun(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 6);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RemoveLinkRefByKey)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RemoveLinkRefByKeyImpl(key, outerRef);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }
    }
}