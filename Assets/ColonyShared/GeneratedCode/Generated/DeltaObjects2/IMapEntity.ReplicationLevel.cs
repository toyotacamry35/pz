// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class MapEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMapEntityAlways
    {
        public MapEntityAlways(SharedCode.MapSystem.IMapEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IMapEntity __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IMapEntity)__deltaObjectBase__;
            }
        }

        public System.Guid RealmId => __deltaObject__.RealmId;
        public SharedCode.Aspects.Sessions.RealmRulesDef RealmRules => __deltaObject__.RealmRules;
        public GeneratedCode.Custom.Config.MapDef Map => __deltaObject__.Map;
        public SharedCode.MapSystem.MapEntityState State => __deltaObject__.State;
        public bool Dead => __deltaObject__.Dead;
        public IDeltaDictionary<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, bool> SavedScenes
        {
            get
            {
                return __deltaObject__.SavedScenes;
            }
        }

        public System.Threading.Tasks.Task<bool> TryAquireSpawnRightsForPointsSet(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> spawner, SharedCode.Entities.GameObjectEntities.SceneChunkDef mapSceneDef)
        {
            return __deltaObject__.TryAquireSpawnRightsForPointsSet(spawner, mapSceneDef);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetWorldSpaceForPoint(SharedCode.Utils.Vector3 point)
        {
            return __deltaObject__.GetWorldSpaceForPoint(point);
        }

        public System.Threading.Tasks.Task<bool> NotifyAllCharactersViaChat(string text)
        {
            return __deltaObject__.NotifyAllCharactersViaChat(text);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = RealmId;
                    break;
                case 11:
                    currProperty = RealmRules;
                    break;
                case 12:
                    currProperty = Map;
                    break;
                case 13:
                    currProperty = State;
                    break;
                case 14:
                    currProperty = Dead;
                    break;
                case 16:
                    currProperty = SavedScenes;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 510578710;
    }

    public class MapEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMapEntityClientBroadcast
    {
        public MapEntityClientBroadcast(SharedCode.MapSystem.IMapEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IMapEntity __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IMapEntity)__deltaObjectBase__;
            }
        }

        public System.Guid RealmId => __deltaObject__.RealmId;
        public SharedCode.Aspects.Sessions.RealmRulesDef RealmRules => __deltaObject__.RealmRules;
        public GeneratedCode.Custom.Config.MapDef Map => __deltaObject__.Map;
        public SharedCode.MapSystem.MapEntityState State => __deltaObject__.State;
        public bool Dead => __deltaObject__.Dead;
        public IDeltaDictionary<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, bool> SavedScenes
        {
            get
            {
                return __deltaObject__.SavedScenes;
            }
        }

        public System.Threading.Tasks.Task SpawnNewBots(System.Collections.Generic.List<System.Guid> botIds, string spawnPointTypePath)
        {
            return __deltaObject__.SpawnNewBots(botIds, spawnPointTypePath);
        }

        public System.Threading.Tasks.Task<bool> TryAquireSpawnRightsForPointsSet(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> spawner, SharedCode.Entities.GameObjectEntities.SceneChunkDef mapSceneDef)
        {
            return __deltaObject__.TryAquireSpawnRightsForPointsSet(spawner, mapSceneDef);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetWorldSpaceForPoint(SharedCode.Utils.Vector3 point)
        {
            return __deltaObject__.GetWorldSpaceForPoint(point);
        }

        public System.Threading.Tasks.Task<bool> NotifyAllCharactersViaChat(string text)
        {
            return __deltaObject__.NotifyAllCharactersViaChat(text);
        }

        public event System.Func<string, string, System.Threading.Tasks.Task> NewChatMessageEvent
        {
            add
            {
                __deltaObject__.NewChatMessageEvent += value;
            }

            remove
            {
                __deltaObject__.NewChatMessageEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = RealmId;
                    break;
                case 11:
                    currProperty = RealmRules;
                    break;
                case 12:
                    currProperty = Map;
                    break;
                case 13:
                    currProperty = State;
                    break;
                case 14:
                    currProperty = Dead;
                    break;
                case 16:
                    currProperty = SavedScenes;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 540290881;
    }

    public class MapEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMapEntityClientFullApi
    {
        public MapEntityClientFullApi(SharedCode.MapSystem.IMapEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IMapEntity __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IMapEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1022192840;
    }

    public class MapEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMapEntityClientFull
    {
        public MapEntityClientFull(SharedCode.MapSystem.IMapEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IMapEntity __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IMapEntity)__deltaObjectBase__;
            }
        }

        public System.Guid RealmId => __deltaObject__.RealmId;
        public SharedCode.Aspects.Sessions.RealmRulesDef RealmRules => __deltaObject__.RealmRules;
        public GeneratedCode.Custom.Config.MapDef Map => __deltaObject__.Map;
        public SharedCode.MapSystem.MapEntityState State => __deltaObject__.State;
        public bool Dead => __deltaObject__.Dead;
        public IDeltaDictionary<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, bool> SavedScenes
        {
            get
            {
                return __deltaObject__.SavedScenes;
            }
        }

        public System.Threading.Tasks.Task SpawnNewBots(System.Collections.Generic.List<System.Guid> botIds, string spawnPointTypePath)
        {
            return __deltaObject__.SpawnNewBots(botIds, spawnPointTypePath);
        }

        public System.Threading.Tasks.Task<bool> TryAquireSpawnRightsForPointsSet(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> spawner, SharedCode.Entities.GameObjectEntities.SceneChunkDef mapSceneDef)
        {
            return __deltaObject__.TryAquireSpawnRightsForPointsSet(spawner, mapSceneDef);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetWorldSpaceForPoint(SharedCode.Utils.Vector3 point)
        {
            return __deltaObject__.GetWorldSpaceForPoint(point);
        }

        public System.Threading.Tasks.Task<bool> NotifyAllCharactersViaChat(string text)
        {
            return __deltaObject__.NotifyAllCharactersViaChat(text);
        }

        public event System.Func<string, string, System.Threading.Tasks.Task> NewChatMessageEvent
        {
            add
            {
                __deltaObject__.NewChatMessageEvent += value;
            }

            remove
            {
                __deltaObject__.NewChatMessageEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = RealmId;
                    break;
                case 11:
                    currProperty = RealmRules;
                    break;
                case 12:
                    currProperty = Map;
                    break;
                case 13:
                    currProperty = State;
                    break;
                case 14:
                    currProperty = Dead;
                    break;
                case 16:
                    currProperty = SavedScenes;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 513848700;
    }

    public class MapEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMapEntityServerApi
    {
        public MapEntityServerApi(SharedCode.MapSystem.IMapEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IMapEntity __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IMapEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1508296976;
    }

    public class MapEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMapEntityServer
    {
        public MapEntityServer(SharedCode.MapSystem.IMapEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IMapEntity __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IMapEntity)__deltaObjectBase__;
            }
        }

        public System.Guid RealmId => __deltaObject__.RealmId;
        public SharedCode.Aspects.Sessions.RealmRulesDef RealmRules => __deltaObject__.RealmRules;
        public GeneratedCode.Custom.Config.MapDef Map => __deltaObject__.Map;
        public SharedCode.MapSystem.MapEntityState State => __deltaObject__.State;
        public bool Dead => __deltaObject__.Dead;
        IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceDescriptionServer> __WorldSpaces__Wrapper__;
        public IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceDescriptionServer> WorldSpaces
        {
            get
            {
                if (__WorldSpaces__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__WorldSpaces__Wrapper__).GetBaseDeltaObject() != __deltaObject__.WorldSpaces)
                    __WorldSpaces__Wrapper__ = __deltaObject__.WorldSpaces == null ? null : new DeltaListWrapper<SharedCode.MapSystem.IWorldSpaceDescription, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceDescriptionServer>(__deltaObject__.WorldSpaces);
                return __WorldSpaces__Wrapper__;
            }
        }

        public IDeltaDictionary<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, bool> SavedScenes
        {
            get
            {
                return __deltaObject__.SavedScenes;
            }
        }

        public System.Threading.Tasks.Task<bool> SetMapEntityState(SharedCode.MapSystem.MapEntityState state)
        {
            return __deltaObject__.SetMapEntityState(state);
        }

        public System.Threading.Tasks.Task<bool> ChangeChunkDescription(System.Guid descriptionId, SharedCode.MapSystem.MapChunkState newState, System.Guid unityRepositoryId)
        {
            return __deltaObject__.ChangeChunkDescription(descriptionId, newState, unityRepositoryId);
        }

        public System.Threading.Tasks.Task<bool> OnLastUserLeft()
        {
            return __deltaObject__.OnLastUserLeft();
        }

        public System.Threading.Tasks.Task SpawnNewBots(System.Collections.Generic.List<System.Guid> botIds, string spawnPointTypePath)
        {
            return __deltaObject__.SpawnNewBots(botIds, spawnPointTypePath);
        }

        public System.Threading.Tasks.Task<bool> TryAquireSpawnRightsForPointsSet(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> spawner, SharedCode.Entities.GameObjectEntities.SceneChunkDef mapSceneDef)
        {
            return __deltaObject__.TryAquireSpawnRightsForPointsSet(spawner, mapSceneDef);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetWorldSpaceForPoint(SharedCode.Utils.Vector3 point)
        {
            return __deltaObject__.GetWorldSpaceForPoint(point);
        }

        public System.Threading.Tasks.Task<bool> NotifyAllCharactersViaChat(string text)
        {
            return __deltaObject__.NotifyAllCharactersViaChat(text);
        }

        public event System.Func<string, string, System.Threading.Tasks.Task> NewChatMessageEvent
        {
            add
            {
                __deltaObject__.NewChatMessageEvent += value;
            }

            remove
            {
                __deltaObject__.NewChatMessageEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = RealmId;
                    break;
                case 11:
                    currProperty = RealmRules;
                    break;
                case 12:
                    currProperty = Map;
                    break;
                case 13:
                    currProperty = State;
                    break;
                case 14:
                    currProperty = Dead;
                    break;
                case 15:
                    currProperty = WorldSpaces;
                    break;
                case 16:
                    currProperty = SavedScenes;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1276791727;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class WorldSpaceDescriptionAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceDescriptionAlways
    {
        public WorldSpaceDescriptionAlways(SharedCode.MapSystem.IWorldSpaceDescription deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IWorldSpaceDescription __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IWorldSpaceDescription)__deltaObjectBase__;
            }
        }

        public GeneratedCode.Custom.Config.MapDef ChunkDef => __deltaObject__.ChunkDef;
        public System.Guid UnityRepositoryId => __deltaObject__.UnityRepositoryId;
        public System.Guid WorldSpaceRepositoryId => __deltaObject__.WorldSpaceRepositoryId;
        public System.Guid WorldSpaceGuid => __deltaObject__.WorldSpaceGuid;
        public SharedCode.MapSystem.MapChunkState State => __deltaObject__.State;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = ChunkDef;
                    break;
                case 11:
                    currProperty = UnityRepositoryId;
                    break;
                case 12:
                    currProperty = WorldSpaceRepositoryId;
                    break;
                case 13:
                    currProperty = WorldSpaceGuid;
                    break;
                case 14:
                    currProperty = State;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1474890303;
    }

    public class WorldSpaceDescriptionClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceDescriptionClientBroadcast
    {
        public WorldSpaceDescriptionClientBroadcast(SharedCode.MapSystem.IWorldSpaceDescription deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IWorldSpaceDescription __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IWorldSpaceDescription)__deltaObjectBase__;
            }
        }

        public GeneratedCode.Custom.Config.MapDef ChunkDef => __deltaObject__.ChunkDef;
        public System.Guid UnityRepositoryId => __deltaObject__.UnityRepositoryId;
        public System.Guid WorldSpaceRepositoryId => __deltaObject__.WorldSpaceRepositoryId;
        public System.Guid WorldSpaceGuid => __deltaObject__.WorldSpaceGuid;
        public SharedCode.MapSystem.MapChunkState State => __deltaObject__.State;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = ChunkDef;
                    break;
                case 11:
                    currProperty = UnityRepositoryId;
                    break;
                case 12:
                    currProperty = WorldSpaceRepositoryId;
                    break;
                case 13:
                    currProperty = WorldSpaceGuid;
                    break;
                case 14:
                    currProperty = State;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -536252620;
    }

    public class WorldSpaceDescriptionClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceDescriptionClientFullApi
    {
        public WorldSpaceDescriptionClientFullApi(SharedCode.MapSystem.IWorldSpaceDescription deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IWorldSpaceDescription __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IWorldSpaceDescription)__deltaObjectBase__;
            }
        }

        public override int TypeId => -489393927;
    }

    public class WorldSpaceDescriptionClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceDescriptionClientFull
    {
        public WorldSpaceDescriptionClientFull(SharedCode.MapSystem.IWorldSpaceDescription deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IWorldSpaceDescription __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IWorldSpaceDescription)__deltaObjectBase__;
            }
        }

        public GeneratedCode.Custom.Config.MapDef ChunkDef => __deltaObject__.ChunkDef;
        public System.Guid UnityRepositoryId => __deltaObject__.UnityRepositoryId;
        public System.Guid WorldSpaceRepositoryId => __deltaObject__.WorldSpaceRepositoryId;
        public System.Guid WorldSpaceGuid => __deltaObject__.WorldSpaceGuid;
        public SharedCode.MapSystem.MapChunkState State => __deltaObject__.State;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = ChunkDef;
                    break;
                case 11:
                    currProperty = UnityRepositoryId;
                    break;
                case 12:
                    currProperty = WorldSpaceRepositoryId;
                    break;
                case 13:
                    currProperty = WorldSpaceGuid;
                    break;
                case 14:
                    currProperty = State;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1391811752;
    }

    public class WorldSpaceDescriptionServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceDescriptionServerApi
    {
        public WorldSpaceDescriptionServerApi(SharedCode.MapSystem.IWorldSpaceDescription deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IWorldSpaceDescription __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IWorldSpaceDescription)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1758836214;
    }

    public class WorldSpaceDescriptionServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceDescriptionServer
    {
        public WorldSpaceDescriptionServer(SharedCode.MapSystem.IWorldSpaceDescription deltaObject): base(deltaObject)
        {
        }

        SharedCode.MapSystem.IWorldSpaceDescription __deltaObject__
        {
            get
            {
                return (SharedCode.MapSystem.IWorldSpaceDescription)__deltaObjectBase__;
            }
        }

        public GeneratedCode.Custom.Config.MapDef ChunkDef => __deltaObject__.ChunkDef;
        public System.Guid UnityRepositoryId => __deltaObject__.UnityRepositoryId;
        public System.Guid WorldSpaceRepositoryId => __deltaObject__.WorldSpaceRepositoryId;
        public System.Guid WorldSpaceGuid => __deltaObject__.WorldSpaceGuid;
        public SharedCode.MapSystem.MapChunkState State => __deltaObject__.State;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = ChunkDef;
                    break;
                case 11:
                    currProperty = UnityRepositoryId;
                    break;
                case 12:
                    currProperty = WorldSpaceRepositoryId;
                    break;
                case 13:
                    currProperty = WorldSpaceGuid;
                    break;
                case 14:
                    currProperty = State;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 679563692;
    }
}