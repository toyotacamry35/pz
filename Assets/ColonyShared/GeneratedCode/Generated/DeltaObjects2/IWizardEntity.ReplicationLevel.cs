// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class WizardEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityAlways
    {
        public WizardEntityAlways(SharedCode.Wizardry.IWizardEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.IWizardEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.IWizardEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Wizardry.UnityEnvironmentMark SlaveWizardMark => __deltaObject__.SlaveWizardMark;
        public System.Threading.Tasks.Task<bool> LocalUpdateTimeLineData()
        {
            return __deltaObject__.LocalUpdateTimeLineData();
        }

        public System.Threading.Tasks.Task<bool> CheckSpellCastPredicates(long currentTime, SharedCode.Wizardry.SpellCast spell, System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef> failedPredicates, Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef predicateIgnoreGroupDef)
        {
            return __deltaObject__.CheckSpellCastPredicates(currentTime, spell, failedPredicates, predicateIgnoreGroupDef);
        }

        public System.Threading.Tasks.Task<bool> HasSpellsPreventingThisFromStart(SharedCode.Wizardry.SpellCast spell)
        {
            return __deltaObject__.HasSpellsPreventingThisFromStart(spell);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell)
        {
            return __deltaObject__.CastSpell(spell);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId)
        {
            return __deltaObject__.CastSpell(spell, clientSpellId);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId, SharedCode.Wizardry.SpellId prevSpell)
        {
            return __deltaObject__.CastSpell(spell, clientSpellId, prevSpell);
        }

        public System.Threading.Tasks.Task<long> Update()
        {
            return __deltaObject__.Update();
        }

        public System.Threading.Tasks.Task<bool> Update(SharedCode.Wizardry.SpellId spellId)
        {
            return __deltaObject__.Update(spellId);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.WizardDebugData> GetDebugData()
        {
            return __deltaObject__.GetDebugData();
        }

        public System.Threading.Tasks.Task<bool> WizardHasDied()
        {
            return __deltaObject__.WizardHasDied();
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> WizardHasRisen()
        {
            return __deltaObject__.WizardHasRisen();
        }

        public override int TypeId => -188516001;
    }

    public class WizardEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityClientBroadcast
    {
        public WizardEntityClientBroadcast(SharedCode.Wizardry.IWizardEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.IWizardEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.IWizardEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> Owner => __deltaObject__.Owner;
        IDeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientBroadcast> __Spells__Wrapper__;
        public IDeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientBroadcast> Spells
        {
            get
            {
                if (__Spells__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Spells__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Spells)
                    __Spells__Wrapper__ = __deltaObject__.Spells == null ? null : new DeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, SharedCode.Wizardry.ISpell, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientBroadcast>(__deltaObject__.Spells);
                return __Spells__Wrapper__;
            }
        }

        public SharedCode.Wizardry.UnityEnvironmentMark SlaveWizardMark => __deltaObject__.SlaveWizardMark;
        public System.Threading.Tasks.ValueTask<bool> HasActiveSpell(SharedCode.Wizardry.SpellDef spell)
        {
            return __deltaObject__.HasActiveSpell(spell);
        }

        public System.Threading.Tasks.ValueTask<bool> HasActiveSpellGroup(SharedCode.Wizardry.SpellGroupDef group)
        {
            return __deltaObject__.HasActiveSpellGroup(group);
        }

        public System.Threading.Tasks.Task<bool> LocalUpdateTimeLineData()
        {
            return __deltaObject__.LocalUpdateTimeLineData();
        }

        public System.Threading.Tasks.Task<bool> CheckSpellCastPredicates(long currentTime, SharedCode.Wizardry.SpellCast spell, System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef> failedPredicates, Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef predicateIgnoreGroupDef)
        {
            return __deltaObject__.CheckSpellCastPredicates(currentTime, spell, failedPredicates, predicateIgnoreGroupDef);
        }

        public System.Threading.Tasks.Task<bool> HasSpellsPreventingThisFromStart(SharedCode.Wizardry.SpellCast spell)
        {
            return __deltaObject__.HasSpellsPreventingThisFromStart(spell);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell)
        {
            return __deltaObject__.CastSpell(spell);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId)
        {
            return __deltaObject__.CastSpell(spell, clientSpellId);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId, SharedCode.Wizardry.SpellId prevSpell)
        {
            return __deltaObject__.CastSpell(spell, clientSpellId, prevSpell);
        }

        public System.Threading.Tasks.Task<long> Update()
        {
            return __deltaObject__.Update();
        }

        public System.Threading.Tasks.Task<bool> Update(SharedCode.Wizardry.SpellId spellId)
        {
            return __deltaObject__.Update(spellId);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.WizardDebugData> GetDebugData()
        {
            return __deltaObject__.GetDebugData();
        }

        public System.Threading.Tasks.Task<bool> WizardHasDied()
        {
            return __deltaObject__.WizardHasDied();
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> WizardHasRisen()
        {
            return __deltaObject__.WizardHasRisen();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 17:
                    currProperty = Owner;
                    break;
                case 18:
                    currProperty = Spells;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1632018208;
    }

    public class WizardEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityClientFullApi
    {
        public WizardEntityClientFullApi(SharedCode.Wizardry.IWizardEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.IWizardEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.IWizardEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 662604218;
    }

    public class WizardEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityClientFull
    {
        public WizardEntityClientFull(SharedCode.Wizardry.IWizardEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.IWizardEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.IWizardEntity)__deltaObjectBase__;
            }
        }

        public bool IsInterestingEnoughToLog => __deltaObject__.IsInterestingEnoughToLog;
        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> Owner => __deltaObject__.Owner;
        IDeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientFull> __Spells__Wrapper__;
        public IDeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientFull> Spells
        {
            get
            {
                if (__Spells__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Spells__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Spells)
                    __Spells__Wrapper__ = __deltaObject__.Spells == null ? null : new DeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, SharedCode.Wizardry.ISpell, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientFull>(__deltaObject__.Spells);
                return __Spells__Wrapper__;
            }
        }

        public IDeltaDictionary<SharedCode.Wizardry.CooldownGroupDef, long> CooldownsUntil
        {
            get
            {
                return __deltaObject__.CooldownsUntil;
            }
        }

        public SharedCode.Wizardry.UnityEnvironmentMark SlaveWizardMark => __deltaObject__.SlaveWizardMark;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsClientFull PingDiagnostics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsClientFull)__deltaObject__.PingDiagnostics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public System.Threading.Tasks.Task<bool> StopAllSpellsOfGroup(SharedCode.Wizardry.SpellGroupDef group, SharedCode.Wizardry.SpellId except, SharedCode.Wizardry.SpellFinishReason reason)
        {
            return __deltaObject__.StopAllSpellsOfGroup(group, except, reason);
        }

        public System.Threading.Tasks.Task<bool> StopSpellByDef(SharedCode.Wizardry.SpellDef spellDef, SharedCode.Wizardry.SpellId except, SharedCode.Wizardry.SpellFinishReason reason)
        {
            return __deltaObject__.StopSpellByDef(spellDef, except, reason);
        }

        public System.Threading.Tasks.Task<bool> StopSpellByCauser(GeneratedCode.DeltaObjects.SpellPartCastId causer, SharedCode.Wizardry.SpellFinishReason reason)
        {
            return __deltaObject__.StopSpellByCauser(causer, reason);
        }

        public System.Threading.Tasks.ValueTask<bool> HasActiveSpell(SharedCode.Wizardry.SpellDef spell)
        {
            return __deltaObject__.HasActiveSpell(spell);
        }

        public System.Threading.Tasks.ValueTask<bool> HasActiveSpellGroup(SharedCode.Wizardry.SpellGroupDef group)
        {
            return __deltaObject__.HasActiveSpellGroup(group);
        }

        public System.Threading.Tasks.Task<string> DumpEvents()
        {
            return __deltaObject__.DumpEvents();
        }

        public System.Threading.Tasks.Task<bool> LocalUpdateTimeLineData()
        {
            return __deltaObject__.LocalUpdateTimeLineData();
        }

        public System.Threading.Tasks.Task<bool> CheckSpellCastPredicates(long currentTime, SharedCode.Wizardry.SpellCast spell, System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef> failedPredicates, Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef predicateIgnoreGroupDef)
        {
            return __deltaObject__.CheckSpellCastPredicates(currentTime, spell, failedPredicates, predicateIgnoreGroupDef);
        }

        public System.Threading.Tasks.Task<bool> HasSpellsPreventingThisFromStart(SharedCode.Wizardry.SpellCast spell)
        {
            return __deltaObject__.HasSpellsPreventingThisFromStart(spell);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell)
        {
            return __deltaObject__.CastSpell(spell);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId)
        {
            return __deltaObject__.CastSpell(spell, clientSpellId);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId, SharedCode.Wizardry.SpellId prevSpell)
        {
            return __deltaObject__.CastSpell(spell, clientSpellId, prevSpell);
        }

        public System.Threading.Tasks.Task<bool> StopCastSpell(SharedCode.Wizardry.SpellId spell, SharedCode.Wizardry.SpellFinishReason reason)
        {
            return __deltaObject__.StopCastSpell(spell, reason);
        }

        public System.Threading.Tasks.Task<bool> StopCastSpell(SharedCode.Wizardry.SpellId spell)
        {
            return __deltaObject__.StopCastSpell(spell);
        }

        public System.Threading.Tasks.Task<long> Update()
        {
            return __deltaObject__.Update();
        }

        public System.Threading.Tasks.Task<bool> Update(SharedCode.Wizardry.SpellId spellId)
        {
            return __deltaObject__.Update(spellId);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.WizardDebugData> GetDebugData()
        {
            return __deltaObject__.GetDebugData();
        }

        public System.Threading.Tasks.Task<bool> WizardHasDied()
        {
            return __deltaObject__.WizardHasDied();
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> WizardHasRisen()
        {
            return __deltaObject__.WizardHasRisen();
        }

        public System.Threading.Tasks.Task CancelSpell(SharedCode.Wizardry.SpellId spellId)
        {
            return __deltaObject__.CancelSpell(spellId);
        }

        public System.Threading.Tasks.Task SetIsInterestingEnoughToLog(bool enable)
        {
            return __deltaObject__.SetIsInterestingEnoughToLog(enable);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 12:
                    currProperty = IsInterestingEnoughToLog;
                    break;
                case 17:
                    currProperty = Owner;
                    break;
                case 18:
                    currProperty = Spells;
                    break;
                case 19:
                    currProperty = CooldownsUntil;
                    break;
                case 20:
                    currProperty = PingDiagnostics;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 706582936;
    }

    public class WizardEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityServerApi
    {
        public WizardEntityServerApi(SharedCode.Wizardry.IWizardEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.IWizardEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.IWizardEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -895490275;
    }

    public class WizardEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityServer
    {
        public WizardEntityServer(SharedCode.Wizardry.IWizardEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.IWizardEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.IWizardEntity)__deltaObjectBase__;
            }
        }

        public bool IsInterestingEnoughToLog => __deltaObject__.IsInterestingEnoughToLog;
        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> Owner => __deltaObject__.Owner;
        IDeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellServer> __Spells__Wrapper__;
        public IDeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellServer> Spells
        {
            get
            {
                if (__Spells__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Spells__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Spells)
                    __Spells__Wrapper__ = __deltaObject__.Spells == null ? null : new DeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, SharedCode.Wizardry.ISpell, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellServer>(__deltaObject__.Spells);
                return __Spells__Wrapper__;
            }
        }

        public IDeltaDictionary<SharedCode.Wizardry.CooldownGroupDef, long> CooldownsUntil
        {
            get
            {
                return __deltaObject__.CooldownsUntil;
            }
        }

        public SharedCode.Wizardry.UnityEnvironmentMark SlaveWizardMark => __deltaObject__.SlaveWizardMark;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsServer PingDiagnostics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsServer)__deltaObject__.PingDiagnostics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<bool> StopAllSpellsOfGroup(SharedCode.Wizardry.SpellGroupDef group, SharedCode.Wizardry.SpellId except, SharedCode.Wizardry.SpellFinishReason reason)
        {
            return __deltaObject__.StopAllSpellsOfGroup(group, except, reason);
        }

        public System.Threading.Tasks.Task<bool> StopSpellByDef(SharedCode.Wizardry.SpellDef spellDef, SharedCode.Wizardry.SpellId except, SharedCode.Wizardry.SpellFinishReason reason)
        {
            return __deltaObject__.StopSpellByDef(spellDef, except, reason);
        }

        public System.Threading.Tasks.Task<bool> StopSpellByCauser(GeneratedCode.DeltaObjects.SpellPartCastId causer, SharedCode.Wizardry.SpellFinishReason reason)
        {
            return __deltaObject__.StopSpellByCauser(causer, reason);
        }

        public System.Threading.Tasks.ValueTask<bool> HasActiveSpell(SharedCode.Wizardry.SpellDef spell)
        {
            return __deltaObject__.HasActiveSpell(spell);
        }

        public System.Threading.Tasks.ValueTask<bool> HasActiveSpellGroup(SharedCode.Wizardry.SpellGroupDef group)
        {
            return __deltaObject__.HasActiveSpellGroup(group);
        }

        public System.Threading.Tasks.Task<string> DumpEvents()
        {
            return __deltaObject__.DumpEvents();
        }

        public System.Threading.Tasks.Task<bool> LocalUpdateTimeLineData()
        {
            return __deltaObject__.LocalUpdateTimeLineData();
        }

        public System.Threading.Tasks.Task<bool> CheckSpellCastPredicates(long currentTime, SharedCode.Wizardry.SpellCast spell, System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef> failedPredicates, Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef predicateIgnoreGroupDef)
        {
            return __deltaObject__.CheckSpellCastPredicates(currentTime, spell, failedPredicates, predicateIgnoreGroupDef);
        }

        public System.Threading.Tasks.Task<bool> HasSpellsPreventingThisFromStart(SharedCode.Wizardry.SpellCast spell)
        {
            return __deltaObject__.HasSpellsPreventingThisFromStart(spell);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell)
        {
            return __deltaObject__.CastSpell(spell);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId)
        {
            return __deltaObject__.CastSpell(spell, clientSpellId);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId, SharedCode.Wizardry.SpellId prevSpell)
        {
            return __deltaObject__.CastSpell(spell, clientSpellId, prevSpell);
        }

        public System.Threading.Tasks.Task<bool> StopCastSpell(SharedCode.Wizardry.SpellId spell, SharedCode.Wizardry.SpellFinishReason reason)
        {
            return __deltaObject__.StopCastSpell(spell, reason);
        }

        public System.Threading.Tasks.Task<bool> StopCastSpell(SharedCode.Wizardry.SpellId spell)
        {
            return __deltaObject__.StopCastSpell(spell);
        }

        public System.Threading.Tasks.Task<long> Update()
        {
            return __deltaObject__.Update();
        }

        public System.Threading.Tasks.Task<bool> Update(SharedCode.Wizardry.SpellId spellId)
        {
            return __deltaObject__.Update(spellId);
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.WizardDebugData> GetDebugData()
        {
            return __deltaObject__.GetDebugData();
        }

        public System.Threading.Tasks.Task<bool> WizardHasDied()
        {
            return __deltaObject__.WizardHasDied();
        }

        public System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> WizardHasRisen()
        {
            return __deltaObject__.WizardHasRisen();
        }

        public System.Threading.Tasks.Task CancelSpell(SharedCode.Wizardry.SpellId spellId)
        {
            return __deltaObject__.CancelSpell(spellId);
        }

        public System.Threading.Tasks.Task SetIsInterestingEnoughToLog(bool enable)
        {
            return __deltaObject__.SetIsInterestingEnoughToLog(enable);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 12:
                    currProperty = IsInterestingEnoughToLog;
                    break;
                case 17:
                    currProperty = Owner;
                    break;
                case 18:
                    currProperty = Spells;
                    break;
                case 19:
                    currProperty = CooldownsUntil;
                    break;
                case 20:
                    currProperty = PingDiagnostics;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1479997955;
    }
}