// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class PositionedFenceElementAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPositionedFenceElementAlways
    {
        public PositionedFenceElementAlways(SharedCode.DeltaObjects.Building.IPositionedFenceElement deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.Building.IPositionedFenceElement __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.Building.IPositionedFenceElement)__deltaObjectBase__;
            }
        }

        public SharedCode.DeltaObjects.Building.BuildState State => __deltaObject__.State;
        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> Owner => __deltaObject__.Owner;
        public SharedCode.Aspects.Building.BuildRecipeDef RecipeDef => __deltaObject__.RecipeDef;
        public SharedCode.Utils.Vector3 Position => __deltaObject__.Position;
        public SharedCode.Utils.Quaternion Rotation => __deltaObject__.Rotation;
        public int Depth => __deltaObject__.Depth;
        public long BuildTimestamp => __deltaObject__.BuildTimestamp;
        public float BuildTime => __deltaObject__.BuildTime;
        public float Health => __deltaObject__.Health;
        public int Interaction => __deltaObject__.Interaction;
        public int Visual => __deltaObject__.Visual;
        public System.Guid Id => __deltaObject__.Id;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = State;
                    break;
                case 11:
                    currProperty = Owner;
                    break;
                case 12:
                    currProperty = RecipeDef;
                    break;
                case 13:
                    currProperty = Position;
                    break;
                case 14:
                    currProperty = Rotation;
                    break;
                case 15:
                    currProperty = Depth;
                    break;
                case 17:
                    currProperty = BuildTimestamp;
                    break;
                case 18:
                    currProperty = BuildTime;
                    break;
                case 19:
                    currProperty = Health;
                    break;
                case 20:
                    currProperty = Interaction;
                    break;
                case 21:
                    currProperty = Visual;
                    break;
                case 22:
                    currProperty = Id;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1324006070;
    }

    public class PositionedFenceElementClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPositionedFenceElementClientBroadcast
    {
        public PositionedFenceElementClientBroadcast(SharedCode.DeltaObjects.Building.IPositionedFenceElement deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.Building.IPositionedFenceElement __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.Building.IPositionedFenceElement)__deltaObjectBase__;
            }
        }

        public SharedCode.DeltaObjects.Building.BuildState State => __deltaObject__.State;
        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> Owner => __deltaObject__.Owner;
        public SharedCode.Aspects.Building.BuildRecipeDef RecipeDef => __deltaObject__.RecipeDef;
        public SharedCode.Utils.Vector3 Position => __deltaObject__.Position;
        public SharedCode.Utils.Quaternion Rotation => __deltaObject__.Rotation;
        public int Depth => __deltaObject__.Depth;
        public long BuildTimestamp => __deltaObject__.BuildTimestamp;
        public float BuildTime => __deltaObject__.BuildTime;
        public float Health => __deltaObject__.Health;
        public int Interaction => __deltaObject__.Interaction;
        public int Visual => __deltaObject__.Visual;
        public System.Guid Id => __deltaObject__.Id;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = State;
                    break;
                case 11:
                    currProperty = Owner;
                    break;
                case 12:
                    currProperty = RecipeDef;
                    break;
                case 13:
                    currProperty = Position;
                    break;
                case 14:
                    currProperty = Rotation;
                    break;
                case 15:
                    currProperty = Depth;
                    break;
                case 17:
                    currProperty = BuildTimestamp;
                    break;
                case 18:
                    currProperty = BuildTime;
                    break;
                case 19:
                    currProperty = Health;
                    break;
                case 20:
                    currProperty = Interaction;
                    break;
                case 21:
                    currProperty = Visual;
                    break;
                case 22:
                    currProperty = Id;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1346584551;
    }

    public class PositionedFenceElementClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPositionedFenceElementClientFullApi
    {
        public PositionedFenceElementClientFullApi(SharedCode.DeltaObjects.Building.IPositionedFenceElement deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.Building.IPositionedFenceElement __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.Building.IPositionedFenceElement)__deltaObjectBase__;
            }
        }

        public override int TypeId => -567124548;
    }

    public class PositionedFenceElementClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPositionedFenceElementClientFull
    {
        public PositionedFenceElementClientFull(SharedCode.DeltaObjects.Building.IPositionedFenceElement deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.Building.IPositionedFenceElement __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.Building.IPositionedFenceElement)__deltaObjectBase__;
            }
        }

        public SharedCode.DeltaObjects.Building.BuildState State => __deltaObject__.State;
        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> Owner => __deltaObject__.Owner;
        public SharedCode.Aspects.Building.BuildRecipeDef RecipeDef => __deltaObject__.RecipeDef;
        public SharedCode.Utils.Vector3 Position => __deltaObject__.Position;
        public SharedCode.Utils.Quaternion Rotation => __deltaObject__.Rotation;
        public int Depth => __deltaObject__.Depth;
        public long BuildTimestamp => __deltaObject__.BuildTimestamp;
        public float BuildTime => __deltaObject__.BuildTime;
        public float Health => __deltaObject__.Health;
        public int Interaction => __deltaObject__.Interaction;
        public int Visual => __deltaObject__.Visual;
        public System.Guid Id => __deltaObject__.Id;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = State;
                    break;
                case 11:
                    currProperty = Owner;
                    break;
                case 12:
                    currProperty = RecipeDef;
                    break;
                case 13:
                    currProperty = Position;
                    break;
                case 14:
                    currProperty = Rotation;
                    break;
                case 15:
                    currProperty = Depth;
                    break;
                case 17:
                    currProperty = BuildTimestamp;
                    break;
                case 18:
                    currProperty = BuildTime;
                    break;
                case 19:
                    currProperty = Health;
                    break;
                case 20:
                    currProperty = Interaction;
                    break;
                case 21:
                    currProperty = Visual;
                    break;
                case 22:
                    currProperty = Id;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -2063493848;
    }

    public class PositionedFenceElementServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPositionedFenceElementServerApi
    {
        public PositionedFenceElementServerApi(SharedCode.DeltaObjects.Building.IPositionedFenceElement deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.Building.IPositionedFenceElement __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.Building.IPositionedFenceElement)__deltaObjectBase__;
            }
        }

        public override int TypeId => 394577372;
    }

    public class PositionedFenceElementServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPositionedFenceElementServer
    {
        public PositionedFenceElementServer(SharedCode.DeltaObjects.Building.IPositionedFenceElement deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.Building.IPositionedFenceElement __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.Building.IPositionedFenceElement)__deltaObjectBase__;
            }
        }

        public SharedCode.DeltaObjects.Building.BuildState State => __deltaObject__.State;
        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> Owner => __deltaObject__.Owner;
        public SharedCode.Aspects.Building.BuildRecipeDef RecipeDef => __deltaObject__.RecipeDef;
        public SharedCode.Utils.Vector3 Position => __deltaObject__.Position;
        public SharedCode.Utils.Quaternion Rotation => __deltaObject__.Rotation;
        public int Depth => __deltaObject__.Depth;
        public SharedCode.EntitySystem.ChainCalls.ChainCancellationToken BuildToken => __deltaObject__.BuildToken;
        public long BuildTimestamp => __deltaObject__.BuildTimestamp;
        public float BuildTime => __deltaObject__.BuildTime;
        public float Health => __deltaObject__.Health;
        public int Interaction => __deltaObject__.Interaction;
        public int Visual => __deltaObject__.Visual;
        public System.Guid Id => __deltaObject__.Id;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = State;
                    break;
                case 11:
                    currProperty = Owner;
                    break;
                case 12:
                    currProperty = RecipeDef;
                    break;
                case 13:
                    currProperty = Position;
                    break;
                case 14:
                    currProperty = Rotation;
                    break;
                case 15:
                    currProperty = Depth;
                    break;
                case 16:
                    currProperty = BuildToken;
                    break;
                case 17:
                    currProperty = BuildTimestamp;
                    break;
                case 18:
                    currProperty = BuildTime;
                    break;
                case 19:
                    currProperty = Health;
                    break;
                case 20:
                    currProperty = Interaction;
                    break;
                case 21:
                    currProperty = Visual;
                    break;
                case 22:
                    currProperty = Id;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 335756567;
    }
}