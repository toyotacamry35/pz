// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class CraftEngineAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineAlways
    {
        public CraftEngineAlways(SharedCode.Entities.Engine.ICraftEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftEngine)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 28:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -910546361;
    }

    public class CraftEngineClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineClientBroadcast
    {
        public CraftEngineClientBroadcast(SharedCode.Entities.Engine.ICraftEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftEngine)__deltaObjectBase__;
            }
        }

        public bool UseOwnOutputContainer => __deltaObject__.UseOwnOutputContainer;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientBroadcast IntermediateFuelContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientBroadcast)__deltaObject__.IntermediateFuelContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientBroadcast IntermediateCraftContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientBroadcast)__deltaObject__.IntermediateCraftContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientBroadcast OutputContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientBroadcast)__deltaObject__.OutputContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public SharedCode.EntitySystem.PropertyAddress FuelContainerAddress => __deltaObject__.FuelContainerAddress;
        public SharedCode.EntitySystem.PropertyAddress ResultContainerAddress => __deltaObject__.ResultContainerAddress;
        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientBroadcast> __CraftingQueue__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientBroadcast> CraftingQueue
        {
            get
            {
                if (__CraftingQueue__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__CraftingQueue__Wrapper__).GetBaseDeltaObject() != __deltaObject__.CraftingQueue)
                    __CraftingQueue__Wrapper__ = __deltaObject__.CraftingQueue == null ? null : new DeltaDictionaryWrapper<int, SharedCode.Entities.Engine.ICraftingQueueItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientBroadcast>(__deltaObject__.CraftingQueue);
                return __CraftingQueue__Wrapper__;
            }
        }

        public IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, int> CraftRecipesUsageStats
        {
            get
            {
                return __deltaObject__.CraftRecipesUsageStats;
            }
        }

        public IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, long> CraftRecipesLastUsageTimes
        {
            get
            {
                return __deltaObject__.CraftRecipesLastUsageTimes;
            }
        }

        public long FuelTimeAlreadyInUse => __deltaObject__.FuelTimeAlreadyInUse;
        public long StartFuelTimeUTC0InMilliseconds => __deltaObject__.StartFuelTimeUTC0InMilliseconds;
        public long StartCraftingTimeUTC0InMilliseconds => __deltaObject__.StartCraftingTimeUTC0InMilliseconds;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public System.Threading.Tasks.Task UpdateFuelTime()
        {
            return __deltaObject__.UpdateFuelTime();
        }

        public System.Threading.Tasks.Task UpdateCraftingTime()
        {
            return __deltaObject__.UpdateCraftingTime();
        }

        public System.Threading.Tasks.Task UpdateRepairTime(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex)
        {
            return __deltaObject__.UpdateRepairTime(itemAddress, itemIndex);
        }

        public System.Threading.Tasks.Task<bool> CanRun()
        {
            return __deltaObject__.CanRun();
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RunCraft()
        {
            return __deltaObject__.RunCraft();
        }

        public System.Threading.Tasks.Task StopCraft()
        {
            return __deltaObject__.StopCraft();
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Craft(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipe, int variantIdx, int count, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress inventoryAddress, SharedCode.EntitySystem.PropertyAddress inventoryAddress2)
        {
            return __deltaObject__.Craft(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Repair(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex, int recipeIndex, int variantIdx, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress2)
        {
            return __deltaObject__.Repair(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RemoveCraft(int recipeIndex)
        {
            return __deltaObject__.RemoveCraft(recipeIndex);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> SwapCraft(int index1, int index2)
        {
            return __deltaObject__.SwapCraft(index1, index2);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> StopCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            return __deltaObject__.StopCraftWithWorkbench(workbenchType);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> ContinueCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            return __deltaObject__.ContinueCraftWithWorkbench(workbenchType);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = UseOwnOutputContainer;
                    break;
                case 11:
                    currProperty = IntermediateFuelContainer;
                    break;
                case 12:
                    currProperty = IntermediateCraftContainer;
                    break;
                case 13:
                    currProperty = OutputContainer;
                    break;
                case 14:
                    currProperty = FuelContainerAddress;
                    break;
                case 15:
                    currProperty = ResultContainerAddress;
                    break;
                case 16:
                    currProperty = CraftingQueue;
                    break;
                case 18:
                    currProperty = CraftRecipesUsageStats;
                    break;
                case 19:
                    currProperty = CraftRecipesLastUsageTimes;
                    break;
                case 20:
                    currProperty = FuelTimeAlreadyInUse;
                    break;
                case 21:
                    currProperty = StartFuelTimeUTC0InMilliseconds;
                    break;
                case 22:
                    currProperty = StartCraftingTimeUTC0InMilliseconds;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 28:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 606297574;
    }

    public class CraftEngineClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineClientFullApi
    {
        public CraftEngineClientFullApi(SharedCode.Entities.Engine.ICraftEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftEngine)__deltaObjectBase__;
            }
        }

        public override int TypeId => 497085061;
    }

    public class CraftEngineClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineClientFull
    {
        public CraftEngineClientFull(SharedCode.Entities.Engine.ICraftEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftEngine)__deltaObjectBase__;
            }
        }

        public bool UseOwnOutputContainer => __deltaObject__.UseOwnOutputContainer;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull IntermediateFuelContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull)__deltaObject__.IntermediateFuelContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull IntermediateCraftContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull)__deltaObject__.IntermediateCraftContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull OutputContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull)__deltaObject__.OutputContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public SharedCode.EntitySystem.PropertyAddress FuelContainerAddress => __deltaObject__.FuelContainerAddress;
        public SharedCode.EntitySystem.PropertyAddress ResultContainerAddress => __deltaObject__.ResultContainerAddress;
        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientFull> __CraftingQueue__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientFull> CraftingQueue
        {
            get
            {
                if (__CraftingQueue__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__CraftingQueue__Wrapper__).GetBaseDeltaObject() != __deltaObject__.CraftingQueue)
                    __CraftingQueue__Wrapper__ = __deltaObject__.CraftingQueue == null ? null : new DeltaDictionaryWrapper<int, SharedCode.Entities.Engine.ICraftingQueueItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientFull>(__deltaObject__.CraftingQueue);
                return __CraftingQueue__Wrapper__;
            }
        }

        public IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, int> CraftRecipesUsageStats
        {
            get
            {
                return __deltaObject__.CraftRecipesUsageStats;
            }
        }

        public IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, long> CraftRecipesLastUsageTimes
        {
            get
            {
                return __deltaObject__.CraftRecipesLastUsageTimes;
            }
        }

        public long FuelTimeAlreadyInUse => __deltaObject__.FuelTimeAlreadyInUse;
        public long StartFuelTimeUTC0InMilliseconds => __deltaObject__.StartFuelTimeUTC0InMilliseconds;
        public long StartCraftingTimeUTC0InMilliseconds => __deltaObject__.StartCraftingTimeUTC0InMilliseconds;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public System.Threading.Tasks.Task UpdateFuelTime()
        {
            return __deltaObject__.UpdateFuelTime();
        }

        public System.Threading.Tasks.Task UpdateCraftingTime()
        {
            return __deltaObject__.UpdateCraftingTime();
        }

        public System.Threading.Tasks.Task UpdateRepairTime(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex)
        {
            return __deltaObject__.UpdateRepairTime(itemAddress, itemIndex);
        }

        public System.Threading.Tasks.Task<bool> CanRun()
        {
            return __deltaObject__.CanRun();
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RunCraft()
        {
            return __deltaObject__.RunCraft();
        }

        public System.Threading.Tasks.Task StopCraft()
        {
            return __deltaObject__.StopCraft();
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Craft(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipe, int variantIdx, int count, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress inventoryAddress, SharedCode.EntitySystem.PropertyAddress inventoryAddress2)
        {
            return __deltaObject__.Craft(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Repair(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex, int recipeIndex, int variantIdx, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress2)
        {
            return __deltaObject__.Repair(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RemoveCraft(int recipeIndex)
        {
            return __deltaObject__.RemoveCraft(recipeIndex);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> SwapCraft(int index1, int index2)
        {
            return __deltaObject__.SwapCraft(index1, index2);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> StopCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            return __deltaObject__.StopCraftWithWorkbench(workbenchType);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> ContinueCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            return __deltaObject__.ContinueCraftWithWorkbench(workbenchType);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = UseOwnOutputContainer;
                    break;
                case 11:
                    currProperty = IntermediateFuelContainer;
                    break;
                case 12:
                    currProperty = IntermediateCraftContainer;
                    break;
                case 13:
                    currProperty = OutputContainer;
                    break;
                case 14:
                    currProperty = FuelContainerAddress;
                    break;
                case 15:
                    currProperty = ResultContainerAddress;
                    break;
                case 16:
                    currProperty = CraftingQueue;
                    break;
                case 18:
                    currProperty = CraftRecipesUsageStats;
                    break;
                case 19:
                    currProperty = CraftRecipesLastUsageTimes;
                    break;
                case 20:
                    currProperty = FuelTimeAlreadyInUse;
                    break;
                case 21:
                    currProperty = StartFuelTimeUTC0InMilliseconds;
                    break;
                case 22:
                    currProperty = StartCraftingTimeUTC0InMilliseconds;
                    break;
                case 26:
                    currProperty = Inventory;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 28:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -858662834;
    }

    public class CraftEngineServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineServerApi
    {
        public CraftEngineServerApi(SharedCode.Entities.Engine.ICraftEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftEngine)__deltaObjectBase__;
            }
        }

        public override int TypeId => 2044076263;
    }

    public class CraftEngineServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineServer
    {
        public CraftEngineServer(SharedCode.Entities.Engine.ICraftEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftEngine)__deltaObjectBase__;
            }
        }

        public bool UseOwnOutputContainer => __deltaObject__.UseOwnOutputContainer;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer IntermediateFuelContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer)__deltaObject__.IntermediateFuelContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer IntermediateCraftContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer)__deltaObject__.IntermediateCraftContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer OutputContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer)__deltaObject__.OutputContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public SharedCode.EntitySystem.PropertyAddress FuelContainerAddress => __deltaObject__.FuelContainerAddress;
        public SharedCode.EntitySystem.PropertyAddress ResultContainerAddress => __deltaObject__.ResultContainerAddress;
        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemServer> __CraftingQueue__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemServer> CraftingQueue
        {
            get
            {
                if (__CraftingQueue__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__CraftingQueue__Wrapper__).GetBaseDeltaObject() != __deltaObject__.CraftingQueue)
                    __CraftingQueue__Wrapper__ = __deltaObject__.CraftingQueue == null ? null : new DeltaDictionaryWrapper<int, SharedCode.Entities.Engine.ICraftingQueueItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemServer>(__deltaObject__.CraftingQueue);
                return __CraftingQueue__Wrapper__;
            }
        }

        public int MaxQueueSize => __deltaObject__.MaxQueueSize;
        public IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, int> CraftRecipesUsageStats
        {
            get
            {
                return __deltaObject__.CraftRecipesUsageStats;
            }
        }

        public IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, long> CraftRecipesLastUsageTimes
        {
            get
            {
                return __deltaObject__.CraftRecipesLastUsageTimes;
            }
        }

        public long FuelTimeAlreadyInUse => __deltaObject__.FuelTimeAlreadyInUse;
        public long StartFuelTimeUTC0InMilliseconds => __deltaObject__.StartFuelTimeUTC0InMilliseconds;
        public long StartCraftingTimeUTC0InMilliseconds => __deltaObject__.StartCraftingTimeUTC0InMilliseconds;
        public SharedCode.Aspects.Item.Templates.WorkbenchTypeDef CurrentWorkbenchType => __deltaObject__.CurrentWorkbenchType;
        public IDeltaList<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken> FuelScheduleCancellation => __deltaObject__.FuelScheduleCancellation;
        public IDeltaList<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken> CraftScheduleCancellation => __deltaObject__.CraftScheduleCancellation;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task SetResultContainerAddress(SharedCode.EntitySystem.PropertyAddress resultContainerAddress)
        {
            return __deltaObject__.SetResultContainerAddress(resultContainerAddress);
        }

        public System.Threading.Tasks.Task UpdateFuelTime()
        {
            return __deltaObject__.UpdateFuelTime();
        }

        public System.Threading.Tasks.Task UpdateCraftingTime()
        {
            return __deltaObject__.UpdateCraftingTime();
        }

        public System.Threading.Tasks.Task UpdateRepairTime(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex)
        {
            return __deltaObject__.UpdateRepairTime(itemAddress, itemIndex);
        }

        public System.Threading.Tasks.Task<bool> CanRun()
        {
            return __deltaObject__.CanRun();
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RunCraft()
        {
            return __deltaObject__.RunCraft();
        }

        public System.Threading.Tasks.Task StopCraft()
        {
            return __deltaObject__.StopCraft();
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Craft(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipe, int variantIdx, int count, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress inventoryAddress, SharedCode.EntitySystem.PropertyAddress inventoryAddress2)
        {
            return __deltaObject__.Craft(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Repair(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex, int recipeIndex, int variantIdx, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress2)
        {
            return __deltaObject__.Repair(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RemoveCraft(int recipeIndex)
        {
            return __deltaObject__.RemoveCraft(recipeIndex);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> SwapCraft(int index1, int index2)
        {
            return __deltaObject__.SwapCraft(index1, index2);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> StopCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            return __deltaObject__.StopCraftWithWorkbench(workbenchType);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> ContinueCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType)
        {
            return __deltaObject__.ContinueCraftWithWorkbench(workbenchType);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = UseOwnOutputContainer;
                    break;
                case 11:
                    currProperty = IntermediateFuelContainer;
                    break;
                case 12:
                    currProperty = IntermediateCraftContainer;
                    break;
                case 13:
                    currProperty = OutputContainer;
                    break;
                case 14:
                    currProperty = FuelContainerAddress;
                    break;
                case 15:
                    currProperty = ResultContainerAddress;
                    break;
                case 16:
                    currProperty = CraftingQueue;
                    break;
                case 17:
                    currProperty = MaxQueueSize;
                    break;
                case 18:
                    currProperty = CraftRecipesUsageStats;
                    break;
                case 19:
                    currProperty = CraftRecipesLastUsageTimes;
                    break;
                case 20:
                    currProperty = FuelTimeAlreadyInUse;
                    break;
                case 21:
                    currProperty = StartFuelTimeUTC0InMilliseconds;
                    break;
                case 22:
                    currProperty = StartCraftingTimeUTC0InMilliseconds;
                    break;
                case 23:
                    currProperty = CurrentWorkbenchType;
                    break;
                case 24:
                    currProperty = FuelScheduleCancellation;
                    break;
                case 25:
                    currProperty = CraftScheduleCancellation;
                    break;
                case 26:
                    currProperty = Inventory;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 28:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -2052054788;
    }
}