// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class QuestEngineAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineAlways
    {
        public QuestEngineAlways(SharedCode.Entities.Engine.IQuestEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestEngine)__deltaObjectBase__;
            }
        }

        public override int TypeId => 394362510;
    }

    public class QuestEngineClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineClientBroadcast
    {
        public QuestEngineClientBroadcast(SharedCode.Entities.Engine.IQuestEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestEngine)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1320431510;
    }

    public class QuestEngineClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineClientFullApi
    {
        public QuestEngineClientFullApi(SharedCode.Entities.Engine.IQuestEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestEngine)__deltaObjectBase__;
            }
        }

        public override int TypeId => 317710251;
    }

    public class QuestEngineClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineClientFull
    {
        public QuestEngineClientFull(SharedCode.Entities.Engine.IQuestEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestEngine)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<Assets.Src.Aspects.Impl.Factions.Template.QuestDef, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectClientFull> __Quests__Wrapper__;
        public IDeltaDictionaryWrapper<Assets.Src.Aspects.Impl.Factions.Template.QuestDef, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectClientFull> Quests
        {
            get
            {
                if (__Quests__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Quests__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Quests)
                    __Quests__Wrapper__ = __deltaObject__.Quests == null ? null : new DeltaDictionaryWrapper<Assets.Src.Aspects.Impl.Factions.Template.QuestDef, SharedCode.Entities.Engine.IQuestObject, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectClientFull>(__deltaObject__.Quests);
                return __Quests__Wrapper__;
            }
        }

        public System.Threading.Tasks.Task AddQuest(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest)
        {
            return __deltaObject__.AddQuest(quest);
        }

        public System.Threading.Tasks.Task RemoveQuest(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest)
        {
            return __deltaObject__.RemoveQuest(quest);
        }

        public System.Threading.Tasks.Task<bool> RemoveAllQuests()
        {
            return __deltaObject__.RemoveAllQuests();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Quests;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1683925538;
    }

    public class QuestEngineServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineServerApi
    {
        public QuestEngineServerApi(SharedCode.Entities.Engine.IQuestEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestEngine)__deltaObjectBase__;
            }
        }

        public override int TypeId => -425771049;
    }

    public class QuestEngineServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineServer
    {
        public QuestEngineServer(SharedCode.Entities.Engine.IQuestEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestEngine)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<Assets.Src.Aspects.Impl.Factions.Template.QuestDef, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectServer> __Quests__Wrapper__;
        public IDeltaDictionaryWrapper<Assets.Src.Aspects.Impl.Factions.Template.QuestDef, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectServer> Quests
        {
            get
            {
                if (__Quests__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Quests__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Quests)
                    __Quests__Wrapper__ = __deltaObject__.Quests == null ? null : new DeltaDictionaryWrapper<Assets.Src.Aspects.Impl.Factions.Template.QuestDef, SharedCode.Entities.Engine.IQuestObject, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectServer>(__deltaObject__.Quests);
                return __Quests__Wrapper__;
            }
        }

        public System.Threading.Tasks.Task AddQuest(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest)
        {
            return __deltaObject__.AddQuest(quest);
        }

        public System.Threading.Tasks.Task AddQuestObject(Assets.Src.Aspects.Impl.Factions.Template.QuestDef questDef)
        {
            return __deltaObject__.AddQuestObject(questDef);
        }

        public System.Threading.Tasks.Task ChangePhase(Assets.Src.Aspects.Impl.Factions.Template.QuestDef questDef, int newPhaseIndex)
        {
            return __deltaObject__.ChangePhase(questDef, newPhaseIndex);
        }

        public System.Threading.Tasks.Task RemoveQuest(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest)
        {
            return __deltaObject__.RemoveQuest(quest);
        }

        public System.Threading.Tasks.Task<bool> RemoveAllQuests()
        {
            return __deltaObject__.RemoveAllQuests();
        }

        public System.Threading.Tasks.Task SetVisible(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest, bool visible)
        {
            return __deltaObject__.SetVisible(quest, visible);
        }

        public System.Threading.Tasks.Task OnDatabaseLoad()
        {
            return __deltaObject__.OnDatabaseLoad();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Quests;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1020807895;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class QuestObjectAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectAlways
    {
        public QuestObjectAlways(SharedCode.Entities.Engine.IQuestObject deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestObject __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestObject)__deltaObjectBase__;
            }
        }

        public override int TypeId => -799187691;
    }

    public class QuestObjectClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectClientBroadcast
    {
        public QuestObjectClientBroadcast(SharedCode.Entities.Engine.IQuestObject deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestObject __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestObject)__deltaObjectBase__;
            }
        }

        public override int TypeId => -956650855;
    }

    public class QuestObjectClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectClientFullApi
    {
        public QuestObjectClientFullApi(SharedCode.Entities.Engine.IQuestObject deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestObject __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestObject)__deltaObjectBase__;
            }
        }

        public override int TypeId => 482145165;
    }

    public class QuestObjectClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectClientFull
    {
        public QuestObjectClientFull(SharedCode.Entities.Engine.IQuestObject deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestObject __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestObject)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.Engine.QuestStatus Status => __deltaObject__.Status;
        public int PhaseIndex => __deltaObject__.PhaseIndex;
        public bool IsVisible => __deltaObject__.IsVisible;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestCounterClientFull PhaseSuccCounter => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestCounterClientFull)__deltaObject__.PhaseSuccCounter?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestCounterClientFull PhaseFailCounter => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestCounterClientFull)__deltaObject__.PhaseFailCounter?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public bool HavePhaseSuccCounter => __deltaObject__.HavePhaseSuccCounter;
        public bool HavePhaseFailCounter => __deltaObject__.HavePhaseFailCounter;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = Status;
                    break;
                case 12:
                    currProperty = PhaseIndex;
                    break;
                case 13:
                    currProperty = IsVisible;
                    break;
                case 14:
                    currProperty = PhaseSuccCounter;
                    break;
                case 15:
                    currProperty = PhaseFailCounter;
                    break;
                case 16:
                    currProperty = HavePhaseSuccCounter;
                    break;
                case 17:
                    currProperty = HavePhaseFailCounter;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 2077154648;
    }

    public class QuestObjectServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectServerApi
    {
        public QuestObjectServerApi(SharedCode.Entities.Engine.IQuestObject deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestObject __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestObject)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1154325059;
    }

    public class QuestObjectServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestObjectServer
    {
        public QuestObjectServer(SharedCode.Entities.Engine.IQuestObject deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IQuestObject __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IQuestObject)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.Engine.QuestStatus Status => __deltaObject__.Status;
        public int PhaseIndex => __deltaObject__.PhaseIndex;
        public bool IsVisible => __deltaObject__.IsVisible;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestCounterServer PhaseSuccCounter => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestCounterServer)__deltaObject__.PhaseSuccCounter?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestCounterServer PhaseFailCounter => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestCounterServer)__deltaObject__.PhaseFailCounter?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public bool HavePhaseSuccCounter => __deltaObject__.HavePhaseSuccCounter;
        public bool HavePhaseFailCounter => __deltaObject__.HavePhaseFailCounter;
        public System.Threading.Tasks.Task AddPhaseCounters(GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestCounterServer succCounter, GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestCounterServer failCounter)
        {
            return __deltaObject__.AddPhaseCounters(succCounter.To<SharedCode.Entities.Engine.IQuestCounter>(), failCounter.To<SharedCode.Entities.Engine.IQuestCounter>());
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = Status;
                    break;
                case 12:
                    currProperty = PhaseIndex;
                    break;
                case 13:
                    currProperty = IsVisible;
                    break;
                case 14:
                    currProperty = PhaseSuccCounter;
                    break;
                case 15:
                    currProperty = PhaseFailCounter;
                    break;
                case 16:
                    currProperty = HavePhaseSuccCounter;
                    break;
                case 17:
                    currProperty = HavePhaseFailCounter;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -609046320;
    }
}