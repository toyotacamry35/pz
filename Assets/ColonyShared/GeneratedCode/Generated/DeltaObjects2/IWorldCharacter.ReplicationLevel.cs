// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class WorldCharacterAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterAlways
    {
        public WorldCharacterAlways(SharedCode.Entities.IWorldCharacter deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldCharacter __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldCharacter)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public SharedCode.Aspects.Item.Templates.PerkActionsPricesDef PerkActionsPrices => __deltaObject__.PerkActionsPrices;
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public IDeltaDictionary<Assets.Src.Aspects.Impl.Stats.StatResource, float> SimpleStupidStats
        {
            get
            {
                return __deltaObject__.SimpleStupidStats;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public ResourceSystem.Aspects.Misc.GenderDef Gender => __deltaObject__.Gender;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterMovementSyncAlways MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterMovementSyncAlways)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityAlways LogableEntity => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityAlways)__deltaObject__.LogableEntity?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public System.Threading.Tasks.Task<string> TestCheatRpc(string argument)
        {
            return __deltaObject__.TestCheatRpc(argument);
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public System.Threading.Tasks.Task SetStat(Assets.Src.Aspects.Impl.Stats.StatResource res, float setValue)
        {
            return __deltaObject__.SetStat(res, setValue);
        }

        public System.Threading.Tasks.Task<bool> AllowedSpawnPointSet(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef value)
        {
            return __deltaObject__.AllowedSpawnPointSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 21:
                    currProperty = Def;
                    break;
                case 22:
                    currProperty = MapOwner;
                    break;
                case 23:
                    currProperty = StaticIdFromExport;
                    break;
                case 24:
                    currProperty = Name;
                    break;
                case 25:
                    currProperty = Prefab;
                    break;
                case 26:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 27:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 29:
                    currProperty = WorldSpaced;
                    break;
                case 39:
                    currProperty = PerkActionsPrices;
                    break;
                case 42:
                    currProperty = Wizard;
                    break;
                case 44:
                    currProperty = SimpleStupidStats;
                    break;
                case 45:
                    currProperty = ContainerApi;
                    break;
                case 48:
                    currProperty = Mortal;
                    break;
                case 53:
                    currProperty = Gender;
                    break;
                case 58:
                    currProperty = MovementSync;
                    break;
                case 59:
                    currProperty = LogableEntity;
                    break;
                case 69:
                    currProperty = Buffs;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1746670883;
    }

    public class WorldCharacterClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterClientBroadcast
    {
        public WorldCharacterClientBroadcast(SharedCode.Entities.IWorldCharacter deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldCharacter __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldCharacter)__deltaObjectBase__;
            }
        }

        public bool IsIdle => __deltaObject__.IsIdle;
        public bool IsAFK => __deltaObject__.IsAFK;
        public System.Guid AccountId => __deltaObject__.AccountId;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientBroadcast Doll => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientBroadcast)__deltaObject__.Doll?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public SharedCode.Aspects.Item.Templates.PerkActionsPricesDef PerkActionsPrices => __deltaObject__.PerkActionsPrices;
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public IDeltaDictionary<Assets.Src.Aspects.Impl.Stats.StatResource, float> SimpleStupidStats
        {
            get
            {
                return __deltaObject__.SimpleStupidStats;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsClientBroadcast MutationMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsClientBroadcast)__deltaObject__.MutationMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public Assets.Src.Aspects.Impl.Factions.Template.FactionDef Faction => __deltaObject__.Faction;
        public ResourceSystem.Aspects.Misc.GenderDef Gender => __deltaObject__.Gender;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterMovementSyncClientBroadcast MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterMovementSyncClientBroadcast)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityClientBroadcast LogableEntity => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityClientBroadcast)__deltaObject__.LogableEntity?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerClientBroadcast LocomotionOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerClientBroadcast)__deltaObject__.LocomotionOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientBroadcast AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientBroadcast)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientBroadcast LinksEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientBroadcast)__deltaObject__.LinksEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldPersonalMachineEngineClientBroadcast worldPersonalMachineEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldPersonalMachineEngineClientBroadcast)__deltaObject__.worldPersonalMachineEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountStatsClientBroadcast AccountStats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountStatsClientBroadcast)__deltaObject__.AccountStats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public IDeltaDictionary<ColonyShared.SharedCode.Modifiers.SpellModifiersCauser, ColonyShared.SharedCode.Modifiers.SpellModifiersCollectionEntry> SpellModifiers
        {
            get
            {
                return __deltaObject__.SpellModifiers;
            }
        }

        public System.Threading.Tasks.Task<string> TestCheatRpc(string argument)
        {
            return __deltaObject__.TestCheatRpc(argument);
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public System.Threading.Tasks.Task SetStat(Assets.Src.Aspects.Impl.Stats.StatResource res, float setValue)
        {
            return __deltaObject__.SetStat(res, setValue);
        }

        public System.Threading.Tasks.Task<bool> AllowedSpawnPointSet(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef value)
        {
            return __deltaObject__.AllowedSpawnPointSet(value);
        }

        public event System.Func<string, string, System.Threading.Tasks.Task> NewChatMessageEvent
        {
            add
            {
                __deltaObject__.NewChatMessageEvent += value;
            }

            remove
            {
                __deltaObject__.NewChatMessageEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 17:
                    currProperty = IsIdle;
                    break;
                case 18:
                    currProperty = IsAFK;
                    break;
                case 20:
                    currProperty = AccountId;
                    break;
                case 21:
                    currProperty = Def;
                    break;
                case 22:
                    currProperty = MapOwner;
                    break;
                case 23:
                    currProperty = StaticIdFromExport;
                    break;
                case 24:
                    currProperty = Name;
                    break;
                case 25:
                    currProperty = Prefab;
                    break;
                case 26:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 27:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 29:
                    currProperty = WorldSpaced;
                    break;
                case 33:
                    currProperty = Doll;
                    break;
                case 39:
                    currProperty = PerkActionsPrices;
                    break;
                case 42:
                    currProperty = Wizard;
                    break;
                case 43:
                    currProperty = SlaveWizardHolder;
                    break;
                case 44:
                    currProperty = SimpleStupidStats;
                    break;
                case 45:
                    currProperty = ContainerApi;
                    break;
                case 47:
                    currProperty = Health;
                    break;
                case 48:
                    currProperty = Mortal;
                    break;
                case 50:
                    currProperty = Stats;
                    break;
                case 51:
                    currProperty = MutationMechanics;
                    break;
                case 52:
                    currProperty = Faction;
                    break;
                case 53:
                    currProperty = Gender;
                    break;
                case 58:
                    currProperty = MovementSync;
                    break;
                case 59:
                    currProperty = LogableEntity;
                    break;
                case 60:
                    currProperty = LocomotionOwner;
                    break;
                case 66:
                    currProperty = AnimationDoerOwner;
                    break;
                case 69:
                    currProperty = Buffs;
                    break;
                case 70:
                    currProperty = LinksEngine;
                    break;
                case 73:
                    currProperty = worldPersonalMachineEngine;
                    break;
                case 74:
                    currProperty = AccountStats;
                    break;
                case 75:
                    currProperty = SpellModifiers;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -188817606;
    }

    public class WorldCharacterClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterClientFullApi
    {
        public WorldCharacterClientFullApi(SharedCode.Entities.IWorldCharacter deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldCharacter __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldCharacter)__deltaObjectBase__;
            }
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> MoveItem(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, int count, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.MoveItem(source, sourceSlotId, destination, destinationSlotId, count, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> MoveAllItems(SharedCode.EntitySystem.PropertyAddress source, SharedCode.EntitySystem.PropertyAddress destination)
        {
            return __deltaObject__.MoveAllItems(source, destination);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> RemoveItem(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, int count, System.Guid clientEntityId)
        {
            return __deltaObject__.RemoveItem(source, sourceSlotId, count, clientEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> SavePerk(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.SavePerk(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> DisassemblyPerk(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.DisassemblyPerk(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> Break(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.Break(source, sourceSlotId, clientSrcEntityId);
        }

        public override int TypeId => 1113445426;
    }

    public class WorldCharacterClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterClientFull
    {
        public WorldCharacterClientFull(SharedCode.Entities.IWorldCharacter deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldCharacter __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldCharacter)__deltaObjectBase__;
            }
        }

        public SharedCode.Refs.EntityRef<SharedCode.Entities.Engine.IBuildingEngine> BuildingEngine => __deltaObject__.BuildingEngine;
        public SharedCode.Refs.EntityRef<SharedCode.Entities.Engine.IKnowledgeEngine> KnowledgeEngine => __deltaObject__.KnowledgeEngine;
        public bool LastActivatedWasCommonBaken => __deltaObject__.LastActivatedWasCommonBaken;
        public IDeltaDictionary<System.Guid, long> ActivatedCommonBakens
        {
            get
            {
                return __deltaObject__.ActivatedCommonBakens;
            }
        }

        public IDeltaDictionary<System.Guid, Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointMarker> PointMarkers
        {
            get
            {
                return __deltaObject__.PointMarkers;
            }
        }

        public IDeltaList<Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointOfInterestDef> PointsOfInterest => __deltaObject__.PointsOfInterest;
        public bool IsIdle => __deltaObject__.IsIdle;
        public bool IsAFK => __deltaObject__.IsAFK;
        public System.Guid AccountId => __deltaObject__.AccountId;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICurrencyContainerClientFull Currency => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICurrencyContainerClientFull)__deltaObject__.Currency?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IDialogEngineClientFull Dialog => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IDialogEngineClientFull)__deltaObject__.Dialog?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientFull Doll => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientFull)__deltaObject__.Doll?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ITemporaryPerksClientFull TemporaryPerks => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ITemporaryPerksClientFull)__deltaObject__.TemporaryPerks?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IPermanentPerksClientFull PermanentPerks => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IPermanentPerksClientFull)__deltaObject__.PermanentPerks?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISavedPerksClientFull SavedPerks => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISavedPerksClientFull)__deltaObject__.SavedPerks?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public IDeltaDictionary<SharedCode.Aspects.Item.Templates.BaseItemResource, int> PerksDestroyCount
        {
            get
            {
                return __deltaObject__.PerksDestroyCount;
            }
        }

        public SharedCode.Aspects.Item.Templates.PerkActionsPricesDef PerkActionsPrices => __deltaObject__.PerkActionsPrices;
        public SharedCode.Refs.EntityRef<SharedCode.Entities.Engine.ICraftEngine> CraftEngine => __deltaObject__.CraftEngine;
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public IDeltaDictionary<Assets.Src.Aspects.Impl.Stats.StatResource, float> SimpleStupidStats
        {
            get
            {
                return __deltaObject__.SimpleStupidStats;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef AllowedSpawnPoint => __deltaObject__.AllowedSpawnPoint;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteClientFull Brute => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteClientFull)__deltaObject__.Brute?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsClientFull MutationMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsClientFull)__deltaObject__.MutationMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public Assets.Src.Aspects.Impl.Factions.Template.FactionDef Faction => __deltaObject__.Faction;
        public ResourceSystem.Aspects.Misc.GenderDef Gender => __deltaObject__.Gender;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ITraumasClientFull Traumas => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ITraumasClientFull)__deltaObject__.Traumas?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsClientFull PingDiagnostics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsClientFull)__deltaObject__.PingDiagnostics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemsStatsAccumulatorClientFull ItemsStatsAccumulator => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemsStatsAccumulatorClientFull)__deltaObject__.ItemsStatsAccumulator?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAuthorityOwnerClientFull AuthorityOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAuthorityOwnerClientFull)__deltaObject__.AuthorityOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterMovementSyncClientFull MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterMovementSyncClientFull)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityClientFull LogableEntity => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityClientFull)__deltaObject__.LogableEntity?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerClientFull LocomotionOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerClientFull)__deltaObject__.LocomotionOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IConsumerClientFull Consumer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IConsumerClientFull)__deltaObject__.Consumer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineClientFull Quest => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineClientFull)__deltaObject__.Quest?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IInputActionHandlersClientFull InputActionHandlers => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IInputActionHandlersClientFull)__deltaObject__.InputActionHandlers?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAttackEngineClientFull AttackEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAttackEngineClientFull)__deltaObject__.AttackEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientFull AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientFull)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IFounderPackClientFull FounderPack => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IFounderPackClientFull)__deltaObject__.FounderPack?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientFull LinksEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineClientFull)__deltaObject__.LinksEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IFogOfWarClientFull FogOfWar => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IFogOfWarClientFull)__deltaObject__.FogOfWar?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldObjectInformationSetsEngineClientFull WorldObjectInformationSetsEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldObjectInformationSetsEngineClientFull)__deltaObject__.WorldObjectInformationSetsEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldPersonalMachineEngineClientFull worldPersonalMachineEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldPersonalMachineEngineClientFull)__deltaObject__.worldPersonalMachineEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountStatsClientFull AccountStats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountStatsClientFull)__deltaObject__.AccountStats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public IDeltaDictionary<ColonyShared.SharedCode.Modifiers.SpellModifiersCauser, ColonyShared.SharedCode.Modifiers.SpellModifiersCollectionEntry> SpellModifiers
        {
            get
            {
                return __deltaObject__.SpellModifiers;
            }
        }

        public System.Threading.Tasks.Task SendChatMessage(string message)
        {
            return __deltaObject__.SendChatMessage(message);
        }

        public System.Threading.Tasks.Task<bool> Respawn(bool onBaken, bool anyCommonBaken, System.Guid commonBakenId)
        {
            return __deltaObject__.Respawn(onBaken, anyCommonBaken, commonBakenId);
        }

        public System.Threading.Tasks.ValueTask<bool> HasBaken()
        {
            return __deltaObject__.HasBaken();
        }

        public System.Threading.Tasks.ValueTask<bool> IsBakenActivated(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            return __deltaObject__.IsBakenActivated(bakenRef);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> MoveItem(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, int count, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.MoveItem(source, sourceSlotId, destination, destinationSlotId, count, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> MoveAllItems(SharedCode.EntitySystem.PropertyAddress source, SharedCode.EntitySystem.PropertyAddress destination)
        {
            return __deltaObject__.MoveAllItems(source, destination);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> RemoveItem(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, int count, System.Guid clientEntityId)
        {
            return __deltaObject__.RemoveItem(source, sourceSlotId, count, clientEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> SavePerk(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.SavePerk(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> DisassemblyPerk(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.DisassemblyPerk(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> Break(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.Break(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<bool> AddPerkSlot(SharedCode.EntitySystem.PropertyAddress source, int slotId, SharedCode.Aspects.Item.Templates.ItemTypeResource perkSlotType)
        {
            return __deltaObject__.AddPerkSlot(source, slotId, perkSlotType);
        }

        public System.Threading.Tasks.Task<bool> CanAddPerkSlot(SharedCode.Aspects.Item.Templates.ItemTypeResource perkSlotType)
        {
            return __deltaObject__.CanAddPerkSlot(perkSlotType);
        }

        public System.Threading.Tasks.Task AddUsedSlot(Assets.Src.ResourcesSystem.Base.ResourceIDFull dollSlotRes)
        {
            return __deltaObject__.AddUsedSlot(dollSlotRes);
        }

        public System.Threading.Tasks.Task RemoveUsedSlot(Assets.Src.ResourcesSystem.Base.ResourceIDFull dollSlotRes)
        {
            return __deltaObject__.RemoveUsedSlot(dollSlotRes);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Building.OperationResult> CreateBuildElement(SharedCode.DeltaObjects.Building.BuildType type, System.Guid placeId, SharedCode.Aspects.Building.BuildRecipeDef buildRecipeDef, SharedCode.Aspects.Building.CreateBuildElementData data)
        {
            return __deltaObject__.CreateBuildElement(type, placeId, buildRecipeDef, data);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Building.OperationResultEx> OperateBuildElement(SharedCode.DeltaObjects.Building.BuildType type, System.Guid placeId, System.Guid elementId, SharedCode.Entities.Building.OperationData data)
        {
            return __deltaObject__.OperateBuildElement(type, placeId, elementId, data);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Building.OperationResult> SetBuildCheat(SharedCode.Entities.Building.OperationData data)
        {
            return __deltaObject__.SetBuildCheat(data);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Building.OperationResultEx> GetBuildCheat(SharedCode.Entities.Building.OperationData data)
        {
            return __deltaObject__.GetBuildCheat(data);
        }

        public System.Threading.Tasks.Task AddPointMarker(System.Guid pointMarkerGuid, Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointMarker pointMarker)
        {
            return __deltaObject__.AddPointMarker(pointMarkerGuid, pointMarker);
        }

        public System.Threading.Tasks.Task RemovePointMarker(System.Guid pointMarkerGuid)
        {
            return __deltaObject__.RemovePointMarker(pointMarkerGuid);
        }

        public System.Threading.Tasks.Task AddPointOfInterest(Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointOfInterestDef poi)
        {
            return __deltaObject__.AddPointOfInterest(poi);
        }

        public System.Threading.Tasks.Task RemovePointOfInterest(Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointOfInterestDef poi)
        {
            return __deltaObject__.RemovePointOfInterest(poi);
        }

        public System.Threading.Tasks.Task UnstuckTeleport(float minTimeout)
        {
            return __deltaObject__.UnstuckTeleport(minTimeout);
        }

        public System.Threading.Tasks.Task<string> TestCheatRpc(string argument)
        {
            return __deltaObject__.TestCheatRpc(argument);
        }

        public System.Threading.Tasks.Task Suicide()
        {
            return __deltaObject__.Suicide();
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public System.Threading.Tasks.Task<uint> GetCurrencyValue(SharedCode.Aspects.Science.CurrencyResource currency)
        {
            return __deltaObject__.GetCurrencyValue(currency);
        }

        public System.Threading.Tasks.Task SetStat(Assets.Src.Aspects.Impl.Stats.StatResource res, float setValue)
        {
            return __deltaObject__.SetStat(res, setValue);
        }

        public System.Threading.Tasks.Task<bool> AllowedSpawnPointSet(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef value)
        {
            return __deltaObject__.AllowedSpawnPointSet(value);
        }

        public event System.Func<string, string, System.Threading.Tasks.Task> NewChatMessageEvent
        {
            add
            {
                __deltaObject__.NewChatMessageEvent += value;
            }

            remove
            {
                __deltaObject__.NewChatMessageEvent -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, System.Threading.Tasks.Task> ItemDroppedEvent
        {
            add
            {
                __deltaObject__.ItemDroppedEvent += value;
            }

            remove
            {
                __deltaObject__.ItemDroppedEvent -= value;
            }
        }

        public event System.Func<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack>, System.Threading.Tasks.Task> GatherResourcesEvent
        {
            add
            {
                __deltaObject__.GatherResourcesEvent += value;
            }

            remove
            {
                __deltaObject__.GatherResourcesEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = BuildingEngine;
                    break;
                case 11:
                    currProperty = KnowledgeEngine;
                    break;
                case 12:
                    currProperty = LastActivatedWasCommonBaken;
                    break;
                case 13:
                    currProperty = ActivatedCommonBakens;
                    break;
                case 14:
                    currProperty = PointMarkers;
                    break;
                case 15:
                    currProperty = PointsOfInterest;
                    break;
                case 17:
                    currProperty = IsIdle;
                    break;
                case 18:
                    currProperty = IsAFK;
                    break;
                case 20:
                    currProperty = AccountId;
                    break;
                case 21:
                    currProperty = Def;
                    break;
                case 22:
                    currProperty = MapOwner;
                    break;
                case 23:
                    currProperty = StaticIdFromExport;
                    break;
                case 24:
                    currProperty = Name;
                    break;
                case 25:
                    currProperty = Prefab;
                    break;
                case 26:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 27:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 29:
                    currProperty = WorldSpaced;
                    break;
                case 30:
                    currProperty = Inventory;
                    break;
                case 31:
                    currProperty = Currency;
                    break;
                case 32:
                    currProperty = Dialog;
                    break;
                case 33:
                    currProperty = Doll;
                    break;
                case 34:
                    currProperty = TemporaryPerks;
                    break;
                case 35:
                    currProperty = PermanentPerks;
                    break;
                case 36:
                    currProperty = SavedPerks;
                    break;
                case 38:
                    currProperty = PerksDestroyCount;
                    break;
                case 39:
                    currProperty = PerkActionsPrices;
                    break;
                case 41:
                    currProperty = CraftEngine;
                    break;
                case 42:
                    currProperty = Wizard;
                    break;
                case 43:
                    currProperty = SlaveWizardHolder;
                    break;
                case 44:
                    currProperty = SimpleStupidStats;
                    break;
                case 45:
                    currProperty = ContainerApi;
                    break;
                case 46:
                    currProperty = AllowedSpawnPoint;
                    break;
                case 47:
                    currProperty = Health;
                    break;
                case 48:
                    currProperty = Mortal;
                    break;
                case 49:
                    currProperty = Brute;
                    break;
                case 50:
                    currProperty = Stats;
                    break;
                case 51:
                    currProperty = MutationMechanics;
                    break;
                case 52:
                    currProperty = Faction;
                    break;
                case 53:
                    currProperty = Gender;
                    break;
                case 54:
                    currProperty = Traumas;
                    break;
                case 55:
                    currProperty = PingDiagnostics;
                    break;
                case 56:
                    currProperty = ItemsStatsAccumulator;
                    break;
                case 57:
                    currProperty = AuthorityOwner;
                    break;
                case 58:
                    currProperty = MovementSync;
                    break;
                case 59:
                    currProperty = LogableEntity;
                    break;
                case 60:
                    currProperty = LocomotionOwner;
                    break;
                case 61:
                    currProperty = Consumer;
                    break;
                case 62:
                    currProperty = Quest;
                    break;
                case 63:
                    currProperty = InputActionHandlers;
                    break;
                case 65:
                    currProperty = AttackEngine;
                    break;
                case 66:
                    currProperty = AnimationDoerOwner;
                    break;
                case 67:
                    currProperty = FounderPack;
                    break;
                case 69:
                    currProperty = Buffs;
                    break;
                case 70:
                    currProperty = LinksEngine;
                    break;
                case 71:
                    currProperty = FogOfWar;
                    break;
                case 72:
                    currProperty = WorldObjectInformationSetsEngine;
                    break;
                case 73:
                    currProperty = worldPersonalMachineEngine;
                    break;
                case 74:
                    currProperty = AccountStats;
                    break;
                case 75:
                    currProperty = SpellModifiers;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 99718147;
    }

    public class WorldCharacterServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterServerApi
    {
        public WorldCharacterServerApi(SharedCode.Entities.IWorldCharacter deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldCharacter __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldCharacter)__deltaObjectBase__;
            }
        }

        public System.Threading.Tasks.Task<bool> InvokeItemDropped(SharedCode.Aspects.Item.Templates.BaseItemResource item, int count)
        {
            return __deltaObject__.InvokeItemDropped(item, count);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> AddItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> itemResourcesToAdd, SharedCode.EntitySystem.PropertyAddress destination)
        {
            return __deltaObject__.AddItems(itemResourcesToAdd, destination);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> MoveItem(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, int count, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.MoveItem(source, sourceSlotId, destination, destinationSlotId, count, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> MoveAllItems(SharedCode.EntitySystem.PropertyAddress source, SharedCode.EntitySystem.PropertyAddress destination)
        {
            return __deltaObject__.MoveAllItems(source, destination);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> RemoveItem(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, int count, System.Guid clientEntityId)
        {
            return __deltaObject__.RemoveItem(source, sourceSlotId, count, clientEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> SavePerk(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.SavePerk(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> DisassemblyPerk(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.DisassemblyPerk(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> Break(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.Break(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> ChangeCurrencies(System.Collections.Generic.List<SharedCode.Entities.CurrencyResourcePack> currencies)
        {
            return __deltaObject__.ChangeCurrencies(currencies);
        }

        public override int TypeId => -1066955088;
    }

    public class WorldCharacterServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterServer
    {
        public WorldCharacterServer(SharedCode.Entities.IWorldCharacter deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldCharacter __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldCharacter)__deltaObjectBase__;
            }
        }

        public SharedCode.Refs.EntityRef<SharedCode.Entities.Engine.IBuildingEngine> BuildingEngine => __deltaObject__.BuildingEngine;
        public SharedCode.Refs.EntityRef<SharedCode.Entities.Engine.IKnowledgeEngine> KnowledgeEngine => __deltaObject__.KnowledgeEngine;
        public bool LastActivatedWasCommonBaken => __deltaObject__.LastActivatedWasCommonBaken;
        public IDeltaDictionary<System.Guid, long> ActivatedCommonBakens
        {
            get
            {
                return __deltaObject__.ActivatedCommonBakens;
            }
        }

        public IDeltaDictionary<System.Guid, Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointMarker> PointMarkers
        {
            get
            {
                return __deltaObject__.PointMarkers;
            }
        }

        public IDeltaList<Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointOfInterestDef> PointsOfInterest => __deltaObject__.PointsOfInterest;
        public bool IsIdle => __deltaObject__.IsIdle;
        public bool IsAFK => __deltaObject__.IsAFK;
        public System.Guid SessionId => __deltaObject__.SessionId;
        public System.Guid AccountId => __deltaObject__.AccountId;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICurrencyContainerServer Currency => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICurrencyContainerServer)__deltaObject__.Currency?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IDialogEngineServer Dialog => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IDialogEngineServer)__deltaObject__.Dialog?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollServer Doll => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollServer)__deltaObject__.Doll?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ITemporaryPerksServer TemporaryPerks => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ITemporaryPerksServer)__deltaObject__.TemporaryPerks?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IPermanentPerksServer PermanentPerks => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IPermanentPerksServer)__deltaObject__.PermanentPerks?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISavedPerksServer SavedPerks => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISavedPerksServer)__deltaObject__.SavedPerks?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Statictic.StatisticType, SharedCode.EntitySystem.Delta.IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Statictic.StatisticType, float>> Statistics
        {
            get
            {
                return __deltaObject__.Statistics;
            }
        }

        public IDeltaDictionary<SharedCode.Aspects.Item.Templates.BaseItemResource, int> PerksDestroyCount
        {
            get
            {
                return __deltaObject__.PerksDestroyCount;
            }
        }

        public SharedCode.Aspects.Item.Templates.PerkActionsPricesDef PerkActionsPrices => __deltaObject__.PerkActionsPrices;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatisticEngineServer StatisticEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatisticEngineServer)__deltaObject__.StatisticEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public SharedCode.Refs.EntityRef<SharedCode.Entities.Engine.ICraftEngine> CraftEngine => __deltaObject__.CraftEngine;
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public IDeltaDictionary<Assets.Src.Aspects.Impl.Stats.StatResource, float> SimpleStupidStats
        {
            get
            {
                return __deltaObject__.SimpleStupidStats;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef AllowedSpawnPoint => __deltaObject__.AllowedSpawnPoint;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteServer Brute => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteServer)__deltaObject__.Brute?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsServer MutationMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsServer)__deltaObject__.MutationMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public Assets.Src.Aspects.Impl.Factions.Template.FactionDef Faction => __deltaObject__.Faction;
        public ResourceSystem.Aspects.Misc.GenderDef Gender => __deltaObject__.Gender;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ITraumasServer Traumas => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ITraumasServer)__deltaObject__.Traumas?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsServer PingDiagnostics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IPingDiagnosticsServer)__deltaObject__.PingDiagnostics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemsStatsAccumulatorServer ItemsStatsAccumulator => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemsStatsAccumulatorServer)__deltaObject__.ItemsStatsAccumulator?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAuthorityOwnerServer AuthorityOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAuthorityOwnerServer)__deltaObject__.AuthorityOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterMovementSyncServer MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterMovementSyncServer)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityServer LogableEntity => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityServer)__deltaObject__.LogableEntity?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerServer LocomotionOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerServer)__deltaObject__.LocomotionOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IConsumerServer Consumer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IConsumerServer)__deltaObject__.Consumer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineServer Quest => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineServer)__deltaObject__.Quest?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IInputActionHandlersServer InputActionHandlers => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IInputActionHandlersServer)__deltaObject__.InputActionHandlers?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAttackEngineServer AttackEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAttackEngineServer)__deltaObject__.AttackEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerServer AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerServer)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IFounderPackServer FounderPack => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IFounderPackServer)__deltaObject__.FounderPack?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineServer LinksEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILinksEngineServer)__deltaObject__.LinksEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IFogOfWarServer FogOfWar => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IFogOfWarServer)__deltaObject__.FogOfWar?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldObjectInformationSetsEngineServer WorldObjectInformationSetsEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldObjectInformationSetsEngineServer)__deltaObject__.WorldObjectInformationSetsEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldPersonalMachineEngineServer worldPersonalMachineEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldPersonalMachineEngineServer)__deltaObject__.worldPersonalMachineEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountStatsServer AccountStats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountStatsServer)__deltaObject__.AccountStats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public IDeltaDictionary<ColonyShared.SharedCode.Modifiers.SpellModifiersCauser, ColonyShared.SharedCode.Modifiers.SpellModifiersCollectionEntry> SpellModifiers
        {
            get
            {
                return __deltaObject__.SpellModifiers;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IKillingRewardMechanicsServer KillingRewardMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IKillingRewardMechanicsServer)__deltaObject__.KillingRewardMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task SendChatMessage(string message)
        {
            return __deltaObject__.SendChatMessage(message);
        }

        public System.Threading.Tasks.Task<bool> Respawn(bool onBaken, bool anyCommonBaken, System.Guid commonBakenId)
        {
            return __deltaObject__.Respawn(onBaken, anyCommonBaken, commonBakenId);
        }

        public System.Threading.Tasks.ValueTask<bool> HasBaken()
        {
            return __deltaObject__.HasBaken();
        }

        public System.Threading.Tasks.ValueTask<bool> IsBakenActivated(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> bakenRef)
        {
            return __deltaObject__.IsBakenActivated(bakenRef);
        }

        public System.Threading.Tasks.Task<bool> ActivateCommonBaken(System.Guid commonBakenGuid)
        {
            return __deltaObject__.ActivateCommonBaken(commonBakenGuid);
        }

        public System.Threading.Tasks.Task<bool> InvokeItemDropped(SharedCode.Aspects.Item.Templates.BaseItemResource item, int count)
        {
            return __deltaObject__.InvokeItemDropped(item, count);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> AddItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> itemResourcesToAdd, SharedCode.EntitySystem.PropertyAddress destination)
        {
            return __deltaObject__.AddItems(itemResourcesToAdd, destination);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> MoveItem(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, int count, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.MoveItem(source, sourceSlotId, destination, destinationSlotId, count, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> MoveAllItems(SharedCode.EntitySystem.PropertyAddress source, SharedCode.EntitySystem.PropertyAddress destination)
        {
            return __deltaObject__.MoveAllItems(source, destination);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> RemoveItem(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, int count, System.Guid clientEntityId)
        {
            return __deltaObject__.RemoveItem(source, sourceSlotId, count, clientEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> SavePerk(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.SavePerk(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> DisassemblyPerk(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.DisassemblyPerk(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> Break(SharedCode.EntitySystem.PropertyAddress source, int sourceSlotId, System.Guid clientSrcEntityId)
        {
            return __deltaObject__.Break(source, sourceSlotId, clientSrcEntityId);
        }

        public System.Threading.Tasks.Task<bool> AddPerkSlot(SharedCode.EntitySystem.PropertyAddress source, int slotId, SharedCode.Aspects.Item.Templates.ItemTypeResource perkSlotType)
        {
            return __deltaObject__.AddPerkSlot(source, slotId, perkSlotType);
        }

        public System.Threading.Tasks.Task<bool> CanAddPerkSlot(SharedCode.Aspects.Item.Templates.ItemTypeResource perkSlotType)
        {
            return __deltaObject__.CanAddPerkSlot(perkSlotType);
        }

        public System.Threading.Tasks.Task AddUsedSlot(Assets.Src.ResourcesSystem.Base.ResourceIDFull dollSlotRes)
        {
            return __deltaObject__.AddUsedSlot(dollSlotRes);
        }

        public System.Threading.Tasks.Task RemoveUsedSlot(Assets.Src.ResourcesSystem.Base.ResourceIDFull dollSlotRes)
        {
            return __deltaObject__.RemoveUsedSlot(dollSlotRes);
        }

        public System.Threading.Tasks.Task<bool> DropCorpse()
        {
            return __deltaObject__.DropCorpse();
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Building.OperationResult> CreateBuildElement(SharedCode.DeltaObjects.Building.BuildType type, System.Guid placeId, SharedCode.Aspects.Building.BuildRecipeDef buildRecipeDef, SharedCode.Aspects.Building.CreateBuildElementData data)
        {
            return __deltaObject__.CreateBuildElement(type, placeId, buildRecipeDef, data);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Building.OperationResultEx> OperateBuildElement(SharedCode.DeltaObjects.Building.BuildType type, System.Guid placeId, System.Guid elementId, SharedCode.Entities.Building.OperationData data)
        {
            return __deltaObject__.OperateBuildElement(type, placeId, elementId, data);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Building.OperationResult> SetBuildCheat(SharedCode.Entities.Building.OperationData data)
        {
            return __deltaObject__.SetBuildCheat(data);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Building.OperationResultEx> GetBuildCheat(SharedCode.Entities.Building.OperationData data)
        {
            return __deltaObject__.GetBuildCheat(data);
        }

        public System.Threading.Tasks.Task AddPointMarker(System.Guid pointMarkerGuid, Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointMarker pointMarker)
        {
            return __deltaObject__.AddPointMarker(pointMarkerGuid, pointMarker);
        }

        public System.Threading.Tasks.Task RemovePointMarker(System.Guid pointMarkerGuid)
        {
            return __deltaObject__.RemovePointMarker(pointMarkerGuid);
        }

        public System.Threading.Tasks.Task AddPointOfInterest(Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointOfInterestDef poi)
        {
            return __deltaObject__.AddPointOfInterest(poi);
        }

        public System.Threading.Tasks.Task RemovePointOfInterest(Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointOfInterestDef poi)
        {
            return __deltaObject__.RemovePointOfInterest(poi);
        }

        public System.Threading.Tasks.Task<bool> NotifyThatClientIsGone()
        {
            return __deltaObject__.NotifyThatClientIsGone();
        }

        public System.Threading.Tasks.Task<bool> NotifyThatClientIsBack()
        {
            return __deltaObject__.NotifyThatClientIsBack();
        }

        public System.Threading.Tasks.Task UnstuckTeleport(float minTimeout)
        {
            return __deltaObject__.UnstuckTeleport(minTimeout);
        }

        public System.Threading.Tasks.Task<string> TestCheatRpc(string argument)
        {
            return __deltaObject__.TestCheatRpc(argument);
        }

        public System.Threading.Tasks.Task Suicide()
        {
            return __deltaObject__.Suicide();
        }

        public System.Threading.Tasks.Task SuicideCheat()
        {
            return __deltaObject__.SuicideCheat();
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperationResult> ChangeCurrencies(System.Collections.Generic.List<SharedCode.Entities.CurrencyResourcePack> currencies)
        {
            return __deltaObject__.ChangeCurrencies(currencies);
        }

        public System.Threading.Tasks.Task<uint> GetCurrencyValue(SharedCode.Aspects.Science.CurrencyResource currency)
        {
            return __deltaObject__.GetCurrencyValue(currency);
        }

        public System.Threading.Tasks.Task ChangeStatistic(Assets.ColonyShared.SharedCode.Aspects.Statictic.StatisticType statistic, Assets.ColonyShared.SharedCode.Aspects.Statictic.StatisticType target, float value)
        {
            return __deltaObject__.ChangeStatistic(statistic, target, value);
        }

        public System.Threading.Tasks.Task SetStat(Assets.Src.Aspects.Impl.Stats.StatResource res, float setValue)
        {
            return __deltaObject__.SetStat(res, setValue);
        }

        public System.Threading.Tasks.Task<bool> AllowedSpawnPointSet(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef value)
        {
            return __deltaObject__.AllowedSpawnPointSet(value);
        }

        public System.Threading.Tasks.Task GatherResources(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> giver, System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> items)
        {
            return __deltaObject__.GatherResources(giver, items);
        }

        public event System.Func<string, string, System.Threading.Tasks.Task> NewChatMessageEvent
        {
            add
            {
                __deltaObject__.NewChatMessageEvent += value;
            }

            remove
            {
                __deltaObject__.NewChatMessageEvent -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, System.Threading.Tasks.Task> ItemDroppedEvent
        {
            add
            {
                __deltaObject__.ItemDroppedEvent += value;
            }

            remove
            {
                __deltaObject__.ItemDroppedEvent -= value;
            }
        }

        public event System.Func<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack>, System.Threading.Tasks.Task> GatherResourcesEvent
        {
            add
            {
                __deltaObject__.GatherResourcesEvent += value;
            }

            remove
            {
                __deltaObject__.GatherResourcesEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = BuildingEngine;
                    break;
                case 11:
                    currProperty = KnowledgeEngine;
                    break;
                case 12:
                    currProperty = LastActivatedWasCommonBaken;
                    break;
                case 13:
                    currProperty = ActivatedCommonBakens;
                    break;
                case 14:
                    currProperty = PointMarkers;
                    break;
                case 15:
                    currProperty = PointsOfInterest;
                    break;
                case 17:
                    currProperty = IsIdle;
                    break;
                case 18:
                    currProperty = IsAFK;
                    break;
                case 19:
                    currProperty = SessionId;
                    break;
                case 20:
                    currProperty = AccountId;
                    break;
                case 21:
                    currProperty = Def;
                    break;
                case 22:
                    currProperty = MapOwner;
                    break;
                case 23:
                    currProperty = StaticIdFromExport;
                    break;
                case 24:
                    currProperty = Name;
                    break;
                case 25:
                    currProperty = Prefab;
                    break;
                case 26:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 27:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 29:
                    currProperty = WorldSpaced;
                    break;
                case 30:
                    currProperty = Inventory;
                    break;
                case 31:
                    currProperty = Currency;
                    break;
                case 32:
                    currProperty = Dialog;
                    break;
                case 33:
                    currProperty = Doll;
                    break;
                case 34:
                    currProperty = TemporaryPerks;
                    break;
                case 35:
                    currProperty = PermanentPerks;
                    break;
                case 36:
                    currProperty = SavedPerks;
                    break;
                case 37:
                    currProperty = Statistics;
                    break;
                case 38:
                    currProperty = PerksDestroyCount;
                    break;
                case 39:
                    currProperty = PerkActionsPrices;
                    break;
                case 40:
                    currProperty = StatisticEngine;
                    break;
                case 41:
                    currProperty = CraftEngine;
                    break;
                case 42:
                    currProperty = Wizard;
                    break;
                case 43:
                    currProperty = SlaveWizardHolder;
                    break;
                case 44:
                    currProperty = SimpleStupidStats;
                    break;
                case 45:
                    currProperty = ContainerApi;
                    break;
                case 46:
                    currProperty = AllowedSpawnPoint;
                    break;
                case 47:
                    currProperty = Health;
                    break;
                case 48:
                    currProperty = Mortal;
                    break;
                case 49:
                    currProperty = Brute;
                    break;
                case 50:
                    currProperty = Stats;
                    break;
                case 51:
                    currProperty = MutationMechanics;
                    break;
                case 52:
                    currProperty = Faction;
                    break;
                case 53:
                    currProperty = Gender;
                    break;
                case 54:
                    currProperty = Traumas;
                    break;
                case 55:
                    currProperty = PingDiagnostics;
                    break;
                case 56:
                    currProperty = ItemsStatsAccumulator;
                    break;
                case 57:
                    currProperty = AuthorityOwner;
                    break;
                case 58:
                    currProperty = MovementSync;
                    break;
                case 59:
                    currProperty = LogableEntity;
                    break;
                case 60:
                    currProperty = LocomotionOwner;
                    break;
                case 61:
                    currProperty = Consumer;
                    break;
                case 62:
                    currProperty = Quest;
                    break;
                case 63:
                    currProperty = InputActionHandlers;
                    break;
                case 65:
                    currProperty = AttackEngine;
                    break;
                case 66:
                    currProperty = AnimationDoerOwner;
                    break;
                case 67:
                    currProperty = FounderPack;
                    break;
                case 69:
                    currProperty = Buffs;
                    break;
                case 70:
                    currProperty = LinksEngine;
                    break;
                case 71:
                    currProperty = FogOfWar;
                    break;
                case 72:
                    currProperty = WorldObjectInformationSetsEngine;
                    break;
                case 73:
                    currProperty = worldPersonalMachineEngine;
                    break;
                case 74:
                    currProperty = AccountStats;
                    break;
                case 75:
                    currProperty = SpellModifiers;
                    break;
                case 77:
                    currProperty = KillingRewardMechanics;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -556605218;
    }
}