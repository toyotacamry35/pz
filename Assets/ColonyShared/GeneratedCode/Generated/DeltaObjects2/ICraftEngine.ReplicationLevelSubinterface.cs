// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, -20655868, typeof(SharedCode.Entities.Engine.ICraftEngine))]
    public interface ICraftEngineAlways : SharedCode.EntitySystem.IEntity, IHasInventoryAlways, IHasOwnerAlways, IHasContainerApiAlways, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, 29010618, typeof(SharedCode.Entities.Engine.ICraftEngine))]
    public interface ICraftEngineClientBroadcast : SharedCode.EntitySystem.IEntity, IHasInventoryClientBroadcast, IHasOwnerClientBroadcast, IHasContainerApiClientBroadcast, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        bool UseOwnOutputContainer
        {
            get;
        }

        GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientBroadcast IntermediateFuelContainer
        {
            get;
        }

        GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientBroadcast IntermediateCraftContainer
        {
            get;
        }

        GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientBroadcast OutputContainer
        {
            get;
        }

        SharedCode.EntitySystem.PropertyAddress FuelContainerAddress
        {
            get;
        }

        SharedCode.EntitySystem.PropertyAddress ResultContainerAddress
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientBroadcast> CraftingQueue
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, int> CraftRecipesUsageStats
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, long> CraftRecipesLastUsageTimes
        {
            get;
        }

        long FuelTimeAlreadyInUse
        {
            get;
        }

        long StartFuelTimeUTC0InMilliseconds
        {
            get;
        }

        long StartCraftingTimeUTC0InMilliseconds
        {
            get;
        }

        System.Threading.Tasks.Task UpdateFuelTime();
        System.Threading.Tasks.Task UpdateCraftingTime();
        System.Threading.Tasks.Task UpdateRepairTime(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex);
        System.Threading.Tasks.Task<bool> CanRun();
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RunCraft();
        System.Threading.Tasks.Task StopCraft();
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Craft(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipe, int variantIdx, int count, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress inventoryAddress, SharedCode.EntitySystem.PropertyAddress inventoryAddress2);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Repair(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex, int recipeIndex, int variantIdx, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress2);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RemoveCraft(int recipeIndex);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> SwapCraft(int index1, int index2);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> StopCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> ContinueCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, -1553318650, typeof(SharedCode.Entities.Engine.ICraftEngine))]
    public interface ICraftEngineClientFullApi : SharedCode.EntitySystem.IEntity, IHasInventoryClientFullApi, IHasOwnerClientFullApi, IHasContainerApiClientFullApi, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, 494803165, typeof(SharedCode.Entities.Engine.ICraftEngine))]
    public interface ICraftEngineClientFull : SharedCode.EntitySystem.IEntity, IHasInventoryClientFull, IHasOwnerClientFull, IHasContainerApiClientFull, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        bool UseOwnOutputContainer
        {
            get;
        }

        GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull IntermediateFuelContainer
        {
            get;
        }

        GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull IntermediateCraftContainer
        {
            get;
        }

        GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull OutputContainer
        {
            get;
        }

        SharedCode.EntitySystem.PropertyAddress FuelContainerAddress
        {
            get;
        }

        SharedCode.EntitySystem.PropertyAddress ResultContainerAddress
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientFull> CraftingQueue
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, int> CraftRecipesUsageStats
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, long> CraftRecipesLastUsageTimes
        {
            get;
        }

        long FuelTimeAlreadyInUse
        {
            get;
        }

        long StartFuelTimeUTC0InMilliseconds
        {
            get;
        }

        long StartCraftingTimeUTC0InMilliseconds
        {
            get;
        }

        System.Threading.Tasks.Task UpdateFuelTime();
        System.Threading.Tasks.Task UpdateCraftingTime();
        System.Threading.Tasks.Task UpdateRepairTime(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex);
        System.Threading.Tasks.Task<bool> CanRun();
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RunCraft();
        System.Threading.Tasks.Task StopCraft();
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Craft(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipe, int variantIdx, int count, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress inventoryAddress, SharedCode.EntitySystem.PropertyAddress inventoryAddress2);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Repair(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex, int recipeIndex, int variantIdx, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress2);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RemoveCraft(int recipeIndex);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> SwapCraft(int index1, int index2);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> StopCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> ContinueCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, 1138067434, typeof(SharedCode.Entities.Engine.ICraftEngine))]
    public interface ICraftEngineServerApi : SharedCode.EntitySystem.IEntity, IHasInventoryServerApi, IHasOwnerServerApi, IHasContainerApiServerApi, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, 273362187, typeof(SharedCode.Entities.Engine.ICraftEngine))]
    public interface ICraftEngineServer : SharedCode.EntitySystem.IEntity, IHasInventoryServer, IHasOwnerServer, IHasContainerApiServer, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        bool UseOwnOutputContainer
        {
            get;
        }

        GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer IntermediateFuelContainer
        {
            get;
        }

        GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer IntermediateCraftContainer
        {
            get;
        }

        GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer OutputContainer
        {
            get;
        }

        SharedCode.EntitySystem.PropertyAddress FuelContainerAddress
        {
            get;
        }

        SharedCode.EntitySystem.PropertyAddress ResultContainerAddress
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemServer> CraftingQueue
        {
            get;
        }

        int MaxQueueSize
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, int> CraftRecipesUsageStats
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, long> CraftRecipesLastUsageTimes
        {
            get;
        }

        long FuelTimeAlreadyInUse
        {
            get;
        }

        long StartFuelTimeUTC0InMilliseconds
        {
            get;
        }

        long StartCraftingTimeUTC0InMilliseconds
        {
            get;
        }

        SharedCode.Aspects.Item.Templates.WorkbenchTypeDef CurrentWorkbenchType
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaList<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken> FuelScheduleCancellation
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaList<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken> CraftScheduleCancellation
        {
            get;
        }

        System.Threading.Tasks.Task SetResultContainerAddress(SharedCode.EntitySystem.PropertyAddress resultContainerAddress);
        System.Threading.Tasks.Task UpdateFuelTime();
        System.Threading.Tasks.Task UpdateCraftingTime();
        System.Threading.Tasks.Task UpdateRepairTime(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex);
        System.Threading.Tasks.Task<bool> CanRun();
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RunCraft();
        System.Threading.Tasks.Task StopCraft();
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Craft(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipe, int variantIdx, int count, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress inventoryAddress, SharedCode.EntitySystem.PropertyAddress inventoryAddress2);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> Repair(SharedCode.EntitySystem.PropertyAddress itemAddress, int itemIndex, int recipeIndex, int variantIdx, int[] mandatorySlotPermutation, int[] optionalSlotPermutation, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress, SharedCode.EntitySystem.PropertyAddress fromInventoryAddress2);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> RemoveCraft(int recipeIndex);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> SwapCraft(int index1, int index2);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> StopCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.CraftOperationResult> ContinueCraftWithWorkbench(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef workbenchType);
    }
}