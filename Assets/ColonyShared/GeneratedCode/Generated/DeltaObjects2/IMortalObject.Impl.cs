// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("Mortal")]
    public partial class Mortal : SharedCode.EntitySystem.BaseDeltaObject, Assets.ColonyShared.SharedCode.Entities.IMortal, IMortalImplementRemoteMethods
    {
        public Mortal()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                IsAlive = default(bool);
                PermaDead = default(bool);
                IsKnockedDown = default(bool);
                KnockDownSpellId = default(SharedCode.Wizardry.SpellId);
                LastResurrectTime = default(long);
                LastDeathTime = default(long);
                LastStrike = new SharedCode.EntitySystem.Delta.DeltaDictionary<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, long>();
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Master) == (long)SharedCode.EntitySystem.ReplicationLevel.Master)
                if (_LastStrike != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_LastStrike).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Master, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _LastStrike, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Master ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Master, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _LastStrike, 16, false, SharedCode.EntitySystem.ReplicationLevel.Master);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LastStrike)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _LastStrike, SharedCode.EntitySystem.ReplicationLevel.Master, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LastStrike)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "IsAlive":
                    IsAlive__Changed += callback;
                    break;
                case "PermaDead":
                    PermaDead__Changed += callback;
                    break;
                case "IsKnockedDown":
                    IsKnockedDown__Changed += callback;
                    break;
                case "KnockDownSpellId":
                    KnockDownSpellId__Changed += callback;
                    break;
                case "LastResurrectTime":
                    LastResurrectTime__Changed += callback;
                    break;
                case "LastDeathTime":
                    LastDeathTime__Changed += callback;
                    break;
                case "LastStrike":
                    LastStrike__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "IsAlive":
                    IsAlive__Changed -= callback;
                    break;
                case "PermaDead":
                    PermaDead__Changed -= callback;
                    break;
                case "IsKnockedDown":
                    IsKnockedDown__Changed -= callback;
                    break;
                case "KnockDownSpellId":
                    KnockDownSpellId__Changed -= callback;
                    break;
                case "LastResurrectTime":
                    LastResurrectTime__Changed -= callback;
                    break;
                case "LastDeathTime":
                    LastDeathTime__Changed -= callback;
                    break;
                case "LastStrike":
                    LastStrike__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "IsAlive":
                    IsAlive__Changed = null;
                    break;
                case "PermaDead":
                    PermaDead__Changed = null;
                    break;
                case "IsKnockedDown":
                    IsKnockedDown__Changed = null;
                    break;
                case "KnockDownSpellId":
                    KnockDownSpellId__Changed = null;
                    break;
                case "LastResurrectTime":
                    LastResurrectTime__Changed = null;
                    break;
                case "LastDeathTime":
                    LastDeathTime__Changed = null;
                    break;
                case "LastStrike":
                    LastStrike__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            IsAlive__Changed = null;
            PermaDead__Changed = null;
            IsKnockedDown__Changed = null;
            KnockDownSpellId__Changed = null;
            LastResurrectTime__Changed = null;
            LastDeathTime__Changed = null;
            LastStrike__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && IsAlive__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_IsAlive, nameof(IsAlive), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, IsAlive__Changed);
            }

            if (NeedFireEvent(11) && PermaDead__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_PermaDead, nameof(PermaDead), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, PermaDead__Changed);
            }

            if (NeedFireEvent(12) && IsKnockedDown__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_IsKnockedDown, nameof(IsKnockedDown), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, IsKnockedDown__Changed);
            }

            if (NeedFireEvent(13) && KnockDownSpellId__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_KnockDownSpellId, nameof(KnockDownSpellId), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, KnockDownSpellId__Changed);
            }

            if (NeedFireEvent(14) && LastResurrectTime__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LastResurrectTime, nameof(LastResurrectTime), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LastResurrectTime__Changed);
            }

            if (NeedFireEvent(15) && LastDeathTime__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LastDeathTime, nameof(LastDeathTime), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LastDeathTime__Changed);
            }

            if (NeedFireEvent(16) && LastStrike__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 16;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LastStrike, nameof(LastStrike), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LastStrike__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                IsAlive = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                PermaDead = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                IsKnockedDown = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                KnockDownSpellId = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                LastResurrectTime = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                LastDeathTime = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                LastStrike = default;
            if (_LastStrike != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LastStrike).Downgrade(mask);
        }
    }
}