// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Entities.Service;
using SharedCode.EntitySystem.ChainCalls;
using SharedCode.Logging;
using SharedCode.OurSimpleIoC;
using SharedCode.Utils;
using System.Linq;
using System.Collections.Generic;
using System.CodeDom.Compiler;

namespace GeneratedCode.DeltaObjects.Chain
{
    [GeneratedCode("CodeGen", "1.0")]
    public class BankerEntityChainProxy : BaseChainEntity
    {
        public BankerEntityChainProxy(SharedCode.Entities.IBankerEntity entity): base(entity)
        {
        }

        public BankerEntityChainProxy(SharedCode.Entities.IBankerEntity entity, IChainedEntity fromChain): base(entity, fromChain)
        {
        }

        public BankerEntityChainProxy GetBankCell(ChainArgument<Assets.ResourceSystem.Aspects.Banks.BankDef> bankDef, ChainArgument<ResourceSystem.Utils.OuterRef> bankCell)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (bankDef is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)bankDef).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (Assets.ResourceSystem.Aspects.Banks.BankDef)bankDef);
                if (bankCell is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)bankCell).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (ResourceSystem.Utils.OuterRef)bankCell);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 0, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BankerEntityChainProxy DestroyBankCells(ChainArgument<Assets.ResourceSystem.Aspects.Banks.BankDef> bankDef, ChainArgument<SharedCode.EntitySystem.PropertyAddress> corpseInventoryAddress)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (bankDef is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)bankDef).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (Assets.ResourceSystem.Aspects.Banks.BankDef)bankDef);
                if (corpseInventoryAddress is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)corpseInventoryAddress).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.EntitySystem.PropertyAddress)corpseInventoryAddress);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 1, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public BankerEntityChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
        {
            chainBatch.Chain.Add(new ChainBlockPeriod(duration, repeat ? -1 : 0, fromUtcNow));
            return this;
        }

        public BankerEntityChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
        {
            chainBatch.Chain.Add(new ChainBlockPeriod(duration, count, fromUtcNow));
            return this;
        }

        public BankerEntityChainProxy StoreResult(string name)
        {
            ((ChainBlockCall)chainBatch.Chain.Last()).SetStoreResultKey(name);
            return this;
        }
    }

    public static partial class ChainProxyExtensions
    {
        public static BankerEntityChainProxy Chain(this SharedCode.Entities.IBankerEntity entity)
        {
            return new BankerEntityChainProxy(entity);
        }

        public static BankerEntityChainProxy ContinueChain(this SharedCode.Entities.IBankerEntity entity, IChainedEntity fromChain)
        {
            return new BankerEntityChainProxy(entity, fromChain);
        }
    }
}