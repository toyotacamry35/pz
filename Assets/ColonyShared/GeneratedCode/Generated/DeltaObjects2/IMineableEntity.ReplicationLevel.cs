// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class MineableEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMineableEntityAlways
    {
        public MineableEntityAlways(SharedCode.Entities.Mineable.IMineableEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Mineable.IMineableEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Mineable.IMineableEntity)__deltaObjectBase__;
            }
        }

        public float CurrProgressActualTime => __deltaObject__.CurrProgressActualTime;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineAlways ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineAlways)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = CurrProgressActualTime;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 17:
                    currProperty = ComputableStateMachine;
                    break;
                case 19:
                    currProperty = Def;
                    break;
                case 20:
                    currProperty = MapOwner;
                    break;
                case 21:
                    currProperty = StaticIdFromExport;
                    break;
                case 22:
                    currProperty = Name;
                    break;
                case 23:
                    currProperty = Prefab;
                    break;
                case 24:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 25:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 27:
                    currProperty = WorldSpaced;
                    break;
                case 28:
                    currProperty = MovementSync;
                    break;
                case 29:
                    currProperty = OwnerInformation;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 238778519;
    }

    public class MineableEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMineableEntityClientBroadcast
    {
        public MineableEntityClientBroadcast(SharedCode.Entities.Mineable.IMineableEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Mineable.IMineableEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Mineable.IMineableEntity)__deltaObjectBase__;
            }
        }

        public float CurrProgressActualTime => __deltaObject__.CurrProgressActualTime;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientBroadcast Lifespan => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientBroadcast)__deltaObject__.Lifespan?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientBroadcast ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientBroadcast)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<SharedCode.Entities.Mineable.ProbabilisticItemPack>> GetMineableLootList(Assets.ColonyShared.SharedCode.Aspects.WorldObjects.LootListRequest request)
        {
            return __deltaObject__.GetMineableLootList(request);
        }

        public System.Threading.Tasks.Task<bool> IsDamageTypeEffectiveForMining(Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.DamageTypeDef type)
        {
            return __deltaObject__.IsDamageTypeEffectiveForMining(type);
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = CurrProgressActualTime;
                    break;
                case 11:
                    currProperty = Health;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 15:
                    currProperty = Stats;
                    break;
                case 16:
                    currProperty = Lifespan;
                    break;
                case 17:
                    currProperty = ComputableStateMachine;
                    break;
                case 18:
                    currProperty = SpawnedObject;
                    break;
                case 19:
                    currProperty = Def;
                    break;
                case 20:
                    currProperty = MapOwner;
                    break;
                case 21:
                    currProperty = StaticIdFromExport;
                    break;
                case 22:
                    currProperty = Name;
                    break;
                case 23:
                    currProperty = Prefab;
                    break;
                case 24:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 25:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 27:
                    currProperty = WorldSpaced;
                    break;
                case 28:
                    currProperty = MovementSync;
                    break;
                case 29:
                    currProperty = OwnerInformation;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1153660455;
    }

    public class MineableEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMineableEntityClientFullApi
    {
        public MineableEntityClientFullApi(SharedCode.Entities.Mineable.IMineableEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Mineable.IMineableEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Mineable.IMineableEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1914966039;
    }

    public class MineableEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMineableEntityClientFull
    {
        public MineableEntityClientFull(SharedCode.Entities.Mineable.IMineableEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Mineable.IMineableEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Mineable.IMineableEntity)__deltaObjectBase__;
            }
        }

        public float CurrProgressActualTime => __deltaObject__.CurrProgressActualTime;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteClientFull Brute => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteClientFull)__deltaObject__.Brute?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientFull Lifespan => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanClientFull)__deltaObject__.Lifespan?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientFull ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineClientFull)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<SharedCode.Entities.Mineable.ProbabilisticItemPack>> GetMineableLootList(Assets.ColonyShared.SharedCode.Aspects.WorldObjects.LootListRequest request)
        {
            return __deltaObject__.GetMineableLootList(request);
        }

        public System.Threading.Tasks.Task<bool> IsDamageTypeEffectiveForMining(Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.DamageTypeDef type)
        {
            return __deltaObject__.IsDamageTypeEffectiveForMining(type);
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = CurrProgressActualTime;
                    break;
                case 11:
                    currProperty = Health;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 14:
                    currProperty = Brute;
                    break;
                case 15:
                    currProperty = Stats;
                    break;
                case 16:
                    currProperty = Lifespan;
                    break;
                case 17:
                    currProperty = ComputableStateMachine;
                    break;
                case 18:
                    currProperty = SpawnedObject;
                    break;
                case 19:
                    currProperty = Def;
                    break;
                case 20:
                    currProperty = MapOwner;
                    break;
                case 21:
                    currProperty = StaticIdFromExport;
                    break;
                case 22:
                    currProperty = Name;
                    break;
                case 23:
                    currProperty = Prefab;
                    break;
                case 24:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 25:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 27:
                    currProperty = WorldSpaced;
                    break;
                case 28:
                    currProperty = MovementSync;
                    break;
                case 29:
                    currProperty = OwnerInformation;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 290693325;
    }

    public class MineableEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMineableEntityServerApi
    {
        public MineableEntityServerApi(SharedCode.Entities.Mineable.IMineableEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Mineable.IMineableEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Mineable.IMineableEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1610422990;
    }

    public class MineableEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMineableEntityServer
    {
        public MineableEntityServer(SharedCode.Entities.Mineable.IMineableEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Mineable.IMineableEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Mineable.IMineableEntity)__deltaObjectBase__;
            }
        }

        public float CurrProgressActualTime => __deltaObject__.CurrProgressActualTime;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer Destroyable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer)__deltaObject__.Destroyable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteServer Brute => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteServer)__deltaObject__.Brute?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanServer Lifespan => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILifespanServer)__deltaObject__.Lifespan?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineServer ComputableStateMachine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IComputableStateMachineServer)__deltaObject__.ComputableStateMachine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<SharedCode.Entities.Mineable.ProbabilisticItemPack>> GetMineableLootList(Assets.ColonyShared.SharedCode.Aspects.WorldObjects.LootListRequest request)
        {
            return __deltaObject__.GetMineableLootList(request);
        }

        public System.Threading.Tasks.Task<bool> IsDamageTypeEffectiveForMining(Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.DamageTypeDef type)
        {
            return __deltaObject__.IsDamageTypeEffectiveForMining(type);
        }

        public System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.DamageTypeDef> GetDefaultDamageType()
        {
            return __deltaObject__.GetDefaultDamageType();
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.ItemResourcePack> GetFillerResourcePack()
        {
            return __deltaObject__.GetFillerResourcePack();
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = CurrProgressActualTime;
                    break;
                case 11:
                    currProperty = Health;
                    break;
                case 12:
                    currProperty = Destroyable;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 14:
                    currProperty = Brute;
                    break;
                case 15:
                    currProperty = Stats;
                    break;
                case 16:
                    currProperty = Lifespan;
                    break;
                case 17:
                    currProperty = ComputableStateMachine;
                    break;
                case 18:
                    currProperty = SpawnedObject;
                    break;
                case 19:
                    currProperty = Def;
                    break;
                case 20:
                    currProperty = MapOwner;
                    break;
                case 21:
                    currProperty = StaticIdFromExport;
                    break;
                case 22:
                    currProperty = Name;
                    break;
                case 23:
                    currProperty = Prefab;
                    break;
                case 24:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 25:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 27:
                    currProperty = WorldSpaced;
                    break;
                case 28:
                    currProperty = MovementSync;
                    break;
                case 29:
                    currProperty = OwnerInformation;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 174397394;
    }
}