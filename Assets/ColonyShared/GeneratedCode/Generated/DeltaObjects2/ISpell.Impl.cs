// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("Spell")]
    public partial class Spell : SharedCode.EntitySystem.BaseDeltaObject, SharedCode.Wizardry.ISpell
    {
        public Spell()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                AskedToFinish = default(long);
                AskedToBeFinishedWithReason = default(SharedCode.Wizardry.SpellFinishReason);
                StopCast = default(long);
                StopCastWithReason = default(SharedCode.Wizardry.SpellFinishReason);
                Status = new GeneratedCode.DeltaObjects.SpellStatus();
                CastData = new SharedCode.Wizardry.SpellCast();
                Modifiers = new SharedCode.EntitySystem.Delta.DeltaList<ResourceSystem.Aspects.SpellModifierDef>();
                FinishReason = default(SharedCode.Wizardry.SpellFinishReason);
                Id = default(SharedCode.Wizardry.SpellId);
                Finished = default(long);
                Started = default(long);
                Causer = default(GeneratedCode.DeltaObjects.SpellPartCastId);
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Master) == (long)SharedCode.EntitySystem.ReplicationLevel.Master)
                if (_Status != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Status).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Master, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_Modifiers != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Modifiers).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Status, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Master ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Master, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Modifiers, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Status, 14, false, SharedCode.EntitySystem.ReplicationLevel.Master);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Modifiers, 16, true, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Status)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Modifiers)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Status, SharedCode.EntitySystem.ReplicationLevel.Master, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Modifiers, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Status)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Modifiers)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "AskedToFinish":
                    AskedToFinish__Changed += callback;
                    break;
                case "AskedToBeFinishedWithReason":
                    AskedToBeFinishedWithReason__Changed += callback;
                    break;
                case "StopCast":
                    StopCast__Changed += callback;
                    break;
                case "StopCastWithReason":
                    StopCastWithReason__Changed += callback;
                    break;
                case "Status":
                    Status__Changed += callback;
                    break;
                case "CastData":
                    CastData__Changed += callback;
                    break;
                case "Modifiers":
                    Modifiers__Changed += callback;
                    break;
                case "FinishReason":
                    FinishReason__Changed += callback;
                    break;
                case "Id":
                    Id__Changed += callback;
                    break;
                case "Finished":
                    Finished__Changed += callback;
                    break;
                case "Started":
                    Started__Changed += callback;
                    break;
                case "Causer":
                    Causer__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "AskedToFinish":
                    AskedToFinish__Changed -= callback;
                    break;
                case "AskedToBeFinishedWithReason":
                    AskedToBeFinishedWithReason__Changed -= callback;
                    break;
                case "StopCast":
                    StopCast__Changed -= callback;
                    break;
                case "StopCastWithReason":
                    StopCastWithReason__Changed -= callback;
                    break;
                case "Status":
                    Status__Changed -= callback;
                    break;
                case "CastData":
                    CastData__Changed -= callback;
                    break;
                case "Modifiers":
                    Modifiers__Changed -= callback;
                    break;
                case "FinishReason":
                    FinishReason__Changed -= callback;
                    break;
                case "Id":
                    Id__Changed -= callback;
                    break;
                case "Finished":
                    Finished__Changed -= callback;
                    break;
                case "Started":
                    Started__Changed -= callback;
                    break;
                case "Causer":
                    Causer__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "AskedToFinish":
                    AskedToFinish__Changed = null;
                    break;
                case "AskedToBeFinishedWithReason":
                    AskedToBeFinishedWithReason__Changed = null;
                    break;
                case "StopCast":
                    StopCast__Changed = null;
                    break;
                case "StopCastWithReason":
                    StopCastWithReason__Changed = null;
                    break;
                case "Status":
                    Status__Changed = null;
                    break;
                case "CastData":
                    CastData__Changed = null;
                    break;
                case "Modifiers":
                    Modifiers__Changed = null;
                    break;
                case "FinishReason":
                    FinishReason__Changed = null;
                    break;
                case "Id":
                    Id__Changed = null;
                    break;
                case "Finished":
                    Finished__Changed = null;
                    break;
                case "Started":
                    Started__Changed = null;
                    break;
                case "Causer":
                    Causer__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            AskedToFinish__Changed = null;
            AskedToBeFinishedWithReason__Changed = null;
            StopCast__Changed = null;
            StopCastWithReason__Changed = null;
            Status__Changed = null;
            CastData__Changed = null;
            Modifiers__Changed = null;
            FinishReason__Changed = null;
            Id__Changed = null;
            Finished__Changed = null;
            Started__Changed = null;
            Causer__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && AskedToFinish__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AskedToFinish, nameof(AskedToFinish), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AskedToFinish__Changed);
            }

            if (NeedFireEvent(11) && AskedToBeFinishedWithReason__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AskedToBeFinishedWithReason, nameof(AskedToBeFinishedWithReason), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AskedToBeFinishedWithReason__Changed);
            }

            if (NeedFireEvent(12) && StopCast__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_StopCast, nameof(StopCast), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, StopCast__Changed);
            }

            if (NeedFireEvent(13) && StopCastWithReason__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_StopCastWithReason, nameof(StopCastWithReason), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, StopCastWithReason__Changed);
            }

            if (NeedFireEvent(14) && Status__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Status, nameof(Status), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Status__Changed);
            }

            if (NeedFireEvent(15) && CastData__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CastData, nameof(CastData), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CastData__Changed);
            }

            if (NeedFireEvent(16) && Modifiers__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 16;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Modifiers, nameof(Modifiers), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Modifiers__Changed);
            }

            if (NeedFireEvent(17) && FinishReason__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 17;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_FinishReason, nameof(FinishReason), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, FinishReason__Changed);
            }

            if (NeedFireEvent(18) && Id__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 18;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Id, nameof(Id), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Id__Changed);
            }

            if (NeedFireEvent(19) && Finished__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 19;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Finished, nameof(Finished), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Finished__Changed);
            }

            if (NeedFireEvent(20) && Started__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 20;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Started, nameof(Started), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Started__Changed);
            }

            if (NeedFireEvent(21) && Causer__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 21;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Causer, nameof(Causer), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Causer__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                AskedToFinish = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                AskedToBeFinishedWithReason = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                StopCast = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                StopCastWithReason = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                Status = default;
            if (_Status != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Status).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                CastData = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Modifiers = default;
            if (_Modifiers != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Modifiers).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                FinishReason = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Id = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Finished = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Started = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                Causer = default;
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("SpellSlot")]
    public partial class SpellSlot : SharedCode.EntitySystem.BaseDeltaObject, SharedCode.Wizardry.ISpellSlot
    {
        public SpellSlot()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                CurrentSpell = new GeneratedCode.DeltaObjects.Spell();
                NextChainedSpell = new GeneratedCode.DeltaObjects.Spell();
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Master) == (long)SharedCode.EntitySystem.ReplicationLevel.Master)
                if (_CurrentSpell != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_CurrentSpell).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Master, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Master) == (long)SharedCode.EntitySystem.ReplicationLevel.Master)
                if (_NextChainedSpell != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_NextChainedSpell).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Master, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _CurrentSpell, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Master ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Master, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _NextChainedSpell, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Master ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Master, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _CurrentSpell, 10, false, SharedCode.EntitySystem.ReplicationLevel.Master);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _NextChainedSpell, 11, false, SharedCode.EntitySystem.ReplicationLevel.Master);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CurrentSpell)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_NextChainedSpell)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _CurrentSpell, SharedCode.EntitySystem.ReplicationLevel.Master, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _NextChainedSpell, SharedCode.EntitySystem.ReplicationLevel.Master, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CurrentSpell)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_NextChainedSpell)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "CurrentSpell":
                    CurrentSpell__Changed += callback;
                    break;
                case "NextChainedSpell":
                    NextChainedSpell__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "CurrentSpell":
                    CurrentSpell__Changed -= callback;
                    break;
                case "NextChainedSpell":
                    NextChainedSpell__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "CurrentSpell":
                    CurrentSpell__Changed = null;
                    break;
                case "NextChainedSpell":
                    NextChainedSpell__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            CurrentSpell__Changed = null;
            NextChainedSpell__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && CurrentSpell__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CurrentSpell, nameof(CurrentSpell), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CurrentSpell__Changed);
            }

            if (NeedFireEvent(11) && NextChainedSpell__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_NextChainedSpell, nameof(NextChainedSpell), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, NextChainedSpell__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                CurrentSpell = default;
            if (_CurrentSpell != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CurrentSpell).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                NextChainedSpell = default;
            if (_NextChainedSpell != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_NextChainedSpell).Downgrade(mask);
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("SpellStatus")]
    public partial class SpellStatus : SharedCode.EntitySystem.BaseDeltaObject, SharedCode.Wizardry.ISpellStatus
    {
        public SpellStatus()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                SubSpell = default(SharedCode.Wizardry.SubSpell);
                Spell = default(SharedCode.Wizardry.SpellDef);
                ActivationsPerWord = new SharedCode.EntitySystem.Delta.DeltaList<(SharedCode.Wizardry.SpellWordDef, int)>();
                SuccesfullPredicatesCheckCount = default(int);
                FailedPredicatesCheckCount = default(int);
                ActivationsCount = default(int);
                DeactivationsCount = default(int);
                SuccesfullActivationsCount = default(int);
                SubSpells = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Wizardry.ISpellStatus>();
                Activations = default(int);
                AccumulatedDelta = default(long);
                LastTimeUpdated = default(long);
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_ActivationsPerWord != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_ActivationsPerWord).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_SubSpells != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_SubSpells).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _ActivationsPerWord, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _SubSpells, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _ActivationsPerWord, 12, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _SubSpells, 18, false, SharedCode.EntitySystem.ReplicationLevel.Always);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ActivationsPerWord)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SubSpells)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _ActivationsPerWord, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _SubSpells, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ActivationsPerWord)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SubSpells)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "SubSpell":
                    SubSpell__Changed += callback;
                    break;
                case "Spell":
                    Spell__Changed += callback;
                    break;
                case "ActivationsPerWord":
                    ActivationsPerWord__Changed += callback;
                    break;
                case "SuccesfullPredicatesCheckCount":
                    SuccesfullPredicatesCheckCount__Changed += callback;
                    break;
                case "FailedPredicatesCheckCount":
                    FailedPredicatesCheckCount__Changed += callback;
                    break;
                case "ActivationsCount":
                    ActivationsCount__Changed += callback;
                    break;
                case "DeactivationsCount":
                    DeactivationsCount__Changed += callback;
                    break;
                case "SuccesfullActivationsCount":
                    SuccesfullActivationsCount__Changed += callback;
                    break;
                case "SubSpells":
                    SubSpells__Changed += callback;
                    break;
                case "Activations":
                    Activations__Changed += callback;
                    break;
                case "AccumulatedDelta":
                    AccumulatedDelta__Changed += callback;
                    break;
                case "LastTimeUpdated":
                    LastTimeUpdated__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "SubSpell":
                    SubSpell__Changed -= callback;
                    break;
                case "Spell":
                    Spell__Changed -= callback;
                    break;
                case "ActivationsPerWord":
                    ActivationsPerWord__Changed -= callback;
                    break;
                case "SuccesfullPredicatesCheckCount":
                    SuccesfullPredicatesCheckCount__Changed -= callback;
                    break;
                case "FailedPredicatesCheckCount":
                    FailedPredicatesCheckCount__Changed -= callback;
                    break;
                case "ActivationsCount":
                    ActivationsCount__Changed -= callback;
                    break;
                case "DeactivationsCount":
                    DeactivationsCount__Changed -= callback;
                    break;
                case "SuccesfullActivationsCount":
                    SuccesfullActivationsCount__Changed -= callback;
                    break;
                case "SubSpells":
                    SubSpells__Changed -= callback;
                    break;
                case "Activations":
                    Activations__Changed -= callback;
                    break;
                case "AccumulatedDelta":
                    AccumulatedDelta__Changed -= callback;
                    break;
                case "LastTimeUpdated":
                    LastTimeUpdated__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "SubSpell":
                    SubSpell__Changed = null;
                    break;
                case "Spell":
                    Spell__Changed = null;
                    break;
                case "ActivationsPerWord":
                    ActivationsPerWord__Changed = null;
                    break;
                case "SuccesfullPredicatesCheckCount":
                    SuccesfullPredicatesCheckCount__Changed = null;
                    break;
                case "FailedPredicatesCheckCount":
                    FailedPredicatesCheckCount__Changed = null;
                    break;
                case "ActivationsCount":
                    ActivationsCount__Changed = null;
                    break;
                case "DeactivationsCount":
                    DeactivationsCount__Changed = null;
                    break;
                case "SuccesfullActivationsCount":
                    SuccesfullActivationsCount__Changed = null;
                    break;
                case "SubSpells":
                    SubSpells__Changed = null;
                    break;
                case "Activations":
                    Activations__Changed = null;
                    break;
                case "AccumulatedDelta":
                    AccumulatedDelta__Changed = null;
                    break;
                case "LastTimeUpdated":
                    LastTimeUpdated__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            SubSpell__Changed = null;
            Spell__Changed = null;
            ActivationsPerWord__Changed = null;
            SuccesfullPredicatesCheckCount__Changed = null;
            FailedPredicatesCheckCount__Changed = null;
            ActivationsCount__Changed = null;
            DeactivationsCount__Changed = null;
            SuccesfullActivationsCount__Changed = null;
            SubSpells__Changed = null;
            Activations__Changed = null;
            AccumulatedDelta__Changed = null;
            LastTimeUpdated__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && SubSpell__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SubSpell, nameof(SubSpell), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SubSpell__Changed);
            }

            if (NeedFireEvent(11) && Spell__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Spell, nameof(Spell), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Spell__Changed);
            }

            if (NeedFireEvent(12) && ActivationsPerWord__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ActivationsPerWord, nameof(ActivationsPerWord), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ActivationsPerWord__Changed);
            }

            if (NeedFireEvent(13) && SuccesfullPredicatesCheckCount__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SuccesfullPredicatesCheckCount, nameof(SuccesfullPredicatesCheckCount), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SuccesfullPredicatesCheckCount__Changed);
            }

            if (NeedFireEvent(14) && FailedPredicatesCheckCount__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_FailedPredicatesCheckCount, nameof(FailedPredicatesCheckCount), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, FailedPredicatesCheckCount__Changed);
            }

            if (NeedFireEvent(15) && ActivationsCount__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ActivationsCount, nameof(ActivationsCount), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ActivationsCount__Changed);
            }

            if (NeedFireEvent(16) && DeactivationsCount__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 16;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_DeactivationsCount, nameof(DeactivationsCount), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, DeactivationsCount__Changed);
            }

            if (NeedFireEvent(17) && SuccesfullActivationsCount__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 17;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SuccesfullActivationsCount, nameof(SuccesfullActivationsCount), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SuccesfullActivationsCount__Changed);
            }

            if (NeedFireEvent(18) && SubSpells__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 18;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SubSpells, nameof(SubSpells), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SubSpells__Changed);
            }

            if (NeedFireEvent(19) && Activations__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 19;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Activations, nameof(Activations), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Activations__Changed);
            }

            if (NeedFireEvent(20) && AccumulatedDelta__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 20;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AccumulatedDelta, nameof(AccumulatedDelta), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AccumulatedDelta__Changed);
            }

            if (NeedFireEvent(21) && LastTimeUpdated__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 21;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LastTimeUpdated, nameof(LastTimeUpdated), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LastTimeUpdated__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                SubSpell = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Spell = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                ActivationsPerWord = default;
            if (_ActivationsPerWord != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ActivationsPerWord).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                SuccesfullPredicatesCheckCount = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                FailedPredicatesCheckCount = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                ActivationsCount = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                DeactivationsCount = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                SuccesfullActivationsCount = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                SubSpells = default;
            if (_SubSpells != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SubSpells).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Activations = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                AccumulatedDelta = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                LastTimeUpdated = default;
        }
    }
}