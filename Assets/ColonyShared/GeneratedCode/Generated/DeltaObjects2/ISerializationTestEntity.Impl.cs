// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("SerializationTestEntity")]
    public partial class SerializationTestEntity : SharedCode.EntitySystem.BaseEntity, Assets.ColonyShared.SharedCode.Entities.Test.ISerializationTestEntity, ISerializationTestEntityImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public SerializationTestEntity()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                Value = default(int);
                TestProperty = new GeneratedCode.DeltaObjects.TestDeltaObject2();
                TestPropertyClientFull = new GeneratedCode.DeltaObjects.TestDeltaObject2();
                TestProperty2 = new GeneratedCode.DeltaObjects.TestDeltaObject2();
                TestProperty3 = new GeneratedCode.DeltaObjects.TestDeltaObject3();
                List1 = new SharedCode.EntitySystem.Delta.DeltaList<Assets.ColonyShared.SharedCode.Entities.Test.ITestDeltaObject2>();
                Dictionary1 = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, Assets.ColonyShared.SharedCode.Entities.Test.ITestDeltaObject2>();
                SimpleList1 = new SharedCode.EntitySystem.Delta.DeltaList<int>();
                SimpleDictionary1 = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, int>();
            }

            constructor();
        }

        public SerializationTestEntity(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                Value = default(int);
                TestProperty = new GeneratedCode.DeltaObjects.TestDeltaObject2();
                TestPropertyClientFull = new GeneratedCode.DeltaObjects.TestDeltaObject2();
                TestProperty2 = new GeneratedCode.DeltaObjects.TestDeltaObject2();
                TestProperty3 = new GeneratedCode.DeltaObjects.TestDeltaObject3();
                List1 = new SharedCode.EntitySystem.Delta.DeltaList<Assets.ColonyShared.SharedCode.Entities.Test.ITestDeltaObject2>();
                Dictionary1 = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, Assets.ColonyShared.SharedCode.Entities.Test.ITestDeltaObject2>();
                SimpleList1 = new SharedCode.EntitySystem.Delta.DeltaList<int>();
                SimpleDictionary1 = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, int>();
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_TestProperty != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestProperty).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_TestPropertyClientFull != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestPropertyClientFull).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_TestProperty2 != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestProperty2).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_TestProperty3 != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestProperty3).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_List1 != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_List1).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_Dictionary1 != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Dictionary1).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_SimpleList1 != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_SimpleList1).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_SimpleDictionary1 != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_SimpleDictionary1).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if (_LinkedEntityServer != null && ((long)SharedCode.EntitySystem.ReplicationLevel.Server & replicationMask) == (long)SharedCode.EntitySystem.ReplicationLevel.Server && (!onlyDbEntities || GeneratedCode.EntitySystem.DeltaObjectHelper.DbEntity(_LinkedEntityServer)))
                entities.Add((currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, _LinkedEntityServer));
            if (_LinkedEntityClientFull != null && ((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & replicationMask) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull && (!onlyDbEntities || GeneratedCode.EntitySystem.DeltaObjectHelper.DbEntity(_LinkedEntityClientFull)))
                entities.Add((currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, _LinkedEntityClientFull));
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void LinkEntityRefs(SharedCode.EntitySystem.IEntitiesRepository repository)
        {
            base.LinkEntityRefs(repository);
            LinkedEntityServer = GeneratedCode.EntitySystem.DeltaObjectHelper.LinkEntityRef(GetType(), LinkedEntityServer, nameof(LinkedEntityServer), repository);
            LinkedEntityClientFull = GeneratedCode.EntitySystem.DeltaObjectHelper.LinkEntityRef(GetType(), LinkedEntityClientFull, nameof(LinkedEntityClientFull), repository);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestProperty, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestPropertyClientFull, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestProperty2, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestProperty3, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _List1, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Dictionary1, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _SimpleList1, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _SimpleDictionary1, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestProperty, 11, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestPropertyClientFull, 12, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestProperty2, 13, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestProperty3, 14, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _List1, 15, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Dictionary1, 16, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _SimpleList1, 17, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _SimpleDictionary1, 18, false, SharedCode.EntitySystem.ReplicationLevel.Server);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestPropertyClientFull)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty2)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty3)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_List1)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Dictionary1)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SimpleList1)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SimpleDictionary1)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestProperty, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestPropertyClientFull, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestProperty2, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestProperty3, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _List1, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Dictionary1, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _SimpleList1, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _SimpleDictionary1, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize((SharedCode.EntitySystem.IEntitiesRepositoryExtension)EntitiesRepository, parentEntity, _LinkedEntityServer, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize((SharedCode.EntitySystem.IEntitiesRepositoryExtension)EntitiesRepository, parentEntity, _LinkedEntityClientFull, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestPropertyClientFull)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty2)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty3)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_List1)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Dictionary1)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SimpleList1)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SimpleDictionary1)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Value":
                    Value__Changed += callback;
                    break;
                case "TestProperty":
                    TestProperty__Changed += callback;
                    break;
                case "TestPropertyClientFull":
                    TestPropertyClientFull__Changed += callback;
                    break;
                case "TestProperty2":
                    TestProperty2__Changed += callback;
                    break;
                case "TestProperty3":
                    TestProperty3__Changed += callback;
                    break;
                case "List1":
                    List1__Changed += callback;
                    break;
                case "Dictionary1":
                    Dictionary1__Changed += callback;
                    break;
                case "SimpleList1":
                    SimpleList1__Changed += callback;
                    break;
                case "SimpleDictionary1":
                    SimpleDictionary1__Changed += callback;
                    break;
                case "LinkedEntityServer":
                    LinkedEntityServer__Changed += callback;
                    break;
                case "LinkedEntityClientFull":
                    LinkedEntityClientFull__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Value":
                    Value__Changed -= callback;
                    break;
                case "TestProperty":
                    TestProperty__Changed -= callback;
                    break;
                case "TestPropertyClientFull":
                    TestPropertyClientFull__Changed -= callback;
                    break;
                case "TestProperty2":
                    TestProperty2__Changed -= callback;
                    break;
                case "TestProperty3":
                    TestProperty3__Changed -= callback;
                    break;
                case "List1":
                    List1__Changed -= callback;
                    break;
                case "Dictionary1":
                    Dictionary1__Changed -= callback;
                    break;
                case "SimpleList1":
                    SimpleList1__Changed -= callback;
                    break;
                case "SimpleDictionary1":
                    SimpleDictionary1__Changed -= callback;
                    break;
                case "LinkedEntityServer":
                    LinkedEntityServer__Changed -= callback;
                    break;
                case "LinkedEntityClientFull":
                    LinkedEntityClientFull__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "Value":
                    Value__Changed = null;
                    break;
                case "TestProperty":
                    TestProperty__Changed = null;
                    break;
                case "TestPropertyClientFull":
                    TestPropertyClientFull__Changed = null;
                    break;
                case "TestProperty2":
                    TestProperty2__Changed = null;
                    break;
                case "TestProperty3":
                    TestProperty3__Changed = null;
                    break;
                case "List1":
                    List1__Changed = null;
                    break;
                case "Dictionary1":
                    Dictionary1__Changed = null;
                    break;
                case "SimpleList1":
                    SimpleList1__Changed = null;
                    break;
                case "SimpleDictionary1":
                    SimpleDictionary1__Changed = null;
                    break;
                case "LinkedEntityServer":
                    LinkedEntityServer__Changed = null;
                    break;
                case "LinkedEntityClientFull":
                    LinkedEntityClientFull__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            Value__Changed = null;
            TestProperty__Changed = null;
            TestPropertyClientFull__Changed = null;
            TestProperty2__Changed = null;
            TestProperty3__Changed = null;
            List1__Changed = null;
            Dictionary1__Changed = null;
            SimpleList1__Changed = null;
            SimpleDictionary1__Changed = null;
            LinkedEntityServer__Changed = null;
            LinkedEntityClientFull__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && Value__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Value, nameof(Value), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Value__Changed);
            }

            if (NeedFireEvent(11) && TestProperty__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestProperty, nameof(TestProperty), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestProperty__Changed);
            }

            if (NeedFireEvent(12) && TestPropertyClientFull__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestPropertyClientFull, nameof(TestPropertyClientFull), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestPropertyClientFull__Changed);
            }

            if (NeedFireEvent(13) && TestProperty2__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestProperty2, nameof(TestProperty2), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestProperty2__Changed);
            }

            if (NeedFireEvent(14) && TestProperty3__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestProperty3, nameof(TestProperty3), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestProperty3__Changed);
            }

            if (NeedFireEvent(15) && List1__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_List1, nameof(List1), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, List1__Changed);
            }

            if (NeedFireEvent(16) && Dictionary1__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 16;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Dictionary1, nameof(Dictionary1), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Dictionary1__Changed);
            }

            if (NeedFireEvent(17) && SimpleList1__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 17;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SimpleList1, nameof(SimpleList1), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SimpleList1__Changed);
            }

            if (NeedFireEvent(18) && SimpleDictionary1__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 18;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SimpleDictionary1, nameof(SimpleDictionary1), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SimpleDictionary1__Changed);
            }

            if (NeedFireEvent(19) && LinkedEntityServer__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 19;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LinkedEntityServer, nameof(LinkedEntityServer), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LinkedEntityServer__Changed);
            }

            if (NeedFireEvent(20) && LinkedEntityClientFull__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 20;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LinkedEntityClientFull, nameof(LinkedEntityClientFull), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LinkedEntityClientFull__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                Value = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                TestProperty = default;
            if (_TestProperty != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                TestPropertyClientFull = default;
            if (_TestPropertyClientFull != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestPropertyClientFull).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                TestProperty2 = default;
            if (_TestProperty2 != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty2).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                TestProperty3 = default;
            if (_TestProperty3 != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty3).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                List1 = default;
            if (_List1 != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_List1).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                Dictionary1 = default;
            if (_Dictionary1 != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Dictionary1).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                SimpleList1 = default;
            if (_SimpleList1 != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SimpleList1).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                SimpleDictionary1 = default;
            if (_SimpleDictionary1 != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SimpleDictionary1).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                LinkedEntityServer = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                LinkedEntityClientFull = default;
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("SerializationTestEntity2")]
    public partial class SerializationTestEntity2 : SharedCode.EntitySystem.BaseEntity, Assets.ColonyShared.SharedCode.Entities.Test.ISerializationTestEntity2, ISerializationTestEntity2ImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public SerializationTestEntity2()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                TestProperty = new GeneratedCode.DeltaObjects.TestDeltaObject2();
                Value = default(int);
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
            }

            constructor();
        }

        public SerializationTestEntity2(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                TestProperty = new GeneratedCode.DeltaObjects.TestDeltaObject2();
                Value = default(int);
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_TestProperty != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestProperty).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if (_LinkedEntityServer != null && ((long)SharedCode.EntitySystem.ReplicationLevel.Server & replicationMask) == (long)SharedCode.EntitySystem.ReplicationLevel.Server && (!onlyDbEntities || GeneratedCode.EntitySystem.DeltaObjectHelper.DbEntity(_LinkedEntityServer)))
                entities.Add((currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, _LinkedEntityServer));
            if (_LinkedEntityClientFull != null && ((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & replicationMask) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull && (!onlyDbEntities || GeneratedCode.EntitySystem.DeltaObjectHelper.DbEntity(_LinkedEntityClientFull)))
                entities.Add((currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, _LinkedEntityClientFull));
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_OwnerInformation != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_OwnerInformation).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void LinkEntityRefs(SharedCode.EntitySystem.IEntitiesRepository repository)
        {
            base.LinkEntityRefs(repository);
            LinkedEntityServer = GeneratedCode.EntitySystem.DeltaObjectHelper.LinkEntityRef(GetType(), LinkedEntityServer, nameof(LinkedEntityServer), repository);
            LinkedEntityClientFull = GeneratedCode.EntitySystem.DeltaObjectHelper.LinkEntityRef(GetType(), LinkedEntityClientFull, nameof(LinkedEntityClientFull), repository);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestProperty, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _OwnerInformation, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestProperty, 10, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _OwnerInformation, 14, false, SharedCode.EntitySystem.ReplicationLevel.Always);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestProperty, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize((SharedCode.EntitySystem.IEntitiesRepositoryExtension)EntitiesRepository, parentEntity, _LinkedEntityServer, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize((SharedCode.EntitySystem.IEntitiesRepositoryExtension)EntitiesRepository, parentEntity, _LinkedEntityClientFull, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _OwnerInformation, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "TestProperty":
                    TestProperty__Changed += callback;
                    break;
                case "Value":
                    Value__Changed += callback;
                    break;
                case "LinkedEntityServer":
                    LinkedEntityServer__Changed += callback;
                    break;
                case "LinkedEntityClientFull":
                    LinkedEntityClientFull__Changed += callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "TestProperty":
                    TestProperty__Changed -= callback;
                    break;
                case "Value":
                    Value__Changed -= callback;
                    break;
                case "LinkedEntityServer":
                    LinkedEntityServer__Changed -= callback;
                    break;
                case "LinkedEntityClientFull":
                    LinkedEntityClientFull__Changed -= callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "TestProperty":
                    TestProperty__Changed = null;
                    break;
                case "Value":
                    Value__Changed = null;
                    break;
                case "LinkedEntityServer":
                    LinkedEntityServer__Changed = null;
                    break;
                case "LinkedEntityClientFull":
                    LinkedEntityClientFull__Changed = null;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            TestProperty__Changed = null;
            Value__Changed = null;
            LinkedEntityServer__Changed = null;
            LinkedEntityClientFull__Changed = null;
            OwnerInformation__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && TestProperty__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestProperty, nameof(TestProperty), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestProperty__Changed);
            }

            if (NeedFireEvent(11) && Value__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Value, nameof(Value), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Value__Changed);
            }

            if (NeedFireEvent(12) && LinkedEntityServer__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LinkedEntityServer, nameof(LinkedEntityServer), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LinkedEntityServer__Changed);
            }

            if (NeedFireEvent(13) && LinkedEntityClientFull__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LinkedEntityClientFull, nameof(LinkedEntityClientFull), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LinkedEntityClientFull__Changed);
            }

            if (NeedFireEvent(14) && OwnerInformation__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OwnerInformation, nameof(OwnerInformation), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OwnerInformation__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                TestProperty = default;
            if (_TestProperty != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                Value = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                LinkedEntityServer = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                LinkedEntityClientFull = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                OwnerInformation = default;
            if (_OwnerInformation != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation).Downgrade(mask);
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("SerializationTestEntity3")]
    public partial class SerializationTestEntity3 : SharedCode.EntitySystem.BaseEntity, Assets.ColonyShared.SharedCode.Entities.Test.ISerializationTestEntity3
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public SerializationTestEntity3()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                TestProperty = new GeneratedCode.DeltaObjects.TestDeltaObject2();
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
            }

            constructor();
        }

        public SerializationTestEntity3(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                TestProperty = new GeneratedCode.DeltaObjects.TestDeltaObject2();
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_TestProperty != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestProperty).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_OwnerInformation != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_OwnerInformation).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestProperty, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _OwnerInformation, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestProperty, 10, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _OwnerInformation, 11, false, SharedCode.EntitySystem.ReplicationLevel.Always);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestProperty, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _OwnerInformation, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "TestProperty":
                    TestProperty__Changed += callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "TestProperty":
                    TestProperty__Changed -= callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "TestProperty":
                    TestProperty__Changed = null;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            TestProperty__Changed = null;
            OwnerInformation__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && TestProperty__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestProperty, nameof(TestProperty), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestProperty__Changed);
            }

            if (NeedFireEvent(11) && OwnerInformation__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OwnerInformation, nameof(OwnerInformation), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OwnerInformation__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                TestProperty = default;
            if (_TestProperty != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                OwnerInformation = default;
            if (_OwnerInformation != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation).Downgrade(mask);
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("TestDeltaObject2")]
    public partial class TestDeltaObject2 : SharedCode.EntitySystem.BaseDeltaObject, Assets.ColonyShared.SharedCode.Entities.Test.ITestDeltaObject2, ITestDeltaObject2ImplementRemoteMethods
    {
        public TestDeltaObject2()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                Test = new GeneratedCode.DeltaObjects.TestDeltaObject3();
                TestClientFull = new GeneratedCode.DeltaObjects.TestDeltaObject3();
                Test2 = new GeneratedCode.DeltaObjects.TestDeltaObject3();
                EntityDictionaryTest = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, SharedCode.Refs.EntityRef<Assets.ColonyShared.SharedCode.Entities.Test.ISerializationTestEntity2>>();
                EntityListTest = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Refs.EntityRef<Assets.ColonyShared.SharedCode.Entities.Test.ISerializationTestEntity2>>();
                List1 = new SharedCode.EntitySystem.Delta.DeltaList<Assets.ColonyShared.SharedCode.Entities.Test.ITestDeltaObject3>();
                Dictionary1 = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, Assets.ColonyShared.SharedCode.Entities.Test.ITestDeltaObject3>();
                ClientBroadcastValue = default(int);
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_Test != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Test).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_TestClientFull != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestClientFull).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_Test2 != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Test2).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if (_EntityTestServer != null && ((long)SharedCode.EntitySystem.ReplicationLevel.Server & replicationMask) == (long)SharedCode.EntitySystem.ReplicationLevel.Server && (!onlyDbEntities || GeneratedCode.EntitySystem.DeltaObjectHelper.DbEntity(_EntityTestServer)))
                entities.Add((currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, _EntityTestServer));
            if (_EntityTestClientFull != null && ((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & replicationMask) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull && (!onlyDbEntities || GeneratedCode.EntitySystem.DeltaObjectHelper.DbEntity(_EntityTestClientFull)))
                entities.Add((currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, _EntityTestClientFull));
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_EntityDictionaryTest != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_EntityDictionaryTest).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_EntityListTest != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_EntityListTest).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_List1 != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_List1).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_Dictionary1 != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Dictionary1).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void LinkEntityRefs(SharedCode.EntitySystem.IEntitiesRepository repository)
        {
            base.LinkEntityRefs(repository);
            EntityTestServer = GeneratedCode.EntitySystem.DeltaObjectHelper.LinkEntityRef(GetType(), EntityTestServer, nameof(EntityTestServer), repository);
            EntityTestClientFull = GeneratedCode.EntitySystem.DeltaObjectHelper.LinkEntityRef(GetType(), EntityTestClientFull, nameof(EntityTestClientFull), repository);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Test, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestClientFull, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Test2, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _EntityDictionaryTest, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _EntityListTest, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _List1, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Dictionary1, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Test, 10, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestClientFull, 11, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Test2, 12, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _EntityDictionaryTest, 15, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _EntityListTest, 16, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _List1, 17, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Dictionary1, 18, false, SharedCode.EntitySystem.ReplicationLevel.Server);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Test)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestClientFull)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Test2)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_EntityDictionaryTest)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_EntityListTest)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_List1)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Dictionary1)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Test, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestClientFull, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Test2, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize((SharedCode.EntitySystem.IEntitiesRepositoryExtension)EntitiesRepository, parentEntity, _EntityTestServer, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize((SharedCode.EntitySystem.IEntitiesRepositoryExtension)EntitiesRepository, parentEntity, _EntityTestClientFull, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _EntityDictionaryTest, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _EntityListTest, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _List1, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Dictionary1, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Test)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestClientFull)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Test2)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_EntityDictionaryTest)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_EntityListTest)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_List1)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Dictionary1)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Test":
                    Test__Changed += callback;
                    break;
                case "TestClientFull":
                    TestClientFull__Changed += callback;
                    break;
                case "Test2":
                    Test2__Changed += callback;
                    break;
                case "EntityTestServer":
                    EntityTestServer__Changed += callback;
                    break;
                case "EntityTestClientFull":
                    EntityTestClientFull__Changed += callback;
                    break;
                case "EntityDictionaryTest":
                    EntityDictionaryTest__Changed += callback;
                    break;
                case "EntityListTest":
                    EntityListTest__Changed += callback;
                    break;
                case "List1":
                    List1__Changed += callback;
                    break;
                case "Dictionary1":
                    Dictionary1__Changed += callback;
                    break;
                case "ClientBroadcastValue":
                    ClientBroadcastValue__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Test":
                    Test__Changed -= callback;
                    break;
                case "TestClientFull":
                    TestClientFull__Changed -= callback;
                    break;
                case "Test2":
                    Test2__Changed -= callback;
                    break;
                case "EntityTestServer":
                    EntityTestServer__Changed -= callback;
                    break;
                case "EntityTestClientFull":
                    EntityTestClientFull__Changed -= callback;
                    break;
                case "EntityDictionaryTest":
                    EntityDictionaryTest__Changed -= callback;
                    break;
                case "EntityListTest":
                    EntityListTest__Changed -= callback;
                    break;
                case "List1":
                    List1__Changed -= callback;
                    break;
                case "Dictionary1":
                    Dictionary1__Changed -= callback;
                    break;
                case "ClientBroadcastValue":
                    ClientBroadcastValue__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "Test":
                    Test__Changed = null;
                    break;
                case "TestClientFull":
                    TestClientFull__Changed = null;
                    break;
                case "Test2":
                    Test2__Changed = null;
                    break;
                case "EntityTestServer":
                    EntityTestServer__Changed = null;
                    break;
                case "EntityTestClientFull":
                    EntityTestClientFull__Changed = null;
                    break;
                case "EntityDictionaryTest":
                    EntityDictionaryTest__Changed = null;
                    break;
                case "EntityListTest":
                    EntityListTest__Changed = null;
                    break;
                case "List1":
                    List1__Changed = null;
                    break;
                case "Dictionary1":
                    Dictionary1__Changed = null;
                    break;
                case "ClientBroadcastValue":
                    ClientBroadcastValue__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            Test__Changed = null;
            TestClientFull__Changed = null;
            Test2__Changed = null;
            EntityTestServer__Changed = null;
            EntityTestClientFull__Changed = null;
            EntityDictionaryTest__Changed = null;
            EntityListTest__Changed = null;
            List1__Changed = null;
            Dictionary1__Changed = null;
            ClientBroadcastValue__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && Test__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Test, nameof(Test), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Test__Changed);
            }

            if (NeedFireEvent(11) && TestClientFull__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestClientFull, nameof(TestClientFull), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestClientFull__Changed);
            }

            if (NeedFireEvent(12) && Test2__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Test2, nameof(Test2), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Test2__Changed);
            }

            if (NeedFireEvent(13) && EntityTestServer__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_EntityTestServer, nameof(EntityTestServer), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, EntityTestServer__Changed);
            }

            if (NeedFireEvent(14) && EntityTestClientFull__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_EntityTestClientFull, nameof(EntityTestClientFull), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, EntityTestClientFull__Changed);
            }

            if (NeedFireEvent(15) && EntityDictionaryTest__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_EntityDictionaryTest, nameof(EntityDictionaryTest), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, EntityDictionaryTest__Changed);
            }

            if (NeedFireEvent(16) && EntityListTest__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 16;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_EntityListTest, nameof(EntityListTest), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, EntityListTest__Changed);
            }

            if (NeedFireEvent(17) && List1__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 17;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_List1, nameof(List1), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, List1__Changed);
            }

            if (NeedFireEvent(18) && Dictionary1__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 18;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Dictionary1, nameof(Dictionary1), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Dictionary1__Changed);
            }

            if (NeedFireEvent(19) && ClientBroadcastValue__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 19;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ClientBroadcastValue, nameof(ClientBroadcastValue), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ClientBroadcastValue__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                Test = default;
            if (_Test != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Test).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                TestClientFull = default;
            if (_TestClientFull != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestClientFull).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                Test2 = default;
            if (_Test2 != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Test2).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                EntityTestServer = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                EntityTestClientFull = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                EntityDictionaryTest = default;
            if (_EntityDictionaryTest != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_EntityDictionaryTest).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                EntityListTest = default;
            if (_EntityListTest != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_EntityListTest).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                List1 = default;
            if (_List1 != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_List1).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                Dictionary1 = default;
            if (_Dictionary1 != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Dictionary1).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                ClientBroadcastValue = default;
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("TestDeltaObject3")]
    public partial class TestDeltaObject3 : SharedCode.EntitySystem.BaseDeltaObject, Assets.ColonyShared.SharedCode.Entities.Test.ITestDeltaObject3
    {
        public TestDeltaObject3()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                Test = default(int);
            }

            constructor();
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Test":
                    Test__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Test":
                    Test__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "Test":
                    Test__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            Test__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && Test__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Test, nameof(Test), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Test__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                Test = default;
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("SaveToDbEntityTest")]
    public partial class SaveToDbEntityTest : SharedCode.EntitySystem.BaseEntity, Assets.ColonyShared.SharedCode.Entities.Test.ISaveToDbEntityTest, ISaveToDbEntityTestImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public SaveToDbEntityTest()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                TestProperty = new GeneratedCode.DeltaObjects.TestDeltaObject2();
            }

            constructor();
        }

        public SaveToDbEntityTest(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                TestProperty = new GeneratedCode.DeltaObjects.TestDeltaObject2();
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_TestProperty != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestProperty).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestProperty, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestProperty, 10, false, SharedCode.EntitySystem.ReplicationLevel.Server);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestProperty, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "TestProperty":
                    TestProperty__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "TestProperty":
                    TestProperty__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "TestProperty":
                    TestProperty__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            TestProperty__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && TestProperty__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestProperty, nameof(TestProperty), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestProperty__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                TestProperty = default;
            if (_TestProperty != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestProperty).Downgrade(mask);
        }
    }
}