// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, 35350364, typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon))]
    public interface ISpawnDaemonAlways : SharedCode.EntitySystem.IEntity, IEntityObjectAlways, IHasMappedAlways, IScenicEntityAlways, IHasWorldSpacedAlways, IHasLinksEngineAlways, IHasSimpleMovementSyncAlways, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Entities.GameObjectEntities.SpawnDaemonSceneDef SceneDef
        {
            get;
        }

        System.Threading.Tasks.Task<bool> TryPlaceObjectNear(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef pointType, SharedCode.Entities.GameObjectEntities.IEntityObjectDef objDef, SharedCode.Utils.Vector3 pos, bool ignoreGeometry);
        System.Threading.Tasks.Task<bool> ActivateTemplatePointsBatch(System.Collections.Generic.List<SharedCode.Entities.GameObjectEntities.SpawnTemplateDef> def);
        System.Threading.Tasks.Task NotifyOfEntityDissipation(SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, System.Guid guid, int typeId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, 962010070, typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon))]
    public interface ISpawnDaemonClientBroadcast : SharedCode.EntitySystem.IEntity, IEntityObjectClientBroadcast, IHasMappedClientBroadcast, IScenicEntityClientBroadcast, IHasWorldSpacedClientBroadcast, IHasLinksEngineClientBroadcast, IHasSimpleMovementSyncClientBroadcast, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Entities.GameObjectEntities.SpawnDaemonSceneDef SceneDef
        {
            get;
        }

        System.Threading.Tasks.Task<bool> TryPlaceObjectNear(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef pointType, SharedCode.Entities.GameObjectEntities.IEntityObjectDef objDef, SharedCode.Utils.Vector3 pos, bool ignoreGeometry);
        System.Threading.Tasks.Task<bool> ActivateTemplatePointsBatch(System.Collections.Generic.List<SharedCode.Entities.GameObjectEntities.SpawnTemplateDef> def);
        System.Threading.Tasks.Task NotifyOfEntityDissipation(SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, System.Guid guid, int typeId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, -666958465, typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon))]
    public interface ISpawnDaemonClientFullApi : SharedCode.EntitySystem.IEntity, IEntityObjectClientFullApi, IHasMappedClientFullApi, IScenicEntityClientFullApi, IHasWorldSpacedClientFullApi, IHasLinksEngineClientFullApi, IHasSimpleMovementSyncClientFullApi, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, -1590884222, typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon))]
    public interface ISpawnDaemonClientFull : SharedCode.EntitySystem.IEntity, IEntityObjectClientFull, IHasMappedClientFull, IScenicEntityClientFull, IHasWorldSpacedClientFull, IHasLinksEngineClientFull, IHasSimpleMovementSyncClientFull, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Entities.GameObjectEntities.SpawnDaemonSceneDef SceneDef
        {
            get;
        }

        System.Threading.Tasks.Task<bool> TryPlaceObjectNear(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef pointType, SharedCode.Entities.GameObjectEntities.IEntityObjectDef objDef, SharedCode.Utils.Vector3 pos, bool ignoreGeometry);
        System.Threading.Tasks.Task<bool> ActivateTemplatePointsBatch(System.Collections.Generic.List<SharedCode.Entities.GameObjectEntities.SpawnTemplateDef> def);
        System.Threading.Tasks.Task NotifyOfEntityDissipation(SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, System.Guid guid, int typeId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, 1543347403, typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon))]
    public interface ISpawnDaemonServerApi : SharedCode.EntitySystem.IEntity, IEntityObjectServerApi, IHasMappedServerApi, IScenicEntityServerApi, IHasWorldSpacedServerApi, IHasLinksEngineServerApi, IHasSimpleMovementSyncServerApi, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, -2081761953, typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon))]
    public interface ISpawnDaemonServer : SharedCode.EntitySystem.IEntity, IEntityObjectServer, IHasMappedServer, IScenicEntityServer, IHasWorldSpacedServer, IHasLinksEngineServer, IHasSimpleMovementSyncServer, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Entities.GameObjectEntities.SpawnDaemonSceneDef SceneDef
        {
            get;
        }

        System.Threading.Tasks.Task<bool> NotifyOfObjectDestruction(System.Guid id, int typeId);
        System.Threading.Tasks.Task<bool> ResetDaemon();
        System.Threading.Tasks.Task<bool> TryPlaceObjectNear(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef pointType, SharedCode.Entities.GameObjectEntities.IEntityObjectDef objDef, SharedCode.Utils.Vector3 pos, bool ignoreGeometry);
        System.Threading.Tasks.Task<bool> ActivateTemplatePointsBatch(System.Collections.Generic.List<SharedCode.Entities.GameObjectEntities.SpawnTemplateDef> def);
        System.Threading.Tasks.Task NotifyOfEntityDissipation(SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, System.Guid guid, int typeId);
        System.Threading.Tasks.Task<bool> AwaitUnityThread();
    }
}