// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class ContainerApi
    {
        public Task<SharedCode.Entities.ContainerOperationAddPrepareResult> ContainerOperationMoveAddPrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, SharedCode.Entities.IItemWrapper itemWrapper, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveAddPrepareRunMaster(transactionId, address, slotId, itemWrapper, manual).AsTask();
                else
                    return ContainerOperationMoveAddPrepareRun(transactionId, address, slotId, itemWrapper, manual).AsTask();
            else
                return SendFuncs.ContainerOperationMoveAddPrepare(transactionId, address, slotId, itemWrapper, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.ContainerOperationAddPrepareResult>> ContainerOperationMoveAddPrepareCreateDeferredDelegate(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, SharedCode.Entities.IItemWrapper itemWrapper, bool manual) => () =>
        {
            return ContainerOperationMoveAddPrepare(transactionId, address, slotId, itemWrapper, manual);
        }

        ;
        public async ValueTask<SharedCode.Entities.ContainerOperationAddPrepareResult> ContainerOperationMoveAddPrepareRunMaster(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, SharedCode.Entities.IItemWrapper itemWrapper, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveAddPrepareCreateDeferredDelegate(transactionId, address, slotId, itemWrapper, manual), nameof(ContainerOperationMoveAddPrepare));
            }

            return await ContainerOperationMoveAddPrepareRun(transactionId, address, slotId, itemWrapper, manual);
        }

        public async ValueTask<SharedCode.Entities.ContainerOperationAddPrepareResult> ContainerOperationMoveAddPrepareRun(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, SharedCode.Entities.IItemWrapper itemWrapper, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveAddPrepare)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveAddPrepareImpl(transactionId, address, slotId, itemWrapper, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ContainerOperationMoveAddCommit(System.Guid transactionId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveAddCommitRunMaster(transactionId).AsTask();
                else
                    return ContainerOperationMoveAddCommitRun(transactionId).AsTask();
            else
                return SendFuncs.ContainerOperationMoveAddCommit(transactionId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ContainerOperationMoveAddCommitCreateDeferredDelegate(System.Guid transactionId) => () =>
        {
            return ContainerOperationMoveAddCommit(transactionId);
        }

        ;
        public async ValueTask<bool> ContainerOperationMoveAddCommitRunMaster(System.Guid transactionId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveAddCommitCreateDeferredDelegate(transactionId), nameof(ContainerOperationMoveAddCommit));
            }

            return await ContainerOperationMoveAddCommitRun(transactionId);
        }

        public async ValueTask<bool> ContainerOperationMoveAddCommitRun(System.Guid transactionId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveAddCommit)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveAddCommitImpl(transactionId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ContainerOperationMoveAddRollback(System.Guid transactionId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveAddRollbackRunMaster(transactionId).AsTask();
                else
                    return ContainerOperationMoveAddRollbackRun(transactionId).AsTask();
            else
                return SendFuncs.ContainerOperationMoveAddRollback(transactionId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ContainerOperationMoveAddRollbackCreateDeferredDelegate(System.Guid transactionId) => () =>
        {
            return ContainerOperationMoveAddRollback(transactionId);
        }

        ;
        public async ValueTask<bool> ContainerOperationMoveAddRollbackRunMaster(System.Guid transactionId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveAddRollbackCreateDeferredDelegate(transactionId), nameof(ContainerOperationMoveAddRollback));
            }

            return await ContainerOperationMoveAddRollbackRun(transactionId);
        }

        public async ValueTask<bool> ContainerOperationMoveAddRollbackRun(System.Guid transactionId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 2);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveAddRollback)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveAddRollbackImpl(transactionId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.ContainerOperationRemovePrepareResult> ContainerOperationMoveRemovePrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, int count, System.Guid clientSrcEntityId, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveRemovePrepareRunMaster(transactionId, address, slotId, count, clientSrcEntityId, manual).AsTask();
                else
                    return ContainerOperationMoveRemovePrepareRun(transactionId, address, slotId, count, clientSrcEntityId, manual).AsTask();
            else
                return SendFuncs.ContainerOperationMoveRemovePrepare(transactionId, address, slotId, count, clientSrcEntityId, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.ContainerOperationRemovePrepareResult>> ContainerOperationMoveRemovePrepareCreateDeferredDelegate(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, int count, System.Guid clientSrcEntityId, bool manual) => () =>
        {
            return ContainerOperationMoveRemovePrepare(transactionId, address, slotId, count, clientSrcEntityId, manual);
        }

        ;
        public async ValueTask<SharedCode.Entities.ContainerOperationRemovePrepareResult> ContainerOperationMoveRemovePrepareRunMaster(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, int count, System.Guid clientSrcEntityId, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveRemovePrepareCreateDeferredDelegate(transactionId, address, slotId, count, clientSrcEntityId, manual), nameof(ContainerOperationMoveRemovePrepare));
            }

            return await ContainerOperationMoveRemovePrepareRun(transactionId, address, slotId, count, clientSrcEntityId, manual);
        }

        public async ValueTask<SharedCode.Entities.ContainerOperationRemovePrepareResult> ContainerOperationMoveRemovePrepareRun(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, int count, System.Guid clientSrcEntityId, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 3);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveRemovePrepare)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveRemovePrepareImpl(transactionId, address, slotId, count, clientSrcEntityId, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveRemoveCommit(System.Guid transactionId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveRemoveCommitRunMaster(transactionId).AsTask();
                else
                    return ContainerOperationMoveRemoveCommitRun(transactionId).AsTask();
            else
                return SendFuncs.ContainerOperationMoveRemoveCommit(transactionId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation>> ContainerOperationMoveRemoveCommitCreateDeferredDelegate(System.Guid transactionId) => () =>
        {
            return ContainerOperationMoveRemoveCommit(transactionId);
        }

        ;
        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveRemoveCommitRunMaster(System.Guid transactionId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveRemoveCommitCreateDeferredDelegate(transactionId), nameof(ContainerOperationMoveRemoveCommit));
            }

            return await ContainerOperationMoveRemoveCommitRun(transactionId);
        }

        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveRemoveCommitRun(System.Guid transactionId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 4);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveRemoveCommit)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveRemoveCommitImpl(transactionId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ContainerOperationMoveRemoveRollback(System.Guid transactionId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveRemoveRollbackRunMaster(transactionId).AsTask();
                else
                    return ContainerOperationMoveRemoveRollbackRun(transactionId).AsTask();
            else
                return SendFuncs.ContainerOperationMoveRemoveRollback(transactionId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ContainerOperationMoveRemoveRollbackCreateDeferredDelegate(System.Guid transactionId) => () =>
        {
            return ContainerOperationMoveRemoveRollback(transactionId);
        }

        ;
        public async ValueTask<bool> ContainerOperationMoveRemoveRollbackRunMaster(System.Guid transactionId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveRemoveRollbackCreateDeferredDelegate(transactionId), nameof(ContainerOperationMoveRemoveRollback));
            }

            return await ContainerOperationMoveRemoveRollbackRun(transactionId);
        }

        public async ValueTask<bool> ContainerOperationMoveRemoveRollbackRun(System.Guid transactionId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 5);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveRemoveRollback)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveRemoveRollbackImpl(transactionId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.ContainerOperationMoveAllAddPrepareResult> ContainerOperationMoveAllAddPrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers, bool manual, bool sameSlots)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveAllAddPrepareRunMaster(transactionId, address, itemWrappers, manual, sameSlots).AsTask();
                else
                    return ContainerOperationMoveAllAddPrepareRun(transactionId, address, itemWrappers, manual, sameSlots).AsTask();
            else
                return SendFuncs.ContainerOperationMoveAllAddPrepare(transactionId, address, itemWrappers, manual, sameSlots, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.ContainerOperationMoveAllAddPrepareResult>> ContainerOperationMoveAllAddPrepareCreateDeferredDelegate(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers, bool manual, bool sameSlots) => () =>
        {
            return ContainerOperationMoveAllAddPrepare(transactionId, address, itemWrappers, manual, sameSlots);
        }

        ;
        public async ValueTask<SharedCode.Entities.ContainerOperationMoveAllAddPrepareResult> ContainerOperationMoveAllAddPrepareRunMaster(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers, bool manual, bool sameSlots)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveAllAddPrepareCreateDeferredDelegate(transactionId, address, itemWrappers, manual, sameSlots), nameof(ContainerOperationMoveAllAddPrepare));
            }

            return await ContainerOperationMoveAllAddPrepareRun(transactionId, address, itemWrappers, manual, sameSlots);
        }

        public async ValueTask<SharedCode.Entities.ContainerOperationMoveAllAddPrepareResult> ContainerOperationMoveAllAddPrepareRun(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers, bool manual, bool sameSlots)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 6);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveAllAddPrepare)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveAllAddPrepareImpl(transactionId, address, itemWrappers, manual, sameSlots);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ContainerOperationMoveAllAddCommit(System.Guid transactionId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveAllAddCommitRunMaster(transactionId).AsTask();
                else
                    return ContainerOperationMoveAllAddCommitRun(transactionId).AsTask();
            else
                return SendFuncs.ContainerOperationMoveAllAddCommit(transactionId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ContainerOperationMoveAllAddCommitCreateDeferredDelegate(System.Guid transactionId) => () =>
        {
            return ContainerOperationMoveAllAddCommit(transactionId);
        }

        ;
        public async ValueTask<bool> ContainerOperationMoveAllAddCommitRunMaster(System.Guid transactionId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveAllAddCommitCreateDeferredDelegate(transactionId), nameof(ContainerOperationMoveAllAddCommit));
            }

            return await ContainerOperationMoveAllAddCommitRun(transactionId);
        }

        public async ValueTask<bool> ContainerOperationMoveAllAddCommitRun(System.Guid transactionId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 7);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveAllAddCommit)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveAllAddCommitImpl(transactionId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ContainerOperationMoveAllAddRollback(System.Guid transactionId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveAllAddRollbackRunMaster(transactionId).AsTask();
                else
                    return ContainerOperationMoveAllAddRollbackRun(transactionId).AsTask();
            else
                return SendFuncs.ContainerOperationMoveAllAddRollback(transactionId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ContainerOperationMoveAllAddRollbackCreateDeferredDelegate(System.Guid transactionId) => () =>
        {
            return ContainerOperationMoveAllAddRollback(transactionId);
        }

        ;
        public async ValueTask<bool> ContainerOperationMoveAllAddRollbackRunMaster(System.Guid transactionId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveAllAddRollbackCreateDeferredDelegate(transactionId), nameof(ContainerOperationMoveAllAddRollback));
            }

            return await ContainerOperationMoveAllAddRollbackRun(transactionId);
        }

        public async ValueTask<bool> ContainerOperationMoveAllAddRollbackRun(System.Guid transactionId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 8);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveAllAddRollback)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveAllAddRollbackImpl(transactionId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.ContainerOperationMoveAllRemovePrepareResult> ContainerOperationMoveAllRemovePrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveAllRemovePrepareRunMaster(transactionId, address, manual).AsTask();
                else
                    return ContainerOperationMoveAllRemovePrepareRun(transactionId, address, manual).AsTask();
            else
                return SendFuncs.ContainerOperationMoveAllRemovePrepare(transactionId, address, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.ContainerOperationMoveAllRemovePrepareResult>> ContainerOperationMoveAllRemovePrepareCreateDeferredDelegate(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, bool manual) => () =>
        {
            return ContainerOperationMoveAllRemovePrepare(transactionId, address, manual);
        }

        ;
        public async ValueTask<SharedCode.Entities.ContainerOperationMoveAllRemovePrepareResult> ContainerOperationMoveAllRemovePrepareRunMaster(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveAllRemovePrepareCreateDeferredDelegate(transactionId, address, manual), nameof(ContainerOperationMoveAllRemovePrepare));
            }

            return await ContainerOperationMoveAllRemovePrepareRun(transactionId, address, manual);
        }

        public async ValueTask<SharedCode.Entities.ContainerOperationMoveAllRemovePrepareResult> ContainerOperationMoveAllRemovePrepareRun(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 9);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveAllRemovePrepare)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveAllRemovePrepareImpl(transactionId, address, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ContainerOperationMoveAllRemoveCommit(System.Guid transactionId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveAllRemoveCommitRunMaster(transactionId).AsTask();
                else
                    return ContainerOperationMoveAllRemoveCommitRun(transactionId).AsTask();
            else
                return SendFuncs.ContainerOperationMoveAllRemoveCommit(transactionId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ContainerOperationMoveAllRemoveCommitCreateDeferredDelegate(System.Guid transactionId) => () =>
        {
            return ContainerOperationMoveAllRemoveCommit(transactionId);
        }

        ;
        public async ValueTask<bool> ContainerOperationMoveAllRemoveCommitRunMaster(System.Guid transactionId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveAllRemoveCommitCreateDeferredDelegate(transactionId), nameof(ContainerOperationMoveAllRemoveCommit));
            }

            return await ContainerOperationMoveAllRemoveCommitRun(transactionId);
        }

        public async ValueTask<bool> ContainerOperationMoveAllRemoveCommitRun(System.Guid transactionId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 10);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveAllRemoveCommit)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveAllRemoveCommitImpl(transactionId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ContainerOperationMoveAllRemoveRollback(System.Guid transactionId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveAllRemoveRollbackRunMaster(transactionId).AsTask();
                else
                    return ContainerOperationMoveAllRemoveRollbackRun(transactionId).AsTask();
            else
                return SendFuncs.ContainerOperationMoveAllRemoveRollback(transactionId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ContainerOperationMoveAllRemoveRollbackCreateDeferredDelegate(System.Guid transactionId) => () =>
        {
            return ContainerOperationMoveAllRemoveRollback(transactionId);
        }

        ;
        public async ValueTask<bool> ContainerOperationMoveAllRemoveRollbackRunMaster(System.Guid transactionId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveAllRemoveRollbackCreateDeferredDelegate(transactionId), nameof(ContainerOperationMoveAllRemoveRollback));
            }

            return await ContainerOperationMoveAllRemoveRollbackRun(transactionId);
        }

        public async ValueTask<bool> ContainerOperationMoveAllRemoveRollbackRun(System.Guid transactionId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 11);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveAllRemoveRollback)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveAllRemoveRollbackImpl(transactionId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveChangePrepare(System.Guid transactionId, SharedCode.Entities.IItemWrapper itemWrapper)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveChangePrepareRunMaster(transactionId, itemWrapper).AsTask();
                else
                    return ContainerOperationMoveChangePrepareRun(transactionId, itemWrapper).AsTask();
            else
                return SendFuncs.ContainerOperationMoveChangePrepare(transactionId, itemWrapper, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation>> ContainerOperationMoveChangePrepareCreateDeferredDelegate(System.Guid transactionId, SharedCode.Entities.IItemWrapper itemWrapper) => () =>
        {
            return ContainerOperationMoveChangePrepare(transactionId, itemWrapper);
        }

        ;
        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveChangePrepareRunMaster(System.Guid transactionId, SharedCode.Entities.IItemWrapper itemWrapper)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveChangePrepareCreateDeferredDelegate(transactionId, itemWrapper), nameof(ContainerOperationMoveChangePrepare));
            }

            return await ContainerOperationMoveChangePrepareRun(transactionId, itemWrapper);
        }

        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveChangePrepareRun(System.Guid transactionId, SharedCode.Entities.IItemWrapper itemWrapper)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 12);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveChangePrepare)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveChangePrepareImpl(transactionId, itemWrapper);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddNewItem(SharedCode.Entities.IItemWrapper itemWrapper, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationAddNewItemRunMaster(itemWrapper, destination, destinationSlotId, manual).AsTask();
                else
                    return ContainerOperationAddNewItemRun(itemWrapper, destination, destinationSlotId, manual).AsTask();
            else
                return SendFuncs.ContainerOperationAddNewItem(itemWrapper, destination, destinationSlotId, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation>> ContainerOperationAddNewItemCreateDeferredDelegate(SharedCode.Entities.IItemWrapper itemWrapper, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, bool manual) => () =>
        {
            return ContainerOperationAddNewItem(itemWrapper, destination, destinationSlotId, manual);
        }

        ;
        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddNewItemRunMaster(SharedCode.Entities.IItemWrapper itemWrapper, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationAddNewItemCreateDeferredDelegate(itemWrapper, destination, destinationSlotId, manual), nameof(ContainerOperationAddNewItem));
            }

            return await ContainerOperationAddNewItemRun(itemWrapper, destination, destinationSlotId, manual);
        }

        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddNewItemRun(SharedCode.Entities.IItemWrapper itemWrapper, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 13);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationAddNewItem)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationAddNewItemImpl(itemWrapper, destination, destinationSlotId, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> itemResourcesToAdd, SharedCode.EntitySystem.PropertyAddress destination, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationAddItemsRunMaster(itemResourcesToAdd, destination, manual).AsTask();
                else
                    return ContainerOperationAddItemsRun(itemResourcesToAdd, destination, manual).AsTask();
            else
                return SendFuncs.ContainerOperationAddItems(itemResourcesToAdd, destination, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation>> ContainerOperationAddItemsCreateDeferredDelegate(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> itemResourcesToAdd, SharedCode.EntitySystem.PropertyAddress destination, bool manual) => () =>
        {
            return ContainerOperationAddItems(itemResourcesToAdd, destination, manual);
        }

        ;
        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddItemsRunMaster(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> itemResourcesToAdd, SharedCode.EntitySystem.PropertyAddress destination, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationAddItemsCreateDeferredDelegate(itemResourcesToAdd, destination, manual), nameof(ContainerOperationAddItems));
            }

            return await ContainerOperationAddItemsRun(itemResourcesToAdd, destination, manual);
        }

        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddItemsRun(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> itemResourcesToAdd, SharedCode.EntitySystem.PropertyAddress destination, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 14);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationAddItems)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationAddItemsImpl(itemResourcesToAdd, destination, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationRemoveBatchItem(System.Collections.Generic.List<SharedCode.Entities.RemoveItemBatchElement> items, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationRemoveBatchItemRunMaster(items, manual).AsTask();
                else
                    return ContainerOperationRemoveBatchItemRun(items, manual).AsTask();
            else
                return SendFuncs.ContainerOperationRemoveBatchItem(items, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation>> ContainerOperationRemoveBatchItemCreateDeferredDelegate(System.Collections.Generic.List<SharedCode.Entities.RemoveItemBatchElement> items, bool manual) => () =>
        {
            return ContainerOperationRemoveBatchItem(items, manual);
        }

        ;
        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationRemoveBatchItemRunMaster(System.Collections.Generic.List<SharedCode.Entities.RemoveItemBatchElement> items, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationRemoveBatchItemCreateDeferredDelegate(items, manual), nameof(ContainerOperationRemoveBatchItem));
            }

            return await ContainerOperationRemoveBatchItemRun(items, manual);
        }

        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationRemoveBatchItemRun(System.Collections.Generic.List<SharedCode.Entities.RemoveItemBatchElement> items, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 15);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationRemoveBatchItem)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationRemoveBatchItemImpl(items, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveAllChangePrepare(System.Guid transactionId, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationMoveAllChangePrepareRunMaster(transactionId, itemWrappers).AsTask();
                else
                    return ContainerOperationMoveAllChangePrepareRun(transactionId, itemWrappers).AsTask();
            else
                return SendFuncs.ContainerOperationMoveAllChangePrepare(transactionId, itemWrappers, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation>> ContainerOperationMoveAllChangePrepareCreateDeferredDelegate(System.Guid transactionId, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers) => () =>
        {
            return ContainerOperationMoveAllChangePrepare(transactionId, itemWrappers);
        }

        ;
        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveAllChangePrepareRunMaster(System.Guid transactionId, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationMoveAllChangePrepareCreateDeferredDelegate(transactionId, itemWrappers), nameof(ContainerOperationMoveAllChangePrepare));
            }

            return await ContainerOperationMoveAllChangePrepareRun(transactionId, itemWrappers);
        }

        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveAllChangePrepareRun(System.Guid transactionId, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 16);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationMoveAllChangePrepare)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationMoveAllChangePrepareImpl(transactionId, itemWrappers);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.EntitySystem.PropertyAddress> ContainerOperationSetSize(SharedCode.EntitySystem.PropertyAddress address, int size)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainerOperationSetSizeRunMaster(address, size).AsTask();
                else
                    return ContainerOperationSetSizeRun(address, size).AsTask();
            else
                return SendFuncs.ContainerOperationSetSize(address, size, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.EntitySystem.PropertyAddress>> ContainerOperationSetSizeCreateDeferredDelegate(SharedCode.EntitySystem.PropertyAddress address, int size) => () =>
        {
            return ContainerOperationSetSize(address, size);
        }

        ;
        public async ValueTask<SharedCode.EntitySystem.PropertyAddress> ContainerOperationSetSizeRunMaster(SharedCode.EntitySystem.PropertyAddress address, int size)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainerOperationSetSizeCreateDeferredDelegate(address, size), nameof(ContainerOperationSetSize));
            }

            return await ContainerOperationSetSizeRun(address, size);
        }

        public async ValueTask<SharedCode.EntitySystem.PropertyAddress> ContainerOperationSetSizeRun(SharedCode.EntitySystem.PropertyAddress address, int size)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 17);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ContainerOperationSetSize)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ContainerOperationSetSizeImpl(address, size);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> Drop(SharedCode.EntitySystem.PropertyAddress address, int slotId, int stackCount)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return DropRunMaster(address, slotId, stackCount).AsTask();
                else
                    return DropRun(address, slotId, stackCount).AsTask();
            else
                return SendFuncs.Drop(address, slotId, stackCount, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation>> DropCreateDeferredDelegate(SharedCode.EntitySystem.PropertyAddress address, int slotId, int stackCount) => () =>
        {
            return Drop(address, slotId, stackCount);
        }

        ;
        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> DropRunMaster(SharedCode.EntitySystem.PropertyAddress address, int slotId, int stackCount)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(DropCreateDeferredDelegate(address, slotId, stackCount), nameof(Drop));
            }

            return await DropRun(address, slotId, stackCount);
        }

        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> DropRun(SharedCode.EntitySystem.PropertyAddress address, int slotId, int stackCount)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IContainerApi), 18);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(Drop)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = DropImpl(address, slotId, stackCount);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }
    }
}