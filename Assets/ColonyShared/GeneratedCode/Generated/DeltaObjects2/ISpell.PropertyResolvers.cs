// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using SharedCode.Logging;
using System.Collections.Generic;
using System.Linq;
using SharedCode.EntitySystem;

namespace GeneratedCode.DeltaObjects
{
    public partial class Spell
    {
        public override bool TryGetProperty<T>(int address, out T property)
        {
            switch (address)
            {
                case 10:
                    property = (T)(object)AskedToFinish;
                    return true;
                case 11:
                    property = (T)(object)AskedToBeFinishedWithReason;
                    return true;
                case 12:
                    property = (T)(object)StopCast;
                    return true;
                case 13:
                    property = (T)(object)StopCastWithReason;
                    return true;
                case 14:
                    property = (T)(object)Status;
                    return true;
                case 15:
                    property = (T)(object)CastData;
                    return true;
                case 16:
                    property = (T)(object)Modifiers;
                    return true;
                case 17:
                    property = (T)(object)FinishReason;
                    return true;
                case 18:
                    property = (T)(object)Id;
                    return true;
                case 19:
                    property = (T)(object)Finished;
                    return true;
                case 20:
                    property = (T)(object)Started;
                    return true;
                case 21:
                    property = (T)(object)Causer;
                    return true;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    property = default;
                    return false;
            }
        }

        public override int GetIdOfChildNonDeltaObj(string childName)
        {
            if (childName == nameof(AskedToFinish))
                return 10;
            if (childName == nameof(AskedToBeFinishedWithReason))
                return 11;
            if (childName == nameof(StopCast))
                return 12;
            if (childName == nameof(StopCastWithReason))
                return 13;
            if (childName == nameof(Status))
                return 14;
            if (childName == nameof(CastData))
                return 15;
            if (childName == nameof(Modifiers))
                return 16;
            if (childName == nameof(FinishReason))
                return 17;
            if (childName == nameof(Id))
                return 18;
            if (childName == nameof(Finished))
                return 19;
            if (childName == nameof(Started))
                return 20;
            if (childName == nameof(Causer))
                return 21;
            throw new System.InvalidOperationException($"Field {childName} is not a child of {this}");
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class SpellSlot
    {
        public override bool TryGetProperty<T>(int address, out T property)
        {
            switch (address)
            {
                case 10:
                    property = (T)(object)CurrentSpell;
                    return true;
                case 11:
                    property = (T)(object)NextChainedSpell;
                    return true;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    property = default;
                    return false;
            }
        }

        public override int GetIdOfChildNonDeltaObj(string childName)
        {
            if (childName == nameof(CurrentSpell))
                return 10;
            if (childName == nameof(NextChainedSpell))
                return 11;
            throw new System.InvalidOperationException($"Field {childName} is not a child of {this}");
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class SpellStatus
    {
        public override bool TryGetProperty<T>(int address, out T property)
        {
            switch (address)
            {
                case 10:
                    property = (T)(object)SubSpell;
                    return true;
                case 11:
                    property = (T)(object)Spell;
                    return true;
                case 12:
                    property = (T)(object)ActivationsPerWord;
                    return true;
                case 13:
                    property = (T)(object)SuccesfullPredicatesCheckCount;
                    return true;
                case 14:
                    property = (T)(object)FailedPredicatesCheckCount;
                    return true;
                case 15:
                    property = (T)(object)ActivationsCount;
                    return true;
                case 16:
                    property = (T)(object)DeactivationsCount;
                    return true;
                case 17:
                    property = (T)(object)SuccesfullActivationsCount;
                    return true;
                case 18:
                    property = (T)(object)SubSpells;
                    return true;
                case 19:
                    property = (T)(object)Activations;
                    return true;
                case 20:
                    property = (T)(object)AccumulatedDelta;
                    return true;
                case 21:
                    property = (T)(object)LastTimeUpdated;
                    return true;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    property = default;
                    return false;
            }
        }

        public override int GetIdOfChildNonDeltaObj(string childName)
        {
            if (childName == nameof(SubSpell))
                return 10;
            if (childName == nameof(Spell))
                return 11;
            if (childName == nameof(ActivationsPerWord))
                return 12;
            if (childName == nameof(SuccesfullPredicatesCheckCount))
                return 13;
            if (childName == nameof(FailedPredicatesCheckCount))
                return 14;
            if (childName == nameof(ActivationsCount))
                return 15;
            if (childName == nameof(DeactivationsCount))
                return 16;
            if (childName == nameof(SuccesfullActivationsCount))
                return 17;
            if (childName == nameof(SubSpells))
                return 18;
            if (childName == nameof(Activations))
                return 19;
            if (childName == nameof(AccumulatedDelta))
                return 20;
            if (childName == nameof(LastTimeUpdated))
                return 21;
            throw new System.InvalidOperationException($"Field {childName} is not a child of {this}");
        }
    }
}