// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, 1978938655, typeof(SharedCode.Entities.Engine.IKnowledgeEngine))]
    public interface IKnowledgeEngineAlways : SharedCode.EntitySystem.IEntity, IHasOwnerAlways, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, 1408038270, typeof(SharedCode.Entities.Engine.IKnowledgeEngine))]
    public interface IKnowledgeEngineClientBroadcast : SharedCode.EntitySystem.IEntity, IHasOwnerClientBroadcast, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, 1812686255, typeof(SharedCode.Entities.Engine.IKnowledgeEngine))]
    public interface IKnowledgeEngineClientFullApi : SharedCode.EntitySystem.IEntity, IHasOwnerClientFullApi, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, -2075173704, typeof(SharedCode.Entities.Engine.IKnowledgeEngine))]
    public interface IKnowledgeEngineClientFull : SharedCode.EntitySystem.IEntity, IHasOwnerClientFull, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.EntitySystem.Delta.IDeltaList<SharedCode.Aspects.Science.TechnologyDef> KnownTechnologies
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaList<SharedCode.Aspects.Science.KnowledgeDef> KnownKnowledges
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaList<SharedCode.Aspects.Science.KnowledgeRecordDef> ShownKnowledgeRecords
        {
            get;
        }

        System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> TryToActivate(SharedCode.Aspects.Science.TechnologyDef technologyDef, bool doActivate);
        System.Threading.Tasks.Task<bool> CanChangeRPoints(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> AddShownKnowledgeRecord(SharedCode.Aspects.Science.KnowledgeRecordDef knowledgeRecordDef);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, -253634531, typeof(SharedCode.Entities.Engine.IKnowledgeEngine))]
    public interface IKnowledgeEngineServerApi : SharedCode.EntitySystem.IEntity, IHasOwnerServerApi, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, 1630614680, typeof(SharedCode.Entities.Engine.IKnowledgeEngine))]
    public interface IKnowledgeEngineServer : SharedCode.EntitySystem.IEntity, IHasOwnerServer, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.EntitySystem.Delta.IDeltaList<SharedCode.Aspects.Science.TechnologyDef> KnownTechnologies
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaList<SharedCode.Aspects.Science.KnowledgeDef> KnownKnowledges
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaList<SharedCode.Aspects.Science.KnowledgeRecordDef> ShownKnowledgeRecords
        {
            get;
        }

        System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> AddKnowledge(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef);
        System.Threading.Tasks.Task AddTechnology(SharedCode.Aspects.Science.TechnologyDef technologyDef);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> Explore(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, SharedCode.Aspects.Science.TechPointCountDef[] rewardPoints);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> TryToActivate(SharedCode.Aspects.Science.TechnologyDef technologyDef, bool doActivate);
        System.Threading.Tasks.Task<bool> CanChangeRPoints(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement);
        System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> AddShownKnowledgeRecord(SharedCode.Aspects.Science.KnowledgeRecordDef knowledgeRecordDef);
    }
}