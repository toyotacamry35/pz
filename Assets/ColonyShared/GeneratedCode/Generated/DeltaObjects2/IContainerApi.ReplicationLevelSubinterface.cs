// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, 247137871, typeof(SharedCode.Entities.IContainerApi))]
    public interface IContainerApiAlways : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, 2075446153, typeof(SharedCode.Entities.IContainerApi))]
    public interface IContainerApiClientBroadcast : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, 1314681319, typeof(SharedCode.Entities.IContainerApi))]
    public interface IContainerApiClientFullApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, 468937859, typeof(SharedCode.Entities.IContainerApi))]
    public interface IContainerApiClientFull : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> ContainerOperationSetSize(SharedCode.EntitySystem.PropertyAddress address, int size);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> Drop(SharedCode.EntitySystem.PropertyAddress address, int slotId, int stackCount);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, 1728491079, typeof(SharedCode.Entities.IContainerApi))]
    public interface IContainerApiServerApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationAddPrepareResult> ContainerOperationMoveAddPrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, SharedCode.Entities.IItemWrapper itemWrapper, bool manual);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAddCommit(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAddRollback(System.Guid transactionId);
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationRemovePrepareResult> ContainerOperationMoveRemovePrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, int count, System.Guid clientSrcEntityId, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveRemoveCommit(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveRemoveRollback(System.Guid transactionId);
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationMoveAllAddPrepareResult> ContainerOperationMoveAllAddPrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers, bool manual, bool sameSlots);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllAddCommit(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllAddRollback(System.Guid transactionId);
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationMoveAllRemovePrepareResult> ContainerOperationMoveAllRemovePrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, bool manual);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllRemoveCommit(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllRemoveRollback(System.Guid transactionId);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveChangePrepare(System.Guid transactionId, SharedCode.Entities.IItemWrapper itemWrapper);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddNewItem(SharedCode.Entities.IItemWrapper itemWrapper, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> itemResourcesToAdd, SharedCode.EntitySystem.PropertyAddress destination, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationRemoveBatchItem(System.Collections.Generic.List<SharedCode.Entities.RemoveItemBatchElement> items, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveAllChangePrepare(System.Guid transactionId, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, 650148747, typeof(SharedCode.Entities.IContainerApi))]
    public interface IContainerApiServer : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationAddPrepareResult> ContainerOperationMoveAddPrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, SharedCode.Entities.IItemWrapper itemWrapper, bool manual);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAddCommit(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAddRollback(System.Guid transactionId);
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationRemovePrepareResult> ContainerOperationMoveRemovePrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, int slotId, int count, System.Guid clientSrcEntityId, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveRemoveCommit(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveRemoveRollback(System.Guid transactionId);
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationMoveAllAddPrepareResult> ContainerOperationMoveAllAddPrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers, bool manual, bool sameSlots);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllAddCommit(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllAddRollback(System.Guid transactionId);
        System.Threading.Tasks.Task<SharedCode.Entities.ContainerOperationMoveAllRemovePrepareResult> ContainerOperationMoveAllRemovePrepare(System.Guid transactionId, SharedCode.EntitySystem.PropertyAddress address, bool manual);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllRemoveCommit(System.Guid transactionId);
        System.Threading.Tasks.Task<bool> ContainerOperationMoveAllRemoveRollback(System.Guid transactionId);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveChangePrepare(System.Guid transactionId, SharedCode.Entities.IItemWrapper itemWrapper);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddNewItem(SharedCode.Entities.IItemWrapper itemWrapper, SharedCode.EntitySystem.PropertyAddress destination, int destinationSlotId, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationAddItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> itemResourcesToAdd, SharedCode.EntitySystem.PropertyAddress destination, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationRemoveBatchItem(System.Collections.Generic.List<SharedCode.Entities.RemoveItemBatchElement> items, bool manual);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> ContainerOperationMoveAllChangePrepare(System.Guid transactionId, System.Collections.Generic.Dictionary<int, SharedCode.Entities.IItemWrapper> itemWrappers);
        System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> ContainerOperationSetSize(SharedCode.EntitySystem.PropertyAddress address, int size);
        System.Threading.Tasks.Task<Assets.ColonyShared.SharedCode.Aspects.Item.ContainerItemOperation> Drop(SharedCode.EntitySystem.PropertyAddress address, int slotId, int stackCount);
    }
}