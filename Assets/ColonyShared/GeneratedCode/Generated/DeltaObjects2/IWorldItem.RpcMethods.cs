// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class Item
    {
        public ValueTask<Assets.ColonyShared.SharedCode.Aspects.Damage.DamageResult> ReceiveDamageInternal(Assets.ColonyShared.SharedCode.Aspects.Damage.Damage incomingDamage, System.Guid attackerId, int attackerTypeId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ReceiveDamageInternalRunMaster(incomingDamage, attackerId, attackerTypeId);
                else
                    return ReceiveDamageInternalRun(incomingDamage, attackerId, attackerTypeId);
            else
                return SendFuncs.ReceiveDamageInternal(incomingDamage, attackerId, attackerTypeId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<Assets.ColonyShared.SharedCode.Aspects.Damage.DamageResult>> ReceiveDamageInternalCreateDeferredDelegate(Assets.ColonyShared.SharedCode.Aspects.Damage.Damage incomingDamage, System.Guid attackerId, int attackerTypeId) => () =>
        {
            return ReceiveDamageInternal(incomingDamage, attackerId, attackerTypeId).AsTask();
        }

        ;
        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Damage.DamageResult> ReceiveDamageInternalRunMaster(Assets.ColonyShared.SharedCode.Aspects.Damage.Damage incomingDamage, System.Guid attackerId, int attackerTypeId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ReceiveDamageInternalCreateDeferredDelegate(incomingDamage, attackerId, attackerTypeId), nameof(ReceiveDamageInternal));
            }

            return await ReceiveDamageInternalRun(incomingDamage, attackerId, attackerTypeId);
        }

        public async ValueTask<Assets.ColonyShared.SharedCode.Aspects.Damage.DamageResult> ReceiveDamageInternalRun(Assets.ColonyShared.SharedCode.Aspects.Damage.Damage incomingDamage, System.Guid attackerId, int attackerTypeId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IItem), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ReceiveDamageInternal)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ReceiveDamageInternalImpl(incomingDamage, attackerId, attackerTypeId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public ValueTask<bool> ChangeHealthInternal(float health)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ChangeHealthInternalRunMaster(health);
                else
                    return ChangeHealthInternalRun(health);
            else
                return SendFuncs.ChangeHealthInternal(health, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<bool>> ChangeHealthInternalCreateDeferredDelegate(float health) => () =>
        {
            return ChangeHealthInternal(health).AsTask();
        }

        ;
        public async ValueTask<bool> ChangeHealthInternalRunMaster(float health)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ChangeHealthInternalCreateDeferredDelegate(health), nameof(ChangeHealthInternal));
            }

            return await ChangeHealthInternalRun(health);
        }

        public async ValueTask<bool> ChangeHealthInternalRun(float health)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IItem), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ChangeHealthInternal)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ChangeHealthInternalImpl(health);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }
    }
}