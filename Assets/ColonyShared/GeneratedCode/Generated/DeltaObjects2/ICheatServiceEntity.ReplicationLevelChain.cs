// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Entities.Service;
using SharedCode.EntitySystem.ChainCalls;
using SharedCode.Logging;
using SharedCode.OurSimpleIoC;
using SharedCode.Serializers;
using SharedCode.Utils;
using System.Linq;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using GeneratedCode.DeltaObjects.Chain;

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceAgentEntityAlwaysChainProxy : IChainedEntity
{
    private CheatServiceAgentEntityChainProxy __chain__;
    public CheatServiceAgentEntityAlwaysChainProxy(CheatServiceAgentEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceAgentEntityAlwaysChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityAlwaysChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityAlwaysChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceAgentEntityAlwaysChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityAlways entity)
    {
        return new CheatServiceAgentEntityAlwaysChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceAgentEntityAlwaysChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityAlways entity, IChainedEntity fromChain)
    {
        return new CheatServiceAgentEntityAlwaysChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceAgentEntityClientBroadcastChainProxy : IChainedEntity
{
    private CheatServiceAgentEntityChainProxy __chain__;
    public CheatServiceAgentEntityClientBroadcastChainProxy(CheatServiceAgentEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceAgentEntityClientBroadcastChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityClientBroadcastChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityClientBroadcastChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceAgentEntityClientBroadcastChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityClientBroadcast entity)
    {
        return new CheatServiceAgentEntityClientBroadcastChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceAgentEntityClientBroadcastChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityClientBroadcast entity, IChainedEntity fromChain)
    {
        return new CheatServiceAgentEntityClientBroadcastChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceAgentEntityClientFullApiChainProxy : IChainedEntity
{
    private CheatServiceAgentEntityChainProxy __chain__;
    public CheatServiceAgentEntityClientFullApiChainProxy(CheatServiceAgentEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceAgentEntityClientFullApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityClientFullApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityClientFullApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceAgentEntityClientFullApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityClientFullApi entity)
    {
        return new CheatServiceAgentEntityClientFullApiChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceAgentEntityClientFullApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityClientFullApi entity, IChainedEntity fromChain)
    {
        return new CheatServiceAgentEntityClientFullApiChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceAgentEntityClientFullChainProxy : IChainedEntity
{
    private CheatServiceAgentEntityChainProxy __chain__;
    public CheatServiceAgentEntityClientFullChainProxy(CheatServiceAgentEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceAgentEntityClientFullChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityClientFullChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityClientFullChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceAgentEntityClientFullChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityClientFull entity)
    {
        return new CheatServiceAgentEntityClientFullChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceAgentEntityClientFullChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityClientFull entity, IChainedEntity fromChain)
    {
        return new CheatServiceAgentEntityClientFullChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceAgentEntityServerApiChainProxy : IChainedEntity
{
    private CheatServiceAgentEntityChainProxy __chain__;
    public CheatServiceAgentEntityServerApiChainProxy(CheatServiceAgentEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceAgentEntityServerApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityServerApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityServerApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceAgentEntityServerApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityServerApi entity)
    {
        return new CheatServiceAgentEntityServerApiChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceAgentEntityServerApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityServerApi entity, IChainedEntity fromChain)
    {
        return new CheatServiceAgentEntityServerApiChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceAgentEntityServerChainProxy : IChainedEntity
{
    private CheatServiceAgentEntityChainProxy __chain__;
    public CheatServiceAgentEntityServerChainProxy(CheatServiceAgentEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceAgentEntityServerChainProxy GetRepositoryEntitiesCount()
    {
        __chain__.GetRepositoryEntitiesCount();
        return this;
    }

    public CheatServiceAgentEntityServerChainProxy DumpRepository()
    {
        __chain__.DumpRepository();
        return this;
    }

    public CheatServiceAgentEntityServerChainProxy ForceGC(ChainArgument<int> count)
    {
        __chain__.ForceGC(count);
        return this;
    }

    public CheatServiceAgentEntityServerChainProxy SetGCEnabled(ChainArgument<bool> enabled)
    {
        __chain__.SetGCEnabled(enabled);
        return this;
    }

    public CheatServiceAgentEntityServerChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityServerChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceAgentEntityServerChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceAgentEntityServerChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityServer entity)
    {
        return new CheatServiceAgentEntityServerChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceAgentEntityServerChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityServer entity, IChainedEntity fromChain)
    {
        return new CheatServiceAgentEntityServerChainProxy(new CheatServiceAgentEntityChainProxy((SharedCode.Entities.Service.ICheatServiceAgentEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceEntityAlwaysChainProxy : IChainedEntity
{
    private CheatServiceEntityChainProxy __chain__;
    public CheatServiceEntityAlwaysChainProxy(CheatServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceEntityAlwaysChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceEntityAlwaysChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceEntityAlwaysChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceEntityAlwaysChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityAlways entity)
    {
        return new CheatServiceEntityAlwaysChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceEntityAlwaysChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityAlways entity, IChainedEntity fromChain)
    {
        return new CheatServiceEntityAlwaysChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceEntityClientBroadcastChainProxy : IChainedEntity
{
    private CheatServiceEntityChainProxy __chain__;
    public CheatServiceEntityClientBroadcastChainProxy(CheatServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceEntityClientBroadcastChainProxy AddSomeItems(ChainArgument<System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack>> prototypeNames, ChainArgument<SharedCode.EntitySystem.PropertyAddress> source)
    {
        __chain__.AddSomeItems(prototypeNames, source);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy AddItemsInSlot(ChainArgument<SharedCode.Entities.ItemResourcePack> prototypeName, ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> slot)
    {
        __chain__.AddItemsInSlot(prototypeName, source, slot);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy AddQuest(ChainArgument<Assets.Src.Aspects.Impl.Factions.Template.QuestDef> quest, ChainArgument<System.Guid> characterId)
    {
        __chain__.AddQuest(quest, characterId);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy AddTechPoints(ChainArgument<SharedCode.Aspects.Science.TechPointCount[]> techPointCounts, ChainArgument<System.Guid> characterId)
    {
        __chain__.AddTechPoints(techPointCounts, characterId);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy AddKnowledge(ChainArgument<SharedCode.Aspects.Science.KnowledgeDef> knowledgeDef, ChainArgument<System.Guid> characterId)
    {
        __chain__.AddKnowledge(knowledgeDef, characterId);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy SpawnInteractiveObjectEntity(ChainArgument<SharedCode.Entities.GameObjectEntities.InteractiveEntityDef> entityDef, ChainArgument<SharedCode.Utils.Vector3> position)
    {
        __chain__.SpawnInteractiveObjectEntity(entityDef, position);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy SpawnNewMineableEntity(ChainArgument<SharedCode.Entities.GameObjectEntities.MineableEntityDef> entityDef, ChainArgument<SharedCode.Utils.Vector3> position)
    {
        __chain__.SpawnNewMineableEntity(entityDef, position);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy SpawnInteractiveEntity(ChainArgument<SharedCode.Entities.GameObjectEntities.InteractiveEntityDef> entityDef, ChainArgument<SharedCode.Utils.Vector3> position)
    {
        __chain__.SpawnInteractiveEntity(entityDef, position);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy GetRepositoryEntitiesCount()
    {
        __chain__.GetRepositoryEntitiesCount();
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy GetRepositoryEntitiesCountOnAllRepositories()
    {
        __chain__.GetRepositoryEntitiesCountOnAllRepositories();
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy SetVisibilityRadius(ChainArgument<float> enterRadius, ChainArgument<float> leaveRadius)
    {
        __chain__.SetVisibilityRadius(enterRadius, leaveRadius);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy GetTooLongEntityWaitQueues()
    {
        __chain__.GetTooLongEntityWaitQueues();
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy PrintBrokenLocomotions()
    {
        __chain__.PrintBrokenLocomotions();
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy SetDebugMobPositionLogging(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> outerRef, ChainArgument<bool> enabledStatus, ChainArgument<bool> dump)
    {
        __chain__.SetDebugMobPositionLogging(outerRef, enabledStatus, dump);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy SetCurveLoggerState(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> charRef, ChainArgument<bool> enabledStatus, ChainArgument<bool> dump, ChainArgument<bool> serverOnly, ChainArgument<string> loggerName, ChainArgument<System.Guid> dumpId)
    {
        __chain__.SetCurveLoggerState(charRef, enabledStatus, dump, serverOnly, loggerName, dumpId);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy SetLoggableEnable(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> outerRef, ChainArgument<bool> enabledStatus)
    {
        __chain__.SetLoggableEnable(outerRef, enabledStatus);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy MainUnityThreadOnServerSleep(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> charRef, ChainArgument<bool> isOn, ChainArgument<float> sleepTime, ChainArgument<float> delayBeforeSleep, ChainArgument<float> repeatTime)
    {
        __chain__.MainUnityThreadOnServerSleep(charRef, isOn, sleepTime, delayBeforeSleep, repeatTime);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy CastSpell(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> entityRef, ChainArgument<SharedCode.Wizardry.SpellCast> spellCast)
    {
        __chain__.CastSpell(entityRef, spellCast);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy SetServerCheatVariable(ChainArgument<Assets.Src.ResourcesSystem.Base.BaseResource> resource, ChainArgument<string> value)
    {
        __chain__.SetServerCheatVariable(resource, value);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy TestCheckPZ15200Done(ChainArgument<float> waitBeforeReplicate)
    {
        __chain__.TestCheckPZ15200Done(waitBeforeReplicate);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy EnableWizardLogger(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<bool> enable)
    {
        __chain__.EnableWizardLogger(entity, enable);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy SetGender(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<ResourceSystem.Aspects.Misc.GenderDef> gender)
    {
        __chain__.SetGender(entity, gender);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy InvokeTrauma(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<string> trauma)
    {
        __chain__.InvokeTrauma(entity, trauma);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy StopTrauma(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<string> trauma)
    {
        __chain__.StopTrauma(entity, trauma);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceEntityClientBroadcastChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceEntityClientBroadcastChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityClientBroadcast entity)
    {
        return new CheatServiceEntityClientBroadcastChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceEntityClientBroadcastChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityClientBroadcast entity, IChainedEntity fromChain)
    {
        return new CheatServiceEntityClientBroadcastChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceEntityClientFullApiChainProxy : IChainedEntity
{
    private CheatServiceEntityChainProxy __chain__;
    public CheatServiceEntityClientFullApiChainProxy(CheatServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceEntityClientFullApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceEntityClientFullApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceEntityClientFullApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceEntityClientFullApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityClientFullApi entity)
    {
        return new CheatServiceEntityClientFullApiChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceEntityClientFullApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityClientFullApi entity, IChainedEntity fromChain)
    {
        return new CheatServiceEntityClientFullApiChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceEntityClientFullChainProxy : IChainedEntity
{
    private CheatServiceEntityChainProxy __chain__;
    public CheatServiceEntityClientFullChainProxy(CheatServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceEntityClientFullChainProxy AddSomeItems(ChainArgument<System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack>> prototypeNames, ChainArgument<SharedCode.EntitySystem.PropertyAddress> source)
    {
        __chain__.AddSomeItems(prototypeNames, source);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy AddItemsInSlot(ChainArgument<SharedCode.Entities.ItemResourcePack> prototypeName, ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> slot)
    {
        __chain__.AddItemsInSlot(prototypeName, source, slot);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy AddQuest(ChainArgument<Assets.Src.Aspects.Impl.Factions.Template.QuestDef> quest, ChainArgument<System.Guid> characterId)
    {
        __chain__.AddQuest(quest, characterId);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy AddTechPoints(ChainArgument<SharedCode.Aspects.Science.TechPointCount[]> techPointCounts, ChainArgument<System.Guid> characterId)
    {
        __chain__.AddTechPoints(techPointCounts, characterId);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy AddKnowledge(ChainArgument<SharedCode.Aspects.Science.KnowledgeDef> knowledgeDef, ChainArgument<System.Guid> characterId)
    {
        __chain__.AddKnowledge(knowledgeDef, characterId);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SpawnInteractiveObjectEntity(ChainArgument<SharedCode.Entities.GameObjectEntities.InteractiveEntityDef> entityDef, ChainArgument<SharedCode.Utils.Vector3> position)
    {
        __chain__.SpawnInteractiveObjectEntity(entityDef, position);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SpawnNewMineableEntity(ChainArgument<SharedCode.Entities.GameObjectEntities.MineableEntityDef> entityDef, ChainArgument<SharedCode.Utils.Vector3> position)
    {
        __chain__.SpawnNewMineableEntity(entityDef, position);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SpawnInteractiveEntity(ChainArgument<SharedCode.Entities.GameObjectEntities.InteractiveEntityDef> entityDef, ChainArgument<SharedCode.Utils.Vector3> position)
    {
        __chain__.SpawnInteractiveEntity(entityDef, position);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy GetRepositoryEntitiesCount()
    {
        __chain__.GetRepositoryEntitiesCount();
        return this;
    }

    public CheatServiceEntityClientFullChainProxy GetRepositoryEntitiesCountOnAllRepositories()
    {
        __chain__.GetRepositoryEntitiesCountOnAllRepositories();
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SetVisibilityRadius(ChainArgument<float> enterRadius, ChainArgument<float> leaveRadius)
    {
        __chain__.SetVisibilityRadius(enterRadius, leaveRadius);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy GetTooLongEntityWaitQueues()
    {
        __chain__.GetTooLongEntityWaitQueues();
        return this;
    }

    public CheatServiceEntityClientFullChainProxy GetCCU()
    {
        __chain__.GetCCU();
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SetDebugMode(ChainArgument<bool> enabled)
    {
        __chain__.SetDebugMode(enabled);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SetDebugMobs(ChainArgument<bool> enabledStatus, ChainArgument<bool> hard)
    {
        __chain__.SetDebugMobs(enabledStatus, hard);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SetDebugSpells(ChainArgument<bool> enabledStatus)
    {
        __chain__.SetDebugSpells(enabledStatus);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy PrintBrokenLocomotions()
    {
        __chain__.PrintBrokenLocomotions();
        return this;
    }

    public CheatServiceEntityClientFullChainProxy DamageAllItems(ChainArgument<System.Guid> character, ChainArgument<float> percent)
    {
        __chain__.DamageAllItems(character, percent);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SetDebugMobPositionLogging(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> outerRef, ChainArgument<bool> enabledStatus, ChainArgument<bool> dump)
    {
        __chain__.SetDebugMobPositionLogging(outerRef, enabledStatus, dump);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SetCurveLoggerState(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> charRef, ChainArgument<bool> enabledStatus, ChainArgument<bool> dump, ChainArgument<bool> serverOnly, ChainArgument<string> loggerName, ChainArgument<System.Guid> dumpId)
    {
        __chain__.SetCurveLoggerState(charRef, enabledStatus, dump, serverOnly, loggerName, dumpId);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SetLoggableEnable(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> outerRef, ChainArgument<bool> enabledStatus)
    {
        __chain__.SetLoggableEnable(outerRef, enabledStatus);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy MainUnityThreadOnServerSleep(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> charRef, ChainArgument<bool> isOn, ChainArgument<float> sleepTime, ChainArgument<float> delayBeforeSleep, ChainArgument<float> repeatTime)
    {
        __chain__.MainUnityThreadOnServerSleep(charRef, isOn, sleepTime, delayBeforeSleep, repeatTime);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy ChangeHealth(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> victimEntity, ChainArgument<int> deltaValue)
    {
        __chain__.ChangeHealth(victimEntity, deltaValue);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy Godmode(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> applicantEntityRef, ChainArgument<bool> enable)
    {
        __chain__.Godmode(applicantEntityRef, enable);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy ResolveCharacterCoords(ChainArgument<System.Guid[]> guids)
    {
        __chain__.ResolveCharacterCoords(guids);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy ForceGC(ChainArgument<int> count, ChainArgument<System.Guid> repositoryId)
    {
        __chain__.ForceGC(count, repositoryId);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy ForceSelfCompactionGC()
    {
        __chain__.ForceSelfCompactionGC();
        return this;
    }

    public CheatServiceEntityClientFullChainProxy CastSpell(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> entityRef, ChainArgument<SharedCode.Wizardry.SpellCast> spellCast)
    {
        __chain__.CastSpell(entityRef, spellCast);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SetServerCheatVariable(ChainArgument<Assets.Src.ResourcesSystem.Base.BaseResource> resource, ChainArgument<string> value)
    {
        __chain__.SetServerCheatVariable(resource, value);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy TestCheckPZ15200Done(ChainArgument<float> waitBeforeReplicate)
    {
        __chain__.TestCheckPZ15200Done(waitBeforeReplicate);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy EnableWizardLogger(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<bool> enable)
    {
        __chain__.EnableWizardLogger(entity, enable);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy SetGender(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<ResourceSystem.Aspects.Misc.GenderDef> gender)
    {
        __chain__.SetGender(entity, gender);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy InvokeTrauma(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<string> trauma)
    {
        __chain__.InvokeTrauma(entity, trauma);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy StopTrauma(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<string> trauma)
    {
        __chain__.StopTrauma(entity, trauma);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceEntityClientFullChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceEntityClientFullChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityClientFull entity)
    {
        return new CheatServiceEntityClientFullChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceEntityClientFullChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityClientFull entity, IChainedEntity fromChain)
    {
        return new CheatServiceEntityClientFullChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceEntityServerApiChainProxy : IChainedEntity
{
    private CheatServiceEntityChainProxy __chain__;
    public CheatServiceEntityServerApiChainProxy(CheatServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceEntityServerApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceEntityServerApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceEntityServerApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceEntityServerApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityServerApi entity)
    {
        return new CheatServiceEntityServerApiChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceEntityServerApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityServerApi entity, IChainedEntity fromChain)
    {
        return new CheatServiceEntityServerApiChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CheatServiceEntityServerChainProxy : IChainedEntity
{
    private CheatServiceEntityChainProxy __chain__;
    public CheatServiceEntityServerChainProxy(CheatServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CheatServiceEntityServerChainProxy AddSomeItems(ChainArgument<System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack>> prototypeNames, ChainArgument<SharedCode.EntitySystem.PropertyAddress> source)
    {
        __chain__.AddSomeItems(prototypeNames, source);
        return this;
    }

    public CheatServiceEntityServerChainProxy AddItemsInSlot(ChainArgument<SharedCode.Entities.ItemResourcePack> prototypeName, ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> slot)
    {
        __chain__.AddItemsInSlot(prototypeName, source, slot);
        return this;
    }

    public CheatServiceEntityServerChainProxy AddQuest(ChainArgument<Assets.Src.Aspects.Impl.Factions.Template.QuestDef> quest, ChainArgument<System.Guid> characterId)
    {
        __chain__.AddQuest(quest, characterId);
        return this;
    }

    public CheatServiceEntityServerChainProxy AddTechPoints(ChainArgument<SharedCode.Aspects.Science.TechPointCount[]> techPointCounts, ChainArgument<System.Guid> characterId)
    {
        __chain__.AddTechPoints(techPointCounts, characterId);
        return this;
    }

    public CheatServiceEntityServerChainProxy AddKnowledge(ChainArgument<SharedCode.Aspects.Science.KnowledgeDef> knowledgeDef, ChainArgument<System.Guid> characterId)
    {
        __chain__.AddKnowledge(knowledgeDef, characterId);
        return this;
    }

    public CheatServiceEntityServerChainProxy SpawnInteractiveObjectEntity(ChainArgument<SharedCode.Entities.GameObjectEntities.InteractiveEntityDef> entityDef, ChainArgument<SharedCode.Utils.Vector3> position)
    {
        __chain__.SpawnInteractiveObjectEntity(entityDef, position);
        return this;
    }

    public CheatServiceEntityServerChainProxy SpawnNewMineableEntity(ChainArgument<SharedCode.Entities.GameObjectEntities.MineableEntityDef> entityDef, ChainArgument<SharedCode.Utils.Vector3> position)
    {
        __chain__.SpawnNewMineableEntity(entityDef, position);
        return this;
    }

    public CheatServiceEntityServerChainProxy SpawnInteractiveEntity(ChainArgument<SharedCode.Entities.GameObjectEntities.InteractiveEntityDef> entityDef, ChainArgument<SharedCode.Utils.Vector3> position)
    {
        __chain__.SpawnInteractiveEntity(entityDef, position);
        return this;
    }

    public CheatServiceEntityServerChainProxy GetRepositoryEntitiesCount()
    {
        __chain__.GetRepositoryEntitiesCount();
        return this;
    }

    public CheatServiceEntityServerChainProxy GetRepositoryEntitiesCountOnAllRepositories()
    {
        __chain__.GetRepositoryEntitiesCountOnAllRepositories();
        return this;
    }

    public CheatServiceEntityServerChainProxy DumpAllServerRepositories()
    {
        __chain__.DumpAllServerRepositories();
        return this;
    }

    public CheatServiceEntityServerChainProxy SetVisibilityRadius(ChainArgument<float> enterRadius, ChainArgument<float> leaveRadius)
    {
        __chain__.SetVisibilityRadius(enterRadius, leaveRadius);
        return this;
    }

    public CheatServiceEntityServerChainProxy GetTooLongEntityWaitQueues()
    {
        __chain__.GetTooLongEntityWaitQueues();
        return this;
    }

    public CheatServiceEntityServerChainProxy GetCCU()
    {
        __chain__.GetCCU();
        return this;
    }

    public CheatServiceEntityServerChainProxy SetDebugMode(ChainArgument<bool> enabled)
    {
        __chain__.SetDebugMode(enabled);
        return this;
    }

    public CheatServiceEntityServerChainProxy SetDebugMobs(ChainArgument<bool> enabledStatus, ChainArgument<bool> hard)
    {
        __chain__.SetDebugMobs(enabledStatus, hard);
        return this;
    }

    public CheatServiceEntityServerChainProxy SetDebugSpells(ChainArgument<bool> enabledStatus)
    {
        __chain__.SetDebugSpells(enabledStatus);
        return this;
    }

    public CheatServiceEntityServerChainProxy PrintBrokenLocomotions()
    {
        __chain__.PrintBrokenLocomotions();
        return this;
    }

    public CheatServiceEntityServerChainProxy DamageAllItems(ChainArgument<System.Guid> character, ChainArgument<float> percent)
    {
        __chain__.DamageAllItems(character, percent);
        return this;
    }

    public CheatServiceEntityServerChainProxy SetDebugMobPositionLogging(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> outerRef, ChainArgument<bool> enabledStatus, ChainArgument<bool> dump)
    {
        __chain__.SetDebugMobPositionLogging(outerRef, enabledStatus, dump);
        return this;
    }

    public CheatServiceEntityServerChainProxy SetCurveLoggerState(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> charRef, ChainArgument<bool> enabledStatus, ChainArgument<bool> dump, ChainArgument<bool> serverOnly, ChainArgument<string> loggerName, ChainArgument<System.Guid> dumpId)
    {
        __chain__.SetCurveLoggerState(charRef, enabledStatus, dump, serverOnly, loggerName, dumpId);
        return this;
    }

    public CheatServiceEntityServerChainProxy SetLoggableEnable(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> outerRef, ChainArgument<bool> enabledStatus)
    {
        __chain__.SetLoggableEnable(outerRef, enabledStatus);
        return this;
    }

    public CheatServiceEntityServerChainProxy MainUnityThreadOnServerSleep(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> charRef, ChainArgument<bool> isOn, ChainArgument<float> sleepTime, ChainArgument<float> delayBeforeSleep, ChainArgument<float> repeatTime)
    {
        __chain__.MainUnityThreadOnServerSleep(charRef, isOn, sleepTime, delayBeforeSleep, repeatTime);
        return this;
    }

    public CheatServiceEntityServerChainProxy ChangeHealth(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> victimEntity, ChainArgument<int> deltaValue)
    {
        __chain__.ChangeHealth(victimEntity, deltaValue);
        return this;
    }

    public CheatServiceEntityServerChainProxy Godmode(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> applicantEntityRef, ChainArgument<bool> enable)
    {
        __chain__.Godmode(applicantEntityRef, enable);
        return this;
    }

    public CheatServiceEntityServerChainProxy Version01()
    {
        __chain__.Version01();
        return this;
    }

    public CheatServiceEntityServerChainProxy ResolveCharacterCoords(ChainArgument<System.Guid[]> guids)
    {
        __chain__.ResolveCharacterCoords(guids);
        return this;
    }

    public CheatServiceEntityServerChainProxy ForceGC(ChainArgument<int> count, ChainArgument<System.Guid> repositoryId)
    {
        __chain__.ForceGC(count, repositoryId);
        return this;
    }

    public CheatServiceEntityServerChainProxy ForceSelfCompactionGC()
    {
        __chain__.ForceSelfCompactionGC();
        return this;
    }

    public CheatServiceEntityServerChainProxy SetGCEnabled(ChainArgument<bool> enabled, ChainArgument<System.Guid> repositoryId)
    {
        __chain__.SetGCEnabled(enabled, repositoryId);
        return this;
    }

    public CheatServiceEntityServerChainProxy CastSpell(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> entityRef, ChainArgument<SharedCode.Wizardry.SpellCast> spellCast)
    {
        __chain__.CastSpell(entityRef, spellCast);
        return this;
    }

    public CheatServiceEntityServerChainProxy SetServerCheatVariable(ChainArgument<Assets.Src.ResourcesSystem.Base.BaseResource> resource, ChainArgument<string> value)
    {
        __chain__.SetServerCheatVariable(resource, value);
        return this;
    }

    public CheatServiceEntityServerChainProxy TestCheckPZ15200Done(ChainArgument<float> waitBeforeReplicate)
    {
        __chain__.TestCheckPZ15200Done(waitBeforeReplicate);
        return this;
    }

    public CheatServiceEntityServerChainProxy EnableWizardLogger(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<bool> enable)
    {
        __chain__.EnableWizardLogger(entity, enable);
        return this;
    }

    public CheatServiceEntityServerChainProxy SetGender(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<ResourceSystem.Aspects.Misc.GenderDef> gender)
    {
        __chain__.SetGender(entity, gender);
        return this;
    }

    public CheatServiceEntityServerChainProxy InvokeTrauma(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<string> trauma)
    {
        __chain__.InvokeTrauma(entity, trauma);
        return this;
    }

    public CheatServiceEntityServerChainProxy StopTrauma(ChainArgument<ResourceSystem.Utils.OuterRef> entity, ChainArgument<string> trauma)
    {
        __chain__.StopTrauma(entity, trauma);
        return this;
    }

    public CheatServiceEntityServerChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CheatServiceEntityServerChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CheatServiceEntityServerChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CheatServiceEntityServerChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityServer entity)
    {
        return new CheatServiceEntityServerChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static CheatServiceEntityServerChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityServer entity, IChainedEntity fromChain)
    {
        return new CheatServiceEntityServerChainProxy(new CheatServiceEntityChainProxy((SharedCode.Entities.Service.ICheatServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}