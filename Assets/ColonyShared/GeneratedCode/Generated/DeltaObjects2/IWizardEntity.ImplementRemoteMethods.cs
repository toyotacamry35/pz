// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    public interface IWizardEntityImplementRemoteMethods
    {
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> NewSpellIdImpl();
        System.Threading.Tasks.Task<bool> ConnectToHostAsReplicaImpl(SharedCode.EntitySystem.OuterRef<SharedCode.Wizardry.IWizardEntity> host);
        System.Threading.Tasks.Task<bool> CastSpellFromHostImpl(SharedCode.Wizardry.SpellId id, SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<bool> StopSpellFromHostImpl(SharedCode.Wizardry.SpellId id, SharedCode.Wizardry.SpellFinishReason reason, long timeStamp);
        System.Threading.Tasks.Task<bool> SpellFinishedDelayImpl(SharedCode.Wizardry.SpellId spell);
        System.Threading.Tasks.Task<bool> OnLostPossiblyImportantEntityImpl(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent);
        System.Threading.Tasks.Task<bool> WatchdogUpdateImpl();
        System.Threading.Tasks.Task<bool> StopAllSpellsOfGroupImpl(SharedCode.Wizardry.SpellGroupDef group, SharedCode.Wizardry.SpellId except, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.Task<bool> StopSpellByDefImpl(SharedCode.Wizardry.SpellDef spellDef, SharedCode.Wizardry.SpellId except, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.Task<bool> StopSpellByCauserImpl(GeneratedCode.DeltaObjects.SpellPartCastId causer, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.ValueTask<bool> HasActiveSpellImpl(SharedCode.Wizardry.SpellDef spell);
        System.Threading.Tasks.ValueTask<bool> HasActiveSpellGroupImpl(SharedCode.Wizardry.SpellGroupDef group);
        System.Threading.Tasks.Task<string> DumpEventsImpl();
        System.Threading.Tasks.Task<bool> LocalUpdateTimeLineDataImpl();
        System.Threading.Tasks.Task<bool> CheckSpellCastPredicatesImpl(long currentTime, SharedCode.Wizardry.SpellCast spell, System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef> failedPredicates, Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef predicateIgnoreGroupDef);
        System.Threading.Tasks.Task<bool> HasSpellsPreventingThisFromStartImpl(SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpellImpl(SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpellImpl(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpellImpl(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId, SharedCode.Wizardry.SpellId prevSpell);
        System.Threading.Tasks.Task<bool> StopCastSpellImpl(SharedCode.Wizardry.SpellId spell, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.Task<bool> StopCastSpellImpl(SharedCode.Wizardry.SpellId spell);
        System.Threading.Tasks.Task<long> UpdateImpl();
        System.Threading.Tasks.Task<bool> UpdateImpl(SharedCode.Wizardry.SpellId spellId);
        System.Threading.Tasks.Task<SharedCode.Wizardry.WizardDebugData> GetDebugDataImpl();
        System.Threading.Tasks.Task<bool> WizardHasDiedImpl();
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> WizardHasRisenImpl();
        System.Threading.Tasks.Task GetBackFromIdleModeImpl();
        System.Threading.Tasks.Task GoIntoIdleModeImpl();
        System.Threading.Tasks.Task CancelSpellImpl(SharedCode.Wizardry.SpellId spellId);
        System.Threading.Tasks.Task SetIsInterestingEnoughToLogImpl(bool enable);
    }
}