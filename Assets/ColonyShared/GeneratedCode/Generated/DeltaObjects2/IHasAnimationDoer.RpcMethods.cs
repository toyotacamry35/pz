// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class AnimationDoerOwner
    {
        public Task SetAnimationDoer(Assets.ColonyShared.SharedCode.Entities.IAnimationDoer doer)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.NeedDeferredRpcOnMigrating())
                return SetAnimationDoerRunMaster(doer).AsTask();
            else
                return SetAnimationDoerRun(doer).AsTask();
        }

        private Func<Task> SetAnimationDoerCreateDeferredDelegate(Assets.ColonyShared.SharedCode.Entities.IAnimationDoer doer) => () =>
        {
            return SetAnimationDoer(doer);
        }

        ;
        public async ValueTask SetAnimationDoerRunMaster(Assets.ColonyShared.SharedCode.Entities.IAnimationDoer doer)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetAnimationDoerCreateDeferredDelegate(doer), nameof(SetAnimationDoer));
            }

            await SetAnimationDoerRun(doer);
        }

        public async Task SetAnimationDoerRun(Assets.ColonyShared.SharedCode.Entities.IAnimationDoer doer)
        {
            this.CheckValidateEntityInAsyncContext();
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.IAnimationDoerOwner), 0);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    await SetAnimationDoerImpl(doer);
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task UnsetAnimationDoer(Assets.ColonyShared.SharedCode.Entities.IAnimationDoer doer)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.NeedDeferredRpcOnMigrating())
                return UnsetAnimationDoerRunMaster(doer).AsTask();
            else
                return UnsetAnimationDoerRun(doer).AsTask();
        }

        private Func<Task> UnsetAnimationDoerCreateDeferredDelegate(Assets.ColonyShared.SharedCode.Entities.IAnimationDoer doer) => () =>
        {
            return UnsetAnimationDoer(doer);
        }

        ;
        public async ValueTask UnsetAnimationDoerRunMaster(Assets.ColonyShared.SharedCode.Entities.IAnimationDoer doer)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UnsetAnimationDoerCreateDeferredDelegate(doer), nameof(UnsetAnimationDoer));
            }

            await UnsetAnimationDoerRun(doer);
        }

        public async Task UnsetAnimationDoerRun(Assets.ColonyShared.SharedCode.Entities.IAnimationDoer doer)
        {
            this.CheckValidateEntityInAsyncContext();
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.IAnimationDoerOwner), 1);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    await UnsetAnimationDoerImpl(doer);
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}