// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class KnowledgeEngineAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IKnowledgeEngineAlways
    {
        public KnowledgeEngineAlways(SharedCode.Entities.Engine.IKnowledgeEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IKnowledgeEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 13:
                    currProperty = OwnerInformation;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1027258087;
    }

    public class KnowledgeEngineClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IKnowledgeEngineClientBroadcast
    {
        public KnowledgeEngineClientBroadcast(SharedCode.Entities.Engine.IKnowledgeEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IKnowledgeEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 13:
                    currProperty = OwnerInformation;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -918462072;
    }

    public class KnowledgeEngineClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IKnowledgeEngineClientFullApi
    {
        public KnowledgeEngineClientFullApi(SharedCode.Entities.Engine.IKnowledgeEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IKnowledgeEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObjectBase__;
            }
        }

        public override int TypeId => 900136016;
    }

    public class KnowledgeEngineClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IKnowledgeEngineClientFull
    {
        public KnowledgeEngineClientFull(SharedCode.Entities.Engine.IKnowledgeEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IKnowledgeEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObjectBase__;
            }
        }

        public IDeltaList<SharedCode.Aspects.Science.TechnologyDef> KnownTechnologies => __deltaObject__.KnownTechnologies;
        public IDeltaList<SharedCode.Aspects.Science.KnowledgeDef> KnownKnowledges => __deltaObject__.KnownKnowledges;
        public IDeltaList<SharedCode.Aspects.Science.KnowledgeRecordDef> ShownKnowledgeRecords => __deltaObject__.ShownKnowledgeRecords;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> TryToActivate(SharedCode.Aspects.Science.TechnologyDef technologyDef, bool doActivate)
        {
            return __deltaObject__.TryToActivate(technologyDef, doActivate);
        }

        public System.Threading.Tasks.Task<bool> CanChangeRPoints(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement)
        {
            return __deltaObject__.CanChangeRPoints(techPointCounts, isIncrement);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> AddShownKnowledgeRecord(SharedCode.Aspects.Science.KnowledgeRecordDef knowledgeRecordDef)
        {
            return __deltaObject__.AddShownKnowledgeRecord(knowledgeRecordDef);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = KnownTechnologies;
                    break;
                case 11:
                    currProperty = KnownKnowledges;
                    break;
                case 12:
                    currProperty = ShownKnowledgeRecords;
                    break;
                case 13:
                    currProperty = OwnerInformation;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1383139168;
    }

    public class KnowledgeEngineServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IKnowledgeEngineServerApi
    {
        public KnowledgeEngineServerApi(SharedCode.Entities.Engine.IKnowledgeEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IKnowledgeEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1725936672;
    }

    public class KnowledgeEngineServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IKnowledgeEngineServer
    {
        public KnowledgeEngineServer(SharedCode.Entities.Engine.IKnowledgeEngine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.IKnowledgeEngine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.IKnowledgeEngine)__deltaObjectBase__;
            }
        }

        public IDeltaList<SharedCode.Aspects.Science.TechnologyDef> KnownTechnologies => __deltaObject__.KnownTechnologies;
        public IDeltaList<SharedCode.Aspects.Science.KnowledgeDef> KnownKnowledges => __deltaObject__.KnownKnowledges;
        public IDeltaList<SharedCode.Aspects.Science.KnowledgeRecordDef> ShownKnowledgeRecords => __deltaObject__.ShownKnowledgeRecords;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> AddKnowledge(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef)
        {
            return __deltaObject__.AddKnowledge(knowledgeDef);
        }

        public System.Threading.Tasks.Task AddTechnology(SharedCode.Aspects.Science.TechnologyDef technologyDef)
        {
            return __deltaObject__.AddTechnology(technologyDef);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> Explore(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, SharedCode.Aspects.Science.TechPointCountDef[] rewardPoints)
        {
            return __deltaObject__.Explore(knowledgeDef, rewardPoints);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> TryToActivate(SharedCode.Aspects.Science.TechnologyDef technologyDef, bool doActivate)
        {
            return __deltaObject__.TryToActivate(technologyDef, doActivate);
        }

        public System.Threading.Tasks.Task<bool> CanChangeRPoints(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement)
        {
            return __deltaObject__.CanChangeRPoints(techPointCounts, isIncrement);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Engine.TechnologyOperationResult> AddShownKnowledgeRecord(SharedCode.Aspects.Science.KnowledgeRecordDef knowledgeRecordDef)
        {
            return __deltaObject__.AddShownKnowledgeRecord(knowledgeRecordDef);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = KnownTechnologies;
                    break;
                case 11:
                    currProperty = KnownKnowledges;
                    break;
                case 12:
                    currProperty = ShownKnowledgeRecords;
                    break;
                case 13:
                    currProperty = OwnerInformation;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 842002558;
    }
}