// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class SpatialTriggerEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpatialTriggerEntityAlways
    {
        public SpatialTriggerEntityAlways(SharedCode.AI.ISpatialTriggerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ISpatialTriggerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ISpatialTriggerEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = MapOwner;
                    break;
                case 12:
                    currProperty = StaticIdFromExport;
                    break;
                case 13:
                    currProperty = Name;
                    break;
                case 14:
                    currProperty = Prefab;
                    break;
                case 15:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 16:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 18:
                    currProperty = WorldSpaced;
                    break;
                case 19:
                    currProperty = Wizard;
                    break;
                case 21:
                    currProperty = MovementSync;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -641644383;
    }

    public class SpatialTriggerEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpatialTriggerEntityClientBroadcast
    {
        public SpatialTriggerEntityClientBroadcast(SharedCode.AI.ISpatialTriggerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ISpatialTriggerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ISpatialTriggerEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = MapOwner;
                    break;
                case 12:
                    currProperty = StaticIdFromExport;
                    break;
                case 13:
                    currProperty = Name;
                    break;
                case 14:
                    currProperty = Prefab;
                    break;
                case 15:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 16:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 18:
                    currProperty = WorldSpaced;
                    break;
                case 19:
                    currProperty = Wizard;
                    break;
                case 20:
                    currProperty = SlaveWizardHolder;
                    break;
                case 21:
                    currProperty = MovementSync;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1682941799;
    }

    public class SpatialTriggerEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpatialTriggerEntityClientFullApi
    {
        public SpatialTriggerEntityClientFullApi(SharedCode.AI.ISpatialTriggerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ISpatialTriggerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ISpatialTriggerEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -2088825716;
    }

    public class SpatialTriggerEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpatialTriggerEntityClientFull
    {
        public SpatialTriggerEntityClientFull(SharedCode.AI.ISpatialTriggerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ISpatialTriggerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ISpatialTriggerEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = MapOwner;
                    break;
                case 12:
                    currProperty = StaticIdFromExport;
                    break;
                case 13:
                    currProperty = Name;
                    break;
                case 14:
                    currProperty = Prefab;
                    break;
                case 15:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 16:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 18:
                    currProperty = WorldSpaced;
                    break;
                case 19:
                    currProperty = Wizard;
                    break;
                case 20:
                    currProperty = SlaveWizardHolder;
                    break;
                case 21:
                    currProperty = MovementSync;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 431111793;
    }

    public class SpatialTriggerEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpatialTriggerEntityServerApi
    {
        public SpatialTriggerEntityServerApi(SharedCode.AI.ISpatialTriggerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ISpatialTriggerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ISpatialTriggerEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1322224268;
    }

    public class SpatialTriggerEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpatialTriggerEntityServer
    {
        public SpatialTriggerEntityServer(SharedCode.AI.ISpatialTriggerEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ISpatialTriggerEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ISpatialTriggerEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = MapOwner;
                    break;
                case 12:
                    currProperty = StaticIdFromExport;
                    break;
                case 13:
                    currProperty = Name;
                    break;
                case 14:
                    currProperty = Prefab;
                    break;
                case 15:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 16:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 18:
                    currProperty = WorldSpaced;
                    break;
                case 19:
                    currProperty = Wizard;
                    break;
                case 20:
                    currProperty = SlaveWizardHolder;
                    break;
                case 21:
                    currProperty = MovementSync;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 2136445722;
    }
}