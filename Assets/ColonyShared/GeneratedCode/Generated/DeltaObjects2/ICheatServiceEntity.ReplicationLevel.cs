// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class CheatServiceAgentEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityAlways
    {
        public CheatServiceAgentEntityAlways(SharedCode.Entities.Service.ICheatServiceAgentEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceAgentEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceAgentEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -2136736141;
    }

    public class CheatServiceAgentEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityClientBroadcast
    {
        public CheatServiceAgentEntityClientBroadcast(SharedCode.Entities.Service.ICheatServiceAgentEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceAgentEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceAgentEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1660208685;
    }

    public class CheatServiceAgentEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityClientFullApi
    {
        public CheatServiceAgentEntityClientFullApi(SharedCode.Entities.Service.ICheatServiceAgentEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceAgentEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceAgentEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -144339525;
    }

    public class CheatServiceAgentEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityClientFull
    {
        public CheatServiceAgentEntityClientFull(SharedCode.Entities.Service.ICheatServiceAgentEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceAgentEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceAgentEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -828639883;
    }

    public class CheatServiceAgentEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityServerApi
    {
        public CheatServiceAgentEntityServerApi(SharedCode.Entities.Service.ICheatServiceAgentEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceAgentEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceAgentEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -13933702;
    }

    public class CheatServiceAgentEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceAgentEntityServer
    {
        public CheatServiceAgentEntityServer(SharedCode.Entities.Service.ICheatServiceAgentEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceAgentEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceAgentEntity)__deltaObjectBase__;
            }
        }

        public System.Threading.Tasks.Task<string> GetRepositoryEntitiesCount()
        {
            return __deltaObject__.GetRepositoryEntitiesCount();
        }

        public System.Threading.Tasks.Task DumpRepository()
        {
            return __deltaObject__.DumpRepository();
        }

        public System.Threading.Tasks.Task ForceGC(int count)
        {
            return __deltaObject__.ForceGC(count);
        }

        public System.Threading.Tasks.Task SetGCEnabled(bool enabled)
        {
            return __deltaObject__.SetGCEnabled(enabled);
        }

        public override int TypeId => 966720458;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class CheatServiceEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityAlways
    {
        public CheatServiceEntityAlways(SharedCode.Entities.Service.ICheatServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 524962118;
    }

    public class CheatServiceEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityClientBroadcast
    {
        public CheatServiceEntityClientBroadcast(SharedCode.Entities.Service.ICheatServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceEntity)__deltaObjectBase__;
            }
        }

        public System.Threading.Tasks.Task AddSomeItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> prototypeNames, SharedCode.EntitySystem.PropertyAddress source)
        {
            return __deltaObject__.AddSomeItems(prototypeNames, source);
        }

        public System.Threading.Tasks.Task AddItemsInSlot(SharedCode.Entities.ItemResourcePack prototypeName, SharedCode.EntitySystem.PropertyAddress source, int slot)
        {
            return __deltaObject__.AddItemsInSlot(prototypeName, source, slot);
        }

        public System.Threading.Tasks.Task AddQuest(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest, System.Guid characterId)
        {
            return __deltaObject__.AddQuest(quest, characterId);
        }

        public System.Threading.Tasks.Task AddTechPoints(SharedCode.Aspects.Science.TechPointCount[] techPointCounts, System.Guid characterId)
        {
            return __deltaObject__.AddTechPoints(techPointCounts, characterId);
        }

        public System.Threading.Tasks.Task AddKnowledge(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, System.Guid characterId)
        {
            return __deltaObject__.AddKnowledge(knowledgeDef, characterId);
        }

        public System.Threading.Tasks.Task SpawnInteractiveObjectEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position)
        {
            return __deltaObject__.SpawnInteractiveObjectEntity(entityDef, position);
        }

        public System.Threading.Tasks.Task SpawnNewMineableEntity(SharedCode.Entities.GameObjectEntities.MineableEntityDef entityDef, SharedCode.Utils.Vector3 position)
        {
            return __deltaObject__.SpawnNewMineableEntity(entityDef, position);
        }

        public System.Threading.Tasks.Task SpawnInteractiveEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position)
        {
            return __deltaObject__.SpawnInteractiveEntity(entityDef, position);
        }

        public System.Threading.Tasks.Task<string> GetRepositoryEntitiesCount()
        {
            return __deltaObject__.GetRepositoryEntitiesCount();
        }

        public System.Threading.Tasks.Task<string> GetRepositoryEntitiesCountOnAllRepositories()
        {
            return __deltaObject__.GetRepositoryEntitiesCountOnAllRepositories();
        }

        public System.Threading.Tasks.Task<string> SetVisibilityRadius(float enterRadius, float leaveRadius)
        {
            return __deltaObject__.SetVisibilityRadius(enterRadius, leaveRadius);
        }

        public System.Threading.Tasks.Task<string> GetTooLongEntityWaitQueues()
        {
            return __deltaObject__.GetTooLongEntityWaitQueues();
        }

        public System.Threading.Tasks.Task PrintBrokenLocomotions()
        {
            return __deltaObject__.PrintBrokenLocomotions();
        }

        public System.Threading.Tasks.Task SetDebugMobPositionLogging(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus, bool dump)
        {
            return __deltaObject__.SetDebugMobPositionLogging(outerRef, enabledStatus, dump);
        }

        public System.Threading.Tasks.Task SetCurveLoggerState(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool enabledStatus, bool dump, bool serverOnly, string loggerName, System.Guid dumpId)
        {
            return __deltaObject__.SetCurveLoggerState(charRef, enabledStatus, dump, serverOnly, loggerName, dumpId);
        }

        public System.Threading.Tasks.Task SetLoggableEnable(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus)
        {
            return __deltaObject__.SetLoggableEnable(outerRef, enabledStatus);
        }

        public System.Threading.Tasks.Task MainUnityThreadOnServerSleep(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime)
        {
            return __deltaObject__.MainUnityThreadOnServerSleep(charRef, isOn, sleepTime, delayBeforeSleep, repeatTime);
        }

        public System.Threading.Tasks.Task CastSpell(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> entityRef, SharedCode.Wizardry.SpellCast spellCast)
        {
            return __deltaObject__.CastSpell(entityRef, spellCast);
        }

        public System.Threading.Tasks.Task SetServerCheatVariable(Assets.Src.ResourcesSystem.Base.BaseResource resource, string value)
        {
            return __deltaObject__.SetServerCheatVariable(resource, value);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> TestCheckPZ15200Done(float waitBeforeReplicate)
        {
            return __deltaObject__.TestCheckPZ15200Done(waitBeforeReplicate);
        }

        public System.Threading.Tasks.Task EnableWizardLogger(ResourceSystem.Utils.OuterRef entity, bool enable)
        {
            return __deltaObject__.EnableWizardLogger(entity, enable);
        }

        public System.Threading.Tasks.Task SetGender(ResourceSystem.Utils.OuterRef entity, ResourceSystem.Aspects.Misc.GenderDef gender)
        {
            return __deltaObject__.SetGender(entity, gender);
        }

        public System.Threading.Tasks.Task InvokeTrauma(ResourceSystem.Utils.OuterRef entity, string trauma)
        {
            return __deltaObject__.InvokeTrauma(entity, trauma);
        }

        public System.Threading.Tasks.Task StopTrauma(ResourceSystem.Utils.OuterRef entity, string trauma)
        {
            return __deltaObject__.StopTrauma(entity, trauma);
        }

        public event System.Func<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, bool, bool, string, System.Guid, System.Threading.Tasks.Task> SetCurveLoggerEvent
        {
            add
            {
                __deltaObject__.SetCurveLoggerEvent += value;
            }

            remove
            {
                __deltaObject__.SetCurveLoggerEvent -= value;
            }
        }

        public override int TypeId => -1197178919;
    }

    public class CheatServiceEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityClientFullApi
    {
        public CheatServiceEntityClientFullApi(SharedCode.Entities.Service.ICheatServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 899750895;
    }

    public class CheatServiceEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityClientFull
    {
        public CheatServiceEntityClientFull(SharedCode.Entities.Service.ICheatServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceEntity)__deltaObjectBase__;
            }
        }

        public System.Threading.Tasks.Task AddSomeItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> prototypeNames, SharedCode.EntitySystem.PropertyAddress source)
        {
            return __deltaObject__.AddSomeItems(prototypeNames, source);
        }

        public System.Threading.Tasks.Task AddItemsInSlot(SharedCode.Entities.ItemResourcePack prototypeName, SharedCode.EntitySystem.PropertyAddress source, int slot)
        {
            return __deltaObject__.AddItemsInSlot(prototypeName, source, slot);
        }

        public System.Threading.Tasks.Task AddQuest(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest, System.Guid characterId)
        {
            return __deltaObject__.AddQuest(quest, characterId);
        }

        public System.Threading.Tasks.Task AddTechPoints(SharedCode.Aspects.Science.TechPointCount[] techPointCounts, System.Guid characterId)
        {
            return __deltaObject__.AddTechPoints(techPointCounts, characterId);
        }

        public System.Threading.Tasks.Task AddKnowledge(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, System.Guid characterId)
        {
            return __deltaObject__.AddKnowledge(knowledgeDef, characterId);
        }

        public System.Threading.Tasks.Task SpawnInteractiveObjectEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position)
        {
            return __deltaObject__.SpawnInteractiveObjectEntity(entityDef, position);
        }

        public System.Threading.Tasks.Task SpawnNewMineableEntity(SharedCode.Entities.GameObjectEntities.MineableEntityDef entityDef, SharedCode.Utils.Vector3 position)
        {
            return __deltaObject__.SpawnNewMineableEntity(entityDef, position);
        }

        public System.Threading.Tasks.Task SpawnInteractiveEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position)
        {
            return __deltaObject__.SpawnInteractiveEntity(entityDef, position);
        }

        public System.Threading.Tasks.Task<string> GetRepositoryEntitiesCount()
        {
            return __deltaObject__.GetRepositoryEntitiesCount();
        }

        public System.Threading.Tasks.Task<string> GetRepositoryEntitiesCountOnAllRepositories()
        {
            return __deltaObject__.GetRepositoryEntitiesCountOnAllRepositories();
        }

        public System.Threading.Tasks.Task<string> SetVisibilityRadius(float enterRadius, float leaveRadius)
        {
            return __deltaObject__.SetVisibilityRadius(enterRadius, leaveRadius);
        }

        public System.Threading.Tasks.Task<string> GetTooLongEntityWaitQueues()
        {
            return __deltaObject__.GetTooLongEntityWaitQueues();
        }

        public System.Threading.Tasks.Task<int> GetCCU()
        {
            return __deltaObject__.GetCCU();
        }

        public System.Threading.Tasks.Task SetDebugMode(bool enabled)
        {
            return __deltaObject__.SetDebugMode(enabled);
        }

        public System.Threading.Tasks.Task SetDebugMobs(bool enabledStatus, bool hard)
        {
            return __deltaObject__.SetDebugMobs(enabledStatus, hard);
        }

        public System.Threading.Tasks.Task SetDebugSpells(bool enabledStatus)
        {
            return __deltaObject__.SetDebugSpells(enabledStatus);
        }

        public System.Threading.Tasks.Task PrintBrokenLocomotions()
        {
            return __deltaObject__.PrintBrokenLocomotions();
        }

        public System.Threading.Tasks.ValueTask DamageAllItems(System.Guid character, float percent)
        {
            return __deltaObject__.DamageAllItems(character, percent);
        }

        public System.Threading.Tasks.Task SetDebugMobPositionLogging(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus, bool dump)
        {
            return __deltaObject__.SetDebugMobPositionLogging(outerRef, enabledStatus, dump);
        }

        public System.Threading.Tasks.Task SetCurveLoggerState(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool enabledStatus, bool dump, bool serverOnly, string loggerName, System.Guid dumpId)
        {
            return __deltaObject__.SetCurveLoggerState(charRef, enabledStatus, dump, serverOnly, loggerName, dumpId);
        }

        public System.Threading.Tasks.Task SetLoggableEnable(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus)
        {
            return __deltaObject__.SetLoggableEnable(outerRef, enabledStatus);
        }

        public System.Threading.Tasks.Task MainUnityThreadOnServerSleep(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime)
        {
            return __deltaObject__.MainUnityThreadOnServerSleep(charRef, isOn, sleepTime, delayBeforeSleep, repeatTime);
        }

        public System.Threading.Tasks.Task<bool> ChangeHealth(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> victimEntity, int deltaValue)
        {
            return __deltaObject__.ChangeHealth(victimEntity, deltaValue);
        }

        public System.Threading.Tasks.Task<bool> Godmode(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> applicantEntityRef, bool enable)
        {
            return __deltaObject__.Godmode(applicantEntityRef, enable);
        }

        public System.Threading.Tasks.Task<SharedCode.Utils.Vector3[]> ResolveCharacterCoords(System.Guid[] guids)
        {
            return __deltaObject__.ResolveCharacterCoords(guids);
        }

        public System.Threading.Tasks.Task ForceGC(int count, System.Guid repositoryId)
        {
            return __deltaObject__.ForceGC(count, repositoryId);
        }

        public System.Threading.Tasks.Task ForceSelfCompactionGC()
        {
            return __deltaObject__.ForceSelfCompactionGC();
        }

        public System.Threading.Tasks.Task CastSpell(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> entityRef, SharedCode.Wizardry.SpellCast spellCast)
        {
            return __deltaObject__.CastSpell(entityRef, spellCast);
        }

        public System.Threading.Tasks.Task SetServerCheatVariable(Assets.Src.ResourcesSystem.Base.BaseResource resource, string value)
        {
            return __deltaObject__.SetServerCheatVariable(resource, value);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> TestCheckPZ15200Done(float waitBeforeReplicate)
        {
            return __deltaObject__.TestCheckPZ15200Done(waitBeforeReplicate);
        }

        public System.Threading.Tasks.Task EnableWizardLogger(ResourceSystem.Utils.OuterRef entity, bool enable)
        {
            return __deltaObject__.EnableWizardLogger(entity, enable);
        }

        public System.Threading.Tasks.Task SetGender(ResourceSystem.Utils.OuterRef entity, ResourceSystem.Aspects.Misc.GenderDef gender)
        {
            return __deltaObject__.SetGender(entity, gender);
        }

        public System.Threading.Tasks.Task InvokeTrauma(ResourceSystem.Utils.OuterRef entity, string trauma)
        {
            return __deltaObject__.InvokeTrauma(entity, trauma);
        }

        public System.Threading.Tasks.Task StopTrauma(ResourceSystem.Utils.OuterRef entity, string trauma)
        {
            return __deltaObject__.StopTrauma(entity, trauma);
        }

        public event System.Func<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, bool, bool, string, System.Guid, System.Threading.Tasks.Task> SetCurveLoggerEvent
        {
            add
            {
                __deltaObject__.SetCurveLoggerEvent += value;
            }

            remove
            {
                __deltaObject__.SetCurveLoggerEvent -= value;
            }
        }

        public override int TypeId => 233047958;
    }

    public class CheatServiceEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityServerApi
    {
        public CheatServiceEntityServerApi(SharedCode.Entities.Service.ICheatServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1418463111;
    }

    public class CheatServiceEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICheatServiceEntityServer
    {
        public CheatServiceEntityServer(SharedCode.Entities.Service.ICheatServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.ICheatServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.ICheatServiceEntity)__deltaObjectBase__;
            }
        }

        public System.Threading.Tasks.Task AddSomeItems(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> prototypeNames, SharedCode.EntitySystem.PropertyAddress source)
        {
            return __deltaObject__.AddSomeItems(prototypeNames, source);
        }

        public System.Threading.Tasks.Task AddItemsInSlot(SharedCode.Entities.ItemResourcePack prototypeName, SharedCode.EntitySystem.PropertyAddress source, int slot)
        {
            return __deltaObject__.AddItemsInSlot(prototypeName, source, slot);
        }

        public System.Threading.Tasks.Task AddQuest(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest, System.Guid characterId)
        {
            return __deltaObject__.AddQuest(quest, characterId);
        }

        public System.Threading.Tasks.Task AddTechPoints(SharedCode.Aspects.Science.TechPointCount[] techPointCounts, System.Guid characterId)
        {
            return __deltaObject__.AddTechPoints(techPointCounts, characterId);
        }

        public System.Threading.Tasks.Task AddKnowledge(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, System.Guid characterId)
        {
            return __deltaObject__.AddKnowledge(knowledgeDef, characterId);
        }

        public System.Threading.Tasks.Task SpawnInteractiveObjectEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position)
        {
            return __deltaObject__.SpawnInteractiveObjectEntity(entityDef, position);
        }

        public System.Threading.Tasks.Task SpawnNewMineableEntity(SharedCode.Entities.GameObjectEntities.MineableEntityDef entityDef, SharedCode.Utils.Vector3 position)
        {
            return __deltaObject__.SpawnNewMineableEntity(entityDef, position);
        }

        public System.Threading.Tasks.Task SpawnInteractiveEntity(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position)
        {
            return __deltaObject__.SpawnInteractiveEntity(entityDef, position);
        }

        public System.Threading.Tasks.Task<string> GetRepositoryEntitiesCount()
        {
            return __deltaObject__.GetRepositoryEntitiesCount();
        }

        public System.Threading.Tasks.Task<string> GetRepositoryEntitiesCountOnAllRepositories()
        {
            return __deltaObject__.GetRepositoryEntitiesCountOnAllRepositories();
        }

        public System.Threading.Tasks.Task DumpAllServerRepositories()
        {
            return __deltaObject__.DumpAllServerRepositories();
        }

        public System.Threading.Tasks.Task<string> SetVisibilityRadius(float enterRadius, float leaveRadius)
        {
            return __deltaObject__.SetVisibilityRadius(enterRadius, leaveRadius);
        }

        public System.Threading.Tasks.Task<string> GetTooLongEntityWaitQueues()
        {
            return __deltaObject__.GetTooLongEntityWaitQueues();
        }

        public System.Threading.Tasks.Task<int> GetCCU()
        {
            return __deltaObject__.GetCCU();
        }

        public System.Threading.Tasks.Task SetDebugMode(bool enabled)
        {
            return __deltaObject__.SetDebugMode(enabled);
        }

        public System.Threading.Tasks.Task SetDebugMobs(bool enabledStatus, bool hard)
        {
            return __deltaObject__.SetDebugMobs(enabledStatus, hard);
        }

        public System.Threading.Tasks.Task SetDebugSpells(bool enabledStatus)
        {
            return __deltaObject__.SetDebugSpells(enabledStatus);
        }

        public System.Threading.Tasks.Task PrintBrokenLocomotions()
        {
            return __deltaObject__.PrintBrokenLocomotions();
        }

        public System.Threading.Tasks.ValueTask DamageAllItems(System.Guid character, float percent)
        {
            return __deltaObject__.DamageAllItems(character, percent);
        }

        public System.Threading.Tasks.Task SetDebugMobPositionLogging(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus, bool dump)
        {
            return __deltaObject__.SetDebugMobPositionLogging(outerRef, enabledStatus, dump);
        }

        public System.Threading.Tasks.Task SetCurveLoggerState(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool enabledStatus, bool dump, bool serverOnly, string loggerName, System.Guid dumpId)
        {
            return __deltaObject__.SetCurveLoggerState(charRef, enabledStatus, dump, serverOnly, loggerName, dumpId);
        }

        public System.Threading.Tasks.Task SetLoggableEnable(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus)
        {
            return __deltaObject__.SetLoggableEnable(outerRef, enabledStatus);
        }

        public System.Threading.Tasks.Task MainUnityThreadOnServerSleep(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime)
        {
            return __deltaObject__.MainUnityThreadOnServerSleep(charRef, isOn, sleepTime, delayBeforeSleep, repeatTime);
        }

        public System.Threading.Tasks.Task<bool> ChangeHealth(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> victimEntity, int deltaValue)
        {
            return __deltaObject__.ChangeHealth(victimEntity, deltaValue);
        }

        public System.Threading.Tasks.Task<bool> Godmode(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> applicantEntityRef, bool enable)
        {
            return __deltaObject__.Godmode(applicantEntityRef, enable);
        }

        public System.Threading.Tasks.Task Version01()
        {
            return __deltaObject__.Version01();
        }

        public System.Threading.Tasks.Task<SharedCode.Utils.Vector3[]> ResolveCharacterCoords(System.Guid[] guids)
        {
            return __deltaObject__.ResolveCharacterCoords(guids);
        }

        public System.Threading.Tasks.Task ForceGC(int count, System.Guid repositoryId)
        {
            return __deltaObject__.ForceGC(count, repositoryId);
        }

        public System.Threading.Tasks.Task ForceSelfCompactionGC()
        {
            return __deltaObject__.ForceSelfCompactionGC();
        }

        public System.Threading.Tasks.Task SetGCEnabled(bool enabled, System.Guid repositoryId)
        {
            return __deltaObject__.SetGCEnabled(enabled, repositoryId);
        }

        public System.Threading.Tasks.Task CastSpell(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> entityRef, SharedCode.Wizardry.SpellCast spellCast)
        {
            return __deltaObject__.CastSpell(entityRef, spellCast);
        }

        public System.Threading.Tasks.Task SetServerCheatVariable(Assets.Src.ResourcesSystem.Base.BaseResource resource, string value)
        {
            return __deltaObject__.SetServerCheatVariable(resource, value);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> TestCheckPZ15200Done(float waitBeforeReplicate)
        {
            return __deltaObject__.TestCheckPZ15200Done(waitBeforeReplicate);
        }

        public System.Threading.Tasks.Task EnableWizardLogger(ResourceSystem.Utils.OuterRef entity, bool enable)
        {
            return __deltaObject__.EnableWizardLogger(entity, enable);
        }

        public System.Threading.Tasks.Task SetGender(ResourceSystem.Utils.OuterRef entity, ResourceSystem.Aspects.Misc.GenderDef gender)
        {
            return __deltaObject__.SetGender(entity, gender);
        }

        public System.Threading.Tasks.Task InvokeTrauma(ResourceSystem.Utils.OuterRef entity, string trauma)
        {
            return __deltaObject__.InvokeTrauma(entity, trauma);
        }

        public System.Threading.Tasks.Task StopTrauma(ResourceSystem.Utils.OuterRef entity, string trauma)
        {
            return __deltaObject__.StopTrauma(entity, trauma);
        }

        public event System.Func<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>, bool, bool, string, System.Guid, System.Threading.Tasks.Task> SetCurveLoggerEvent
        {
            add
            {
                __deltaObject__.SetCurveLoggerEvent += value;
            }

            remove
            {
                __deltaObject__.SetCurveLoggerEvent -= value;
            }
        }

        public override int TypeId => -633084460;
    }
}