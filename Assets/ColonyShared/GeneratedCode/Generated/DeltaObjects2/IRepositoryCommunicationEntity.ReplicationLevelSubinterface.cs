// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, 502553254, typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity))]
    public interface IRepositoryCommunicationEntityAlways : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsAlways, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Cloud.CloudNodeType CloudNodeType
        {
            get;
        }

        SharedCode.Entities.Cloud.WantsToDisconnectEventProxy WantsToDisconnect
        {
            get;
        }

        System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatch updateBatch);
        System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer);
        System.Threading.Tasks.Task EntityUpload(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer);
        System.Threading.Tasks.Task EntityDestroyed(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer);
        System.Threading.Tasks.Task EntityDowngrade(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer);
        System.Threading.Tasks.Task Dump(string fileName);
        System.Threading.Tasks.Task DumpEntity(int typeId, System.Guid entityId, string fileName);
        System.Threading.Tasks.Task DumpEntitySerializedData(string fileName, int entityTypeId, System.Guid entityId, long replicationMask);
        System.Threading.Tasks.Task<bool> SubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel);
        System.Threading.Tasks.Task<bool> UnsubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel);
        System.Threading.Tasks.Task<string> GetEntityStatus(int typeId, System.Guid entityId);
        System.Threading.Tasks.Task<string> GetAllServiceEntityStatus();
        System.Threading.Tasks.Task<bool> ForceCloseConnection(System.Guid userId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, -598286690, typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity))]
    public interface IRepositoryCommunicationEntityClientBroadcast : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsClientBroadcast, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Cloud.CloudNodeType CloudNodeType
        {
            get;
        }

        SharedCode.Entities.Cloud.WantsToDisconnectEventProxy WantsToDisconnect
        {
            get;
        }

        System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatch updateBatch);
        System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer);
        System.Threading.Tasks.Task EntityUpload(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer);
        System.Threading.Tasks.Task EntityDestroyed(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer);
        System.Threading.Tasks.Task EntityDowngrade(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer);
        System.Threading.Tasks.Task Dump(string fileName);
        System.Threading.Tasks.Task DumpEntity(int typeId, System.Guid entityId, string fileName);
        System.Threading.Tasks.Task DumpEntitySerializedData(string fileName, int entityTypeId, System.Guid entityId, long replicationMask);
        System.Threading.Tasks.Task<bool> SubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel);
        System.Threading.Tasks.Task<bool> UnsubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel);
        System.Threading.Tasks.Task<string> GetEntityStatus(int typeId, System.Guid entityId);
        System.Threading.Tasks.Task<string> GetAllServiceEntityStatus();
        System.Threading.Tasks.Task<bool> ForceCloseConnection(System.Guid userId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, -976892674, typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity))]
    public interface IRepositoryCommunicationEntityClientFullApi : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsClientFullApi, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, 860431896, typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity))]
    public interface IRepositoryCommunicationEntityClientFull : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsClientFull, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Cloud.CloudNodeType CloudNodeType
        {
            get;
        }

        SharedCode.Entities.Cloud.WantsToDisconnectEventProxy WantsToDisconnect
        {
            get;
        }

        System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatch updateBatch);
        System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer);
        System.Threading.Tasks.Task EntityUpload(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer);
        System.Threading.Tasks.Task EntityDestroyed(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer);
        System.Threading.Tasks.Task EntityDowngrade(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer);
        System.Threading.Tasks.Task Dump(string fileName);
        System.Threading.Tasks.Task DumpEntity(int typeId, System.Guid entityId, string fileName);
        System.Threading.Tasks.Task DumpEntitySerializedData(string fileName, int entityTypeId, System.Guid entityId, long replicationMask);
        System.Threading.Tasks.Task<bool> SubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel);
        System.Threading.Tasks.Task<bool> UnsubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel);
        System.Threading.Tasks.Task<string> GetEntityStatus(int typeId, System.Guid entityId);
        System.Threading.Tasks.Task<string> GetAllServiceEntityStatus();
        System.Threading.Tasks.Task<bool> ForceCloseConnection(System.Guid userId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, -1930845070, typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity))]
    public interface IRepositoryCommunicationEntityServerApi : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsServerApi, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, -1415252371, typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity))]
    public interface IRepositoryCommunicationEntityServer : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsServer, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        string ConfigId
        {
            get;
        }

        int Num
        {
            get;
        }

        SharedCode.Entities.Cloud.EndpointAddress InternalAddress
        {
            get;
        }

        SharedCode.Entities.Cloud.EndpointAddress ExternalAddress
        {
            get;
        }

        bool CloudRequirementsMet
        {
            get;
        }

        bool InitializationTasksCompleted
        {
            get;
        }

        bool ExternalCommunicationNodeOpen
        {
            get;
        }

        SharedCode.Cloud.CloudNodeType CloudNodeType
        {
            get;
        }

        int ProcessId
        {
            get;
        }

        SharedCode.Entities.Cloud.WantsToDisconnectEventProxy WantsToDisconnect
        {
            get;
        }

        System.Threading.Tasks.Task<bool> FireOnDisconnect();
        System.Threading.Tasks.Task<bool> NotifyOfExistingConnections(System.Collections.Generic.List<SharedCode.Entities.Cloud.EndpointAddress> endpoints);
        System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatch updateBatch);
        System.Threading.Tasks.Task EntityUpdate(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer);
        System.Threading.Tasks.Task EntityUpload(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer);
        System.Threading.Tasks.Task EntityDestroyed(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer);
        System.Threading.Tasks.Task EntityDowngrade(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer);
        System.Threading.Tasks.Task Dump(string fileName);
        System.Threading.Tasks.Task DumpEntity(int typeId, System.Guid entityId, string fileName);
        System.Threading.Tasks.Task DumpEntitySerializedData(string fileName, int entityTypeId, System.Guid entityId, long replicationMask);
        System.Threading.Tasks.Task<bool> SubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel);
        System.Threading.Tasks.Task<bool> UnsubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel);
        System.Threading.Tasks.Task<string> GetEntityStatus(int typeId, System.Guid entityId);
        System.Threading.Tasks.Task<string> GetAllServiceEntityStatus();
        System.Threading.Tasks.Task<bool> ForceCloseConnection(System.Guid userId);
        System.Threading.Tasks.Task<SharedCode.Entities.Cloud.StartMigrateEntityResult> StartMigrateEntity(int entityTypeId, System.Guid entityId);
        System.Threading.Tasks.Task<SharedCode.EntitySystem.FinishMigrateEntityResult> FinishMigrateEntity(int entityTypeId, System.Guid entityId, System.Collections.Generic.Dictionary<(int, System.Guid), System.Collections.Generic.Dictionary<System.Guid, int>> replicateRefsVersions);
        System.Threading.Tasks.Task DispatchMigratedEntityDeferredRpc(int entityTypeId, System.Guid entityId);
    }
}