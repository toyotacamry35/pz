// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Entities.Service;
using SharedCode.EntitySystem.ChainCalls;
using SharedCode.Logging;
using SharedCode.OurSimpleIoC;
using SharedCode.Utils;
using System.Linq;
using System.Collections.Generic;
using System.CodeDom.Compiler;

namespace GeneratedCode.DeltaObjects.Chain
{
    [GeneratedCode("CodeGen", "1.0")]
    public class UnityCheatServiceEntityChainProxy : BaseChainEntity
    {
        public UnityCheatServiceEntityChainProxy(Assets.ColonyShared.SharedCode.Entities.Service.IUnityCheatServiceEntity entity): base(entity)
        {
        }

        public UnityCheatServiceEntityChainProxy(Assets.ColonyShared.SharedCode.Entities.Service.IUnityCheatServiceEntity entity, IChainedEntity fromChain): base(entity, fromChain)
        {
        }

        public UnityCheatServiceEntityChainProxy MainUnityThreadOnServerSleep(ChainArgument<bool> isOn, ChainArgument<float> sleepTime, ChainArgument<float> delayBeforeSleep, ChainArgument<float> repeatTime)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (isOn is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)isOn).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (bool)isOn);
                if (sleepTime is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)sleepTime).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (float)sleepTime);
                if (delayBeforeSleep is IChainResult)
                    argumetRefs.Add(2, ((IChainResult)delayBeforeSleep).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (float)delayBeforeSleep);
                if (repeatTime is IChainResult)
                    argumetRefs.Add(3, ((IChainResult)repeatTime).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (float)repeatTime);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 0, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public UnityCheatServiceEntityChainProxy SetCurveLoggerState(ChainArgument<bool> enabledStatus, ChainArgument<bool> dump, ChainArgument<string> loggerName, ChainArgument<System.Guid> dumpId)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (enabledStatus is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)enabledStatus).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (bool)enabledStatus);
                if (dump is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)dump).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (bool)dump);
                if (loggerName is IChainResult)
                    argumetRefs.Add(2, ((IChainResult)loggerName).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (string)loggerName);
                if (dumpId is IChainResult)
                    argumetRefs.Add(3, ((IChainResult)dumpId).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (System.Guid)dumpId);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 1, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public UnityCheatServiceEntityChainProxy GetClosestPlayerSpawnPointTransform(ChainArgument<SharedCode.Utils.Vector3> pos)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (pos is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)pos).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.Utils.Vector3)pos);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 2, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public UnityCheatServiceEntityChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
        {
            chainBatch.Chain.Add(new ChainBlockPeriod(duration, repeat ? -1 : 0, fromUtcNow));
            return this;
        }

        public UnityCheatServiceEntityChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
        {
            chainBatch.Chain.Add(new ChainBlockPeriod(duration, count, fromUtcNow));
            return this;
        }

        public UnityCheatServiceEntityChainProxy StoreResult(string name)
        {
            ((ChainBlockCall)chainBatch.Chain.Last()).SetStoreResultKey(name);
            return this;
        }
    }

    public static partial class ChainProxyExtensions
    {
        public static UnityCheatServiceEntityChainProxy Chain(this Assets.ColonyShared.SharedCode.Entities.Service.IUnityCheatServiceEntity entity)
        {
            return new UnityCheatServiceEntityChainProxy(entity);
        }

        public static UnityCheatServiceEntityChainProxy ContinueChain(this Assets.ColonyShared.SharedCode.Entities.Service.IUnityCheatServiceEntity entity, IChainedEntity fromChain)
        {
            return new UnityCheatServiceEntityChainProxy(entity, fromChain);
        }
    }
}