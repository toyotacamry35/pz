// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using SharedCode.Logging;
using System.Collections.Generic;
using System.Linq;
using SharedCode.EntitySystem;

namespace GeneratedCode.DeltaObjects
{
    public partial class ToucherTestEntity
    {
        public override bool TryGetProperty<T>(int address, out T property)
        {
            switch (address)
            {
                case 10:
                    property = (T)(object)DeltaObjProperty;
                    return true;
                case 11:
                    property = (T)(object)dict;
                    return true;
                case 12:
                    property = (T)(object)flatDict;
                    return true;
                case 13:
                    property = (T)(object)flatList;
                    return true;
                case 14:
                    property = (T)(object)listOfChildren;
                    return true;
                case 15:
                    property = (T)(object)IntProperty;
                    return true;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    property = default;
                    return false;
            }
        }

        public override int GetIdOfChildNonDeltaObj(string childName)
        {
            if (childName == nameof(DeltaObjProperty))
                return 10;
            if (childName == nameof(dict))
                return 11;
            if (childName == nameof(flatDict))
                return 12;
            if (childName == nameof(flatList))
                return 13;
            if (childName == nameof(listOfChildren))
                return 14;
            if (childName == nameof(IntProperty))
                return 15;
            throw new System.InvalidOperationException($"Field {childName} is not a child of {this}");
        }
    }
}