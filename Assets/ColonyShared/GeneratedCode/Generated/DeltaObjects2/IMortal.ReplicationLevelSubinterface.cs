// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, 466841954, typeof(Assets.ColonyShared.SharedCode.Entities.IMortal))]
    public interface IMortalAlways : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        bool IsAlive
        {
            get;
        }

        bool PermaDead
        {
            get;
        }

        bool IsKnockedDown
        {
            get;
        }

        System.Threading.Tasks.Task<bool> GetIsAlive();
        event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> DieEvent;
        event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> ResurrectEvent;
        event System.Func<System.Threading.Tasks.Task> KnockedDown;
        event System.Func<System.Threading.Tasks.Task> ReviveFromKnockdown;
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, -628787190, typeof(Assets.ColonyShared.SharedCode.Entities.IMortal))]
    public interface IMortalClientBroadcast : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        bool IsAlive
        {
            get;
        }

        bool PermaDead
        {
            get;
        }

        bool IsKnockedDown
        {
            get;
        }

        long LastResurrectTime
        {
            get;
        }

        System.Threading.Tasks.Task<bool> GetIsAlive();
        event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> DieEvent;
        event System.Func<System.Guid, int, System.Threading.Tasks.Task> BeforeResurrectEvent;
        event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> ResurrectEvent;
        event System.Func<System.Threading.Tasks.Task> KnockedDown;
        event System.Func<System.Threading.Tasks.Task> ReviveFromKnockdown;
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, 1647574622, typeof(Assets.ColonyShared.SharedCode.Entities.IMortal))]
    public interface IMortalClientFullApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, 416114702, typeof(Assets.ColonyShared.SharedCode.Entities.IMortal))]
    public interface IMortalClientFull : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        bool IsAlive
        {
            get;
        }

        bool PermaDead
        {
            get;
        }

        bool IsKnockedDown
        {
            get;
        }

        long LastResurrectTime
        {
            get;
        }

        System.Threading.Tasks.Task<bool> GetIsAlive();
        System.Threading.Tasks.Task<bool> FinishOff();
        event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> DieEvent;
        event System.Func<System.Guid, int, System.Threading.Tasks.Task> BeforeResurrectEvent;
        event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> ResurrectEvent;
        event System.Func<System.Threading.Tasks.Task> KnockedDown;
        event System.Func<System.Threading.Tasks.Task> ReviveFromKnockdown;
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, 1339102040, typeof(Assets.ColonyShared.SharedCode.Entities.IMortal))]
    public interface IMortalServerApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, 1083125948, typeof(Assets.ColonyShared.SharedCode.Entities.IMortal))]
    public interface IMortalServer : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        bool IsAlive
        {
            get;
        }

        bool PermaDead
        {
            get;
        }

        bool IsKnockedDown
        {
            get;
        }

        long LastResurrectTime
        {
            get;
        }

        System.Threading.Tasks.Task<bool> GetIsAlive();
        System.Threading.Tasks.Task<bool> ZeroHealthReached();
        System.Threading.Tasks.Task<bool> Die();
        System.Threading.Tasks.Task<bool> Resurrect(SharedCode.Entities.GameObjectEntities.PositionRotation at);
        System.Threading.Tasks.Task<bool> KnockDown();
        System.Threading.Tasks.Task<bool> Revive();
        System.Threading.Tasks.Task<bool> FinishOff();
        System.Threading.Tasks.Task<bool> DeactivatePreDeathState();
        System.Threading.Tasks.Task AddStrike(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> objectRef);
        event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> DieEvent;
        event System.Func<System.Guid, int, System.Threading.Tasks.Task> BeforeResurrectEvent;
        event System.Func<System.Guid, int, SharedCode.Entities.GameObjectEntities.PositionRotation, System.Threading.Tasks.Task> ResurrectEvent;
        event System.Func<System.Threading.Tasks.Task> KnockedDown;
        event System.Func<System.Threading.Tasks.Task> ReviveFromKnockdown;
    }
}