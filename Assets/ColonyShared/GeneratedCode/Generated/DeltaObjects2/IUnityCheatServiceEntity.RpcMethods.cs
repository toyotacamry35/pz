// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class UnityCheatServiceEntity
    {
        public Task MainUnityThreadOnServerSleep(bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return MainUnityThreadOnServerSleepRunMaster(isOn, sleepTime, delayBeforeSleep, repeatTime).AsTask();
                else
                    return MainUnityThreadOnServerSleepRun(isOn, sleepTime, delayBeforeSleep, repeatTime).AsTask();
            else
                return SendFuncs.MainUnityThreadOnServerSleep(isOn, sleepTime, delayBeforeSleep, repeatTime, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> MainUnityThreadOnServerSleepCreateDeferredDelegate(bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime) => () =>
        {
            return MainUnityThreadOnServerSleep(isOn, sleepTime, delayBeforeSleep, repeatTime);
        }

        ;
        public async ValueTask MainUnityThreadOnServerSleepRunMaster(bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(MainUnityThreadOnServerSleepCreateDeferredDelegate(isOn, sleepTime, delayBeforeSleep, repeatTime), nameof(MainUnityThreadOnServerSleep));
            }

            await MainUnityThreadOnServerSleepRun(isOn, sleepTime, delayBeforeSleep, repeatTime);
        }

        public async ValueTask MainUnityThreadOnServerSleepRun(bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.Service.IUnityCheatServiceEntity), 0);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = MainUnityThreadOnServerSleepImpl(isOn, sleepTime, delayBeforeSleep, repeatTime);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task SetCurveLoggerState(bool enabledStatus, bool dump, string loggerName, System.Guid dumpId)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetCurveLoggerStateRunMaster(enabledStatus, dump, loggerName, dumpId).AsTask();
                else
                    return SetCurveLoggerStateRun(enabledStatus, dump, loggerName, dumpId).AsTask();
            else
                return SendFuncs.SetCurveLoggerState(enabledStatus, dump, loggerName, dumpId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> SetCurveLoggerStateCreateDeferredDelegate(bool enabledStatus, bool dump, string loggerName, System.Guid dumpId) => () =>
        {
            return SetCurveLoggerState(enabledStatus, dump, loggerName, dumpId);
        }

        ;
        public async ValueTask SetCurveLoggerStateRunMaster(bool enabledStatus, bool dump, string loggerName, System.Guid dumpId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetCurveLoggerStateCreateDeferredDelegate(enabledStatus, dump, loggerName, dumpId), nameof(SetCurveLoggerState));
            }

            await SetCurveLoggerStateRun(enabledStatus, dump, loggerName, dumpId);
        }

        public async ValueTask SetCurveLoggerStateRun(bool enabledStatus, bool dump, string loggerName, System.Guid dumpId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.Service.IUnityCheatServiceEntity), 1);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = SetCurveLoggerStateImpl(enabledStatus, dump, loggerName, dumpId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.Entities.Transform> GetClosestPlayerSpawnPointTransform(SharedCode.Utils.Vector3 pos)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetClosestPlayerSpawnPointTransformRunMaster(pos).AsTask();
                else
                    return GetClosestPlayerSpawnPointTransformRun(pos).AsTask();
            else
                return SendFuncs.GetClosestPlayerSpawnPointTransform(pos, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Transform>> GetClosestPlayerSpawnPointTransformCreateDeferredDelegate(SharedCode.Utils.Vector3 pos) => () =>
        {
            return GetClosestPlayerSpawnPointTransform(pos);
        }

        ;
        public async ValueTask<SharedCode.Entities.Transform> GetClosestPlayerSpawnPointTransformRunMaster(SharedCode.Utils.Vector3 pos)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetClosestPlayerSpawnPointTransformCreateDeferredDelegate(pos), nameof(GetClosestPlayerSpawnPointTransform));
            }

            return await GetClosestPlayerSpawnPointTransformRun(pos);
        }

        public async ValueTask<SharedCode.Entities.Transform> GetClosestPlayerSpawnPointTransformRun(SharedCode.Utils.Vector3 pos)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(Assets.ColonyShared.SharedCode.Entities.Service.IUnityCheatServiceEntity), 2);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetClosestPlayerSpawnPointTransformImpl(pos);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}