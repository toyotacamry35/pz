// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class LegionaryEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILegionaryEntityAlways
    {
        public LegionaryEntityAlways(SharedCode.AI.ILegionaryEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ILegionaryEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ILegionaryEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncAlways MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncAlways)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityAlways LogableEntity => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityAlways)__deltaObject__.LogableEntity?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAiTargetRecipientAlways AiTargetRecipient => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAiTargetRecipientAlways)__deltaObject__.AiTargetRecipient?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Wizard;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 16:
                    currProperty = Def;
                    break;
                case 17:
                    currProperty = MapOwner;
                    break;
                case 18:
                    currProperty = StaticIdFromExport;
                    break;
                case 19:
                    currProperty = Name;
                    break;
                case 20:
                    currProperty = Prefab;
                    break;
                case 21:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 22:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 24:
                    currProperty = WorldSpaced;
                    break;
                case 26:
                    currProperty = MovementSync;
                    break;
                case 27:
                    currProperty = LogableEntity;
                    break;
                case 33:
                    currProperty = ContainerApi;
                    break;
                case 35:
                    currProperty = Buffs;
                    break;
                case 39:
                    currProperty = AiTargetRecipient;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 472194989;
    }

    public class LegionaryEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILegionaryEntityClientBroadcast
    {
        public LegionaryEntityClientBroadcast(SharedCode.AI.ILegionaryEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ILegionaryEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ILegionaryEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncClientBroadcast MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncClientBroadcast)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityClientBroadcast LogableEntity => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityClientBroadcast)__deltaObject__.LogableEntity?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientBroadcast AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientBroadcast)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientBroadcast Doll => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientBroadcast)__deltaObject__.Doll?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankEngineClientBroadcast Bank => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankEngineClientBroadcast)__deltaObject__.Bank?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerClientBroadcast LocomotionOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerClientBroadcast)__deltaObject__.LocomotionOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAiTargetRecipientClientBroadcast AiTargetRecipient => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAiTargetRecipientClientBroadcast)__deltaObject__.AiTargetRecipient?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public Assets.Src.Aspects.Impl.Factions.Template.FactionDef Faction => __deltaObject__.Faction;
        public System.Guid SquadId => __deltaObject__.SquadId;
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Wizard;
                    break;
                case 11:
                    currProperty = SlaveWizardHolder;
                    break;
                case 12:
                    currProperty = Health;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 16:
                    currProperty = Def;
                    break;
                case 17:
                    currProperty = MapOwner;
                    break;
                case 18:
                    currProperty = StaticIdFromExport;
                    break;
                case 19:
                    currProperty = Name;
                    break;
                case 20:
                    currProperty = Prefab;
                    break;
                case 21:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 22:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 24:
                    currProperty = WorldSpaced;
                    break;
                case 25:
                    currProperty = Stats;
                    break;
                case 26:
                    currProperty = MovementSync;
                    break;
                case 27:
                    currProperty = LogableEntity;
                    break;
                case 28:
                    currProperty = SpawnedObject;
                    break;
                case 31:
                    currProperty = AnimationDoerOwner;
                    break;
                case 32:
                    currProperty = Doll;
                    break;
                case 33:
                    currProperty = ContainerApi;
                    break;
                case 34:
                    currProperty = Bank;
                    break;
                case 35:
                    currProperty = Buffs;
                    break;
                case 38:
                    currProperty = LocomotionOwner;
                    break;
                case 39:
                    currProperty = AiTargetRecipient;
                    break;
                case 40:
                    currProperty = Faction;
                    break;
                case 41:
                    currProperty = SquadId;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1751417385;
    }

    public class LegionaryEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILegionaryEntityClientFullApi
    {
        public LegionaryEntityClientFullApi(SharedCode.AI.ILegionaryEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ILegionaryEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ILegionaryEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -69985997;
    }

    public class LegionaryEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILegionaryEntityClientFull
    {
        public LegionaryEntityClientFull(SharedCode.AI.ILegionaryEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ILegionaryEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ILegionaryEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteClientFull Brute => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteClientFull)__deltaObject__.Brute?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncClientFull MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncClientFull)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityClientFull LogableEntity => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityClientFull)__deltaObject__.LogableEntity?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientFull AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientFull)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientFull Doll => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollClientFull)__deltaObject__.Doll?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankEngineClientFull Bank => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankEngineClientFull)__deltaObject__.Bank?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IInputActionHandlersClientFull InputActionHandlers => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IInputActionHandlersClientFull)__deltaObject__.InputActionHandlers?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAttackEngineClientFull AttackEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAttackEngineClientFull)__deltaObject__.AttackEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerClientFull LocomotionOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerClientFull)__deltaObject__.LocomotionOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAiTargetRecipientClientFull AiTargetRecipient => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAiTargetRecipientClientFull)__deltaObject__.AiTargetRecipient?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public Assets.Src.Aspects.Impl.Factions.Template.FactionDef Faction => __deltaObject__.Faction;
        public System.Guid SquadId => __deltaObject__.SquadId;
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Wizard;
                    break;
                case 11:
                    currProperty = SlaveWizardHolder;
                    break;
                case 12:
                    currProperty = Health;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 15:
                    currProperty = Brute;
                    break;
                case 16:
                    currProperty = Def;
                    break;
                case 17:
                    currProperty = MapOwner;
                    break;
                case 18:
                    currProperty = StaticIdFromExport;
                    break;
                case 19:
                    currProperty = Name;
                    break;
                case 20:
                    currProperty = Prefab;
                    break;
                case 21:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 22:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 24:
                    currProperty = WorldSpaced;
                    break;
                case 25:
                    currProperty = Stats;
                    break;
                case 26:
                    currProperty = MovementSync;
                    break;
                case 27:
                    currProperty = LogableEntity;
                    break;
                case 28:
                    currProperty = SpawnedObject;
                    break;
                case 31:
                    currProperty = AnimationDoerOwner;
                    break;
                case 32:
                    currProperty = Doll;
                    break;
                case 33:
                    currProperty = ContainerApi;
                    break;
                case 34:
                    currProperty = Bank;
                    break;
                case 35:
                    currProperty = Buffs;
                    break;
                case 36:
                    currProperty = InputActionHandlers;
                    break;
                case 37:
                    currProperty = AttackEngine;
                    break;
                case 38:
                    currProperty = LocomotionOwner;
                    break;
                case 39:
                    currProperty = AiTargetRecipient;
                    break;
                case 40:
                    currProperty = Faction;
                    break;
                case 41:
                    currProperty = SquadId;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 33467026;
    }

    public class LegionaryEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILegionaryEntityServerApi
    {
        public LegionaryEntityServerApi(SharedCode.AI.ILegionaryEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ILegionaryEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ILegionaryEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1645188948;
    }

    public class LegionaryEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ILegionaryEntityServer
    {
        public LegionaryEntityServer(SharedCode.AI.ILegionaryEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.AI.ILegionaryEntity __deltaObject__
        {
            get
            {
                return (SharedCode.AI.ILegionaryEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteServer Brute => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteServer)__deltaObject__.Brute?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncServer MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncServer)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityServer LogableEntity => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILogableEntityServer)__deltaObject__.LogableEntity?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer Destroyable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer)__deltaObject__.Destroyable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerServer AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerServer)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollServer Doll => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharacterDollServer)__deltaObject__.Doll?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankEngineServer Bank => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankEngineServer)__deltaObject__.Bank?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IInputActionHandlersServer InputActionHandlers => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IInputActionHandlersServer)__deltaObject__.InputActionHandlers?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAttackEngineServer AttackEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAttackEngineServer)__deltaObject__.AttackEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerServer LocomotionOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ILocomotionOwnerServer)__deltaObject__.LocomotionOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAiTargetRecipientServer AiTargetRecipient => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAiTargetRecipientServer)__deltaObject__.AiTargetRecipient?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public Assets.Src.Aspects.Impl.Factions.Template.FactionDef Faction => __deltaObject__.Faction;
        public System.Guid SquadId => __deltaObject__.SquadId;
        public System.Threading.Tasks.Task<bool> InvokeHitZonesDamageReceivedEvent(Assets.ColonyShared.SharedCode.Aspects.Damage.Damage damage)
        {
            return __deltaObject__.InvokeHitZonesDamageReceivedEvent(damage);
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public event System.Func<Assets.ColonyShared.SharedCode.Aspects.Damage.Damage, System.Threading.Tasks.Task> HitZonesDamageReceivedEvent
        {
            add
            {
                __deltaObject__.HitZonesDamageReceivedEvent += value;
            }

            remove
            {
                __deltaObject__.HitZonesDamageReceivedEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Wizard;
                    break;
                case 11:
                    currProperty = SlaveWizardHolder;
                    break;
                case 12:
                    currProperty = Health;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 15:
                    currProperty = Brute;
                    break;
                case 16:
                    currProperty = Def;
                    break;
                case 17:
                    currProperty = MapOwner;
                    break;
                case 18:
                    currProperty = StaticIdFromExport;
                    break;
                case 19:
                    currProperty = Name;
                    break;
                case 20:
                    currProperty = Prefab;
                    break;
                case 21:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 22:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 24:
                    currProperty = WorldSpaced;
                    break;
                case 25:
                    currProperty = Stats;
                    break;
                case 26:
                    currProperty = MovementSync;
                    break;
                case 27:
                    currProperty = LogableEntity;
                    break;
                case 28:
                    currProperty = SpawnedObject;
                    break;
                case 29:
                    currProperty = Destroyable;
                    break;
                case 31:
                    currProperty = AnimationDoerOwner;
                    break;
                case 32:
                    currProperty = Doll;
                    break;
                case 33:
                    currProperty = ContainerApi;
                    break;
                case 34:
                    currProperty = Bank;
                    break;
                case 35:
                    currProperty = Buffs;
                    break;
                case 36:
                    currProperty = InputActionHandlers;
                    break;
                case 37:
                    currProperty = AttackEngine;
                    break;
                case 38:
                    currProperty = LocomotionOwner;
                    break;
                case 39:
                    currProperty = AiTargetRecipient;
                    break;
                case 40:
                    currProperty = Faction;
                    break;
                case 41:
                    currProperty = SquadId;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 848982407;
    }
}