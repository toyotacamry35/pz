// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class SpawnDaemon
    {
        public Task<bool> UpdateSpawnDaemon(bool outOfOrder)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UpdateSpawnDaemonRunMaster(outOfOrder).AsTask();
                else
                    return UpdateSpawnDaemonRun(outOfOrder).AsTask();
            else
                return SendFuncs.UpdateSpawnDaemon(outOfOrder, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> UpdateSpawnDaemonCreateDeferredDelegate(bool outOfOrder) => () =>
        {
            return UpdateSpawnDaemon(outOfOrder);
        }

        ;
        public async ValueTask<bool> UpdateSpawnDaemonRunMaster(bool outOfOrder)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UpdateSpawnDaemonCreateDeferredDelegate(outOfOrder), nameof(UpdateSpawnDaemon));
            }

            return await UpdateSpawnDaemonRun(outOfOrder);
        }

        public async ValueTask<bool> UpdateSpawnDaemonRun(bool outOfOrder)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(UpdateSpawnDaemon)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = UpdateSpawnDaemonImpl(outOfOrder);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> NotifyOfObjectDestruction(System.Guid id, int typeId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return NotifyOfObjectDestructionRunMaster(id, typeId).AsTask();
                else
                    return NotifyOfObjectDestructionRun(id, typeId).AsTask();
            else
                return SendFuncs.NotifyOfObjectDestruction(id, typeId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> NotifyOfObjectDestructionCreateDeferredDelegate(System.Guid id, int typeId) => () =>
        {
            return NotifyOfObjectDestruction(id, typeId);
        }

        ;
        public async ValueTask<bool> NotifyOfObjectDestructionRunMaster(System.Guid id, int typeId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(NotifyOfObjectDestructionCreateDeferredDelegate(id, typeId), nameof(NotifyOfObjectDestruction));
            }

            return await NotifyOfObjectDestructionRun(id, typeId);
        }

        public async ValueTask<bool> NotifyOfObjectDestructionRun(System.Guid id, int typeId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(NotifyOfObjectDestruction)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = NotifyOfObjectDestructionImpl(id, typeId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ResetDaemon()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ResetDaemonRunMaster().AsTask();
                else
                    return ResetDaemonRun().AsTask();
            else
                return SendFuncs.ResetDaemon(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ResetDaemonCreateDeferredDelegate() => () =>
        {
            return ResetDaemon();
        }

        ;
        public async ValueTask<bool> ResetDaemonRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ResetDaemonCreateDeferredDelegate(), nameof(ResetDaemon));
            }

            return await ResetDaemonRun();
        }

        public async ValueTask<bool> ResetDaemonRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon), 2);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ResetDaemon)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ResetDaemonImpl();
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> TryPlaceObjectNear(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef pointType, SharedCode.Entities.GameObjectEntities.IEntityObjectDef objDef, SharedCode.Utils.Vector3 pos, bool ignoreGeometry)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return TryPlaceObjectNearRunMaster(pointType, objDef, pos, ignoreGeometry).AsTask();
                else
                    return TryPlaceObjectNearRun(pointType, objDef, pos, ignoreGeometry).AsTask();
            else
                return SendFuncs.TryPlaceObjectNear(pointType, objDef, pos, ignoreGeometry, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> TryPlaceObjectNearCreateDeferredDelegate(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef pointType, SharedCode.Entities.GameObjectEntities.IEntityObjectDef objDef, SharedCode.Utils.Vector3 pos, bool ignoreGeometry) => () =>
        {
            return TryPlaceObjectNear(pointType, objDef, pos, ignoreGeometry);
        }

        ;
        public async ValueTask<bool> TryPlaceObjectNearRunMaster(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef pointType, SharedCode.Entities.GameObjectEntities.IEntityObjectDef objDef, SharedCode.Utils.Vector3 pos, bool ignoreGeometry)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(TryPlaceObjectNearCreateDeferredDelegate(pointType, objDef, pos, ignoreGeometry), nameof(TryPlaceObjectNear));
            }

            return await TryPlaceObjectNearRun(pointType, objDef, pos, ignoreGeometry);
        }

        public async ValueTask<bool> TryPlaceObjectNearRun(SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef pointType, SharedCode.Entities.GameObjectEntities.IEntityObjectDef objDef, SharedCode.Utils.Vector3 pos, bool ignoreGeometry)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon), 3);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(TryPlaceObjectNear)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = TryPlaceObjectNearImpl(pointType, objDef, pos, ignoreGeometry);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ActivateTemplatePointsBatch(System.Collections.Generic.List<SharedCode.Entities.GameObjectEntities.SpawnTemplateDef> def)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ActivateTemplatePointsBatchRunMaster(def).AsTask();
                else
                    return ActivateTemplatePointsBatchRun(def).AsTask();
            else
                return SendFuncs.ActivateTemplatePointsBatch(def, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ActivateTemplatePointsBatchCreateDeferredDelegate(System.Collections.Generic.List<SharedCode.Entities.GameObjectEntities.SpawnTemplateDef> def) => () =>
        {
            return ActivateTemplatePointsBatch(def);
        }

        ;
        public async ValueTask<bool> ActivateTemplatePointsBatchRunMaster(System.Collections.Generic.List<SharedCode.Entities.GameObjectEntities.SpawnTemplateDef> def)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ActivateTemplatePointsBatchCreateDeferredDelegate(def), nameof(ActivateTemplatePointsBatch));
            }

            return await ActivateTemplatePointsBatchRun(def);
        }

        public async ValueTask<bool> ActivateTemplatePointsBatchRun(System.Collections.Generic.List<SharedCode.Entities.GameObjectEntities.SpawnTemplateDef> def)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon), 4);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ActivateTemplatePointsBatch)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ActivateTemplatePointsBatchImpl(def);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task NotifyOfEntityDissipation(SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, System.Guid guid, int typeId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return NotifyOfEntityDissipationRunMaster(pos, rot, point, guid, typeId).AsTask();
                else
                    return NotifyOfEntityDissipationRun(pos, rot, point, guid, typeId).AsTask();
            else
                return SendFuncs.NotifyOfEntityDissipation(pos, rot, point, guid, typeId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> NotifyOfEntityDissipationCreateDeferredDelegate(SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, System.Guid guid, int typeId) => () =>
        {
            return NotifyOfEntityDissipation(pos, rot, point, guid, typeId);
        }

        ;
        public async ValueTask NotifyOfEntityDissipationRunMaster(SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, System.Guid guid, int typeId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(NotifyOfEntityDissipationCreateDeferredDelegate(pos, rot, point, guid, typeId), nameof(NotifyOfEntityDissipation));
            }

            await NotifyOfEntityDissipationRun(pos, rot, point, guid, typeId);
        }

        public async ValueTask NotifyOfEntityDissipationRun(SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, System.Guid guid, int typeId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon), 5);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(NotifyOfEntityDissipation)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = NotifyOfEntityDissipationImpl(pos, rot, point, guid, typeId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> AwaitUnityThread()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AwaitUnityThreadRunMaster().AsTask();
                else
                    return AwaitUnityThreadRun().AsTask();
            else
                return SendFuncs.AwaitUnityThread(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> AwaitUnityThreadCreateDeferredDelegate() => () =>
        {
            return AwaitUnityThread();
        }

        ;
        public async ValueTask<bool> AwaitUnityThreadRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AwaitUnityThreadCreateDeferredDelegate(), nameof(AwaitUnityThread));
            }

            return await AwaitUnityThreadRun();
        }

        public async ValueTask<bool> AwaitUnityThreadRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.GameObjectEntities.ISpawnDaemon), 6);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = AwaitUnityThreadImpl();
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}