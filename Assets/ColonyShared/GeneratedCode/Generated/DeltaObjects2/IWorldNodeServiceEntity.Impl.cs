// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("WorldNodeServiceEntity")]
    public partial class WorldNodeServiceEntity : SharedCode.EntitySystem.BaseEntity, SharedCode.Entities.Service.IWorldNodeServiceEntity, IWorldNodeServiceEntityImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public WorldNodeServiceEntity()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                ExternalAddress = default(SharedCode.Entities.Cloud.EndpointAddress);
                Map = default(GeneratedCode.Custom.Config.MapDef);
                MapInstanceId = default(System.Guid);
                MapChunkId = default(System.Guid);
                State = default(SharedCode.Entities.Service.WorldNodeServiceState);
                ClientNode = default(bool);
            }

            constructor();
        }

        public WorldNodeServiceEntity(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                ExternalAddress = default(SharedCode.Entities.Cloud.EndpointAddress);
                Map = default(GeneratedCode.Custom.Config.MapDef);
                MapInstanceId = default(System.Guid);
                MapChunkId = default(System.Guid);
                State = default(SharedCode.Entities.Service.WorldNodeServiceState);
                ClientNode = default(bool);
            }

            constructor();
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "ExternalAddress":
                    ExternalAddress__Changed += callback;
                    break;
                case "Map":
                    Map__Changed += callback;
                    break;
                case "MapInstanceId":
                    MapInstanceId__Changed += callback;
                    break;
                case "MapChunkId":
                    MapChunkId__Changed += callback;
                    break;
                case "State":
                    State__Changed += callback;
                    break;
                case "ClientNode":
                    ClientNode__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "ExternalAddress":
                    ExternalAddress__Changed -= callback;
                    break;
                case "Map":
                    Map__Changed -= callback;
                    break;
                case "MapInstanceId":
                    MapInstanceId__Changed -= callback;
                    break;
                case "MapChunkId":
                    MapChunkId__Changed -= callback;
                    break;
                case "State":
                    State__Changed -= callback;
                    break;
                case "ClientNode":
                    ClientNode__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "ExternalAddress":
                    ExternalAddress__Changed = null;
                    break;
                case "Map":
                    Map__Changed = null;
                    break;
                case "MapInstanceId":
                    MapInstanceId__Changed = null;
                    break;
                case "MapChunkId":
                    MapChunkId__Changed = null;
                    break;
                case "State":
                    State__Changed = null;
                    break;
                case "ClientNode":
                    ClientNode__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            ExternalAddress__Changed = null;
            Map__Changed = null;
            MapInstanceId__Changed = null;
            MapChunkId__Changed = null;
            State__Changed = null;
            ClientNode__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && ExternalAddress__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ExternalAddress, nameof(ExternalAddress), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ExternalAddress__Changed);
            }

            if (NeedFireEvent(11) && Map__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Map, nameof(Map), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Map__Changed);
            }

            if (NeedFireEvent(12) && MapInstanceId__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_MapInstanceId, nameof(MapInstanceId), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, MapInstanceId__Changed);
            }

            if (NeedFireEvent(13) && MapChunkId__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_MapChunkId, nameof(MapChunkId), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, MapChunkId__Changed);
            }

            if (NeedFireEvent(14) && State__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_State, nameof(State), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, State__Changed);
            }

            if (NeedFireEvent(15) && ClientNode__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ClientNode, nameof(ClientNode), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ClientNode__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                ExternalAddress = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                Map = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                MapInstanceId = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                MapChunkId = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                State = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                ClientNode = default;
        }
    }
}