// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class WorldSpacedAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways
    {
        public WorldSpacedAlways(SharedCode.Entities.Service.IWorldSpaced deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaced __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaced)__deltaObjectBase__;
            }
        }

        public SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Service.IWorldSpaceServiceEntity> OwnWorldSpace => __deltaObject__.OwnWorldSpace;
        public bool Destroyed => __deltaObject__.Destroyed;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnWorldSpace;
                    break;
                case 11:
                    currProperty = Destroyed;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 91513635;
    }

    public class WorldSpacedClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast
    {
        public WorldSpacedClientBroadcast(SharedCode.Entities.Service.IWorldSpaced deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaced __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaced)__deltaObjectBase__;
            }
        }

        public SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Service.IWorldSpaceServiceEntity> OwnWorldSpace => __deltaObject__.OwnWorldSpace;
        public bool Destroyed => __deltaObject__.Destroyed;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnWorldSpace;
                    break;
                case 11:
                    currProperty = Destroyed;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -2009709794;
    }

    public class WorldSpacedClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFullApi
    {
        public WorldSpacedClientFullApi(SharedCode.Entities.Service.IWorldSpaced deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaced __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaced)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1367389803;
    }

    public class WorldSpacedClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull
    {
        public WorldSpacedClientFull(SharedCode.Entities.Service.IWorldSpaced deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaced __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaced)__deltaObjectBase__;
            }
        }

        public SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Service.IWorldSpaceServiceEntity> OwnWorldSpace => __deltaObject__.OwnWorldSpace;
        public bool Destroyed => __deltaObject__.Destroyed;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnWorldSpace;
                    break;
                case 11:
                    currProperty = Destroyed;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1834068978;
    }

    public class WorldSpacedServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServerApi
    {
        public WorldSpacedServerApi(SharedCode.Entities.Service.IWorldSpaced deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaced __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaced)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1584692340;
    }

    public class WorldSpacedServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer
    {
        public WorldSpacedServer(SharedCode.Entities.Service.IWorldSpaced deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaced __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaced)__deltaObjectBase__;
            }
        }

        public SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Service.IWorldSpaceServiceEntity> OwnWorldSpace => __deltaObject__.OwnWorldSpace;
        public bool Destroyed => __deltaObject__.Destroyed;
        public System.Threading.Tasks.Task<bool> AssignToWorldSpace(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Service.IWorldSpaceServiceEntity> ownWorldSpace)
        {
            return __deltaObject__.AssignToWorldSpace(ownWorldSpace);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnWorldSpace;
                    break;
                case 11:
                    currProperty = Destroyed;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1950787469;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class WorldSpaceServiceEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceServiceEntityAlways
    {
        public WorldSpaceServiceEntityAlways(SharedCode.Entities.Service.IWorldSpaceServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaceServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaceServiceEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.EntitySystem.OuterRef<SharedCode.MapSystem.IMapEntity> OwnMap => __deltaObject__.OwnMap;
        public System.Collections.Concurrent.ConcurrentDictionary<System.Guid, System.Collections.Concurrent.ConcurrentDictionary<(int, System.Guid), bool>> AllUsersAndTheirCharacters => __deltaObject__.AllUsersAndTheirCharacters;
        public System.Threading.Tasks.Task<bool> Teleport(System.Guid oldRepositoryGuid)
        {
            return __deltaObject__.Teleport(oldRepositoryGuid);
        }

        public System.Threading.Tasks.Task<bool> PrepareStaticsFor(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> sceneEntity)
        {
            return __deltaObject__.PrepareStaticsFor(sceneEntity);
        }

        public System.Threading.Tasks.Task<bool> SpawnEntity(System.Guid staticIdFromExport, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent, SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, GeneratedCode.MapSystem.MapOwner mapOwner, System.Guid spawner, SharedCode.Entities.GameObjectEntities.IEntityObjectDef def, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, SharedCode.Entities.GameObjectEntities.ScenicEntityDef scenicEntityDef, Scripting.ScriptingContext ctx)
        {
            return __deltaObject__.SpawnEntity(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx);
        }

        public System.Threading.Tasks.Task<bool> DespawnEntity(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent)
        {
            return __deltaObject__.DespawnEntity(ent);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnMap;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 30476441;
    }

    public class WorldSpaceServiceEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceServiceEntityClientBroadcast
    {
        public WorldSpaceServiceEntityClientBroadcast(SharedCode.Entities.Service.IWorldSpaceServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaceServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaceServiceEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.EntitySystem.OuterRef<SharedCode.MapSystem.IMapEntity> OwnMap => __deltaObject__.OwnMap;
        public System.Collections.Concurrent.ConcurrentDictionary<System.Guid, System.Collections.Concurrent.ConcurrentDictionary<(int, System.Guid), bool>> AllUsersAndTheirCharacters => __deltaObject__.AllUsersAndTheirCharacters;
        public System.Threading.Tasks.Task<SharedCode.Entities.Service.AddClientResult> Login(Assets.Src.Aspects.Doings.BotActionDef botDef, string spawnPointPath, System.Guid userRepository, GeneratedCode.MapSystem.MapOwner mapOwner)
        {
            return __deltaObject__.Login(botDef, spawnPointPath, userRepository, mapOwner);
        }

        public System.Threading.Tasks.Task<bool> Teleport(System.Guid oldRepositoryGuid)
        {
            return __deltaObject__.Teleport(oldRepositoryGuid);
        }

        public System.Threading.Tasks.Task<bool> PrepareStaticsFor(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> sceneEntity)
        {
            return __deltaObject__.PrepareStaticsFor(sceneEntity);
        }

        public System.Threading.Tasks.Task<bool> SpawnEntity(System.Guid staticIdFromExport, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent, SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, GeneratedCode.MapSystem.MapOwner mapOwner, System.Guid spawner, SharedCode.Entities.GameObjectEntities.IEntityObjectDef def, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, SharedCode.Entities.GameObjectEntities.ScenicEntityDef scenicEntityDef, Scripting.ScriptingContext ctx)
        {
            return __deltaObject__.SpawnEntity(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx);
        }

        public System.Threading.Tasks.Task<bool> DespawnEntity(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent)
        {
            return __deltaObject__.DespawnEntity(ent);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnMap;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1592979517;
    }

    public class WorldSpaceServiceEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceServiceEntityClientFullApi
    {
        public WorldSpaceServiceEntityClientFullApi(SharedCode.Entities.Service.IWorldSpaceServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaceServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaceServiceEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1168269150;
    }

    public class WorldSpaceServiceEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceServiceEntityClientFull
    {
        public WorldSpaceServiceEntityClientFull(SharedCode.Entities.Service.IWorldSpaceServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaceServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaceServiceEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.EntitySystem.OuterRef<SharedCode.MapSystem.IMapEntity> OwnMap => __deltaObject__.OwnMap;
        public System.Collections.Concurrent.ConcurrentDictionary<System.Guid, System.Collections.Concurrent.ConcurrentDictionary<(int, System.Guid), bool>> AllUsersAndTheirCharacters => __deltaObject__.AllUsersAndTheirCharacters;
        public System.Threading.Tasks.Task<bool> Respawn(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId)
        {
            return __deltaObject__.Respawn(charId, checkBakens, anyCommonBaken, commonBakenId);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Service.AddClientResult> Login(Assets.Src.Aspects.Doings.BotActionDef botDef, string spawnPointPath, System.Guid userRepository, GeneratedCode.MapSystem.MapOwner mapOwner)
        {
            return __deltaObject__.Login(botDef, spawnPointPath, userRepository, mapOwner);
        }

        public System.Threading.Tasks.Task<bool> Teleport(System.Guid oldRepositoryGuid)
        {
            return __deltaObject__.Teleport(oldRepositoryGuid);
        }

        public System.Threading.Tasks.Task<bool> PrepareStaticsFor(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> sceneEntity)
        {
            return __deltaObject__.PrepareStaticsFor(sceneEntity);
        }

        public System.Threading.Tasks.Task<bool> SpawnEntity(System.Guid staticIdFromExport, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent, SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, GeneratedCode.MapSystem.MapOwner mapOwner, System.Guid spawner, SharedCode.Entities.GameObjectEntities.IEntityObjectDef def, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, SharedCode.Entities.GameObjectEntities.ScenicEntityDef scenicEntityDef, Scripting.ScriptingContext ctx)
        {
            return __deltaObject__.SpawnEntity(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx);
        }

        public System.Threading.Tasks.Task<bool> DespawnEntity(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent)
        {
            return __deltaObject__.DespawnEntity(ent);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnMap;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -585076915;
    }

    public class WorldSpaceServiceEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceServiceEntityServerApi
    {
        public WorldSpaceServiceEntityServerApi(SharedCode.Entities.Service.IWorldSpaceServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaceServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaceServiceEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1500355317;
    }

    public class WorldSpaceServiceEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpaceServiceEntityServer
    {
        public WorldSpaceServiceEntityServer(SharedCode.Entities.Service.IWorldSpaceServiceEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Service.IWorldSpaceServiceEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Service.IWorldSpaceServiceEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.EntitySystem.OuterRef<SharedCode.MapSystem.IMapEntity> OwnMap => __deltaObject__.OwnMap;
        public System.Collections.Concurrent.ConcurrentDictionary<System.Guid, System.Collections.Concurrent.ConcurrentDictionary<(int, System.Guid), bool>> AllUsersAndTheirCharacters => __deltaObject__.AllUsersAndTheirCharacters;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldObjectsInformationSetsMapEngineServer WorldObjectsInformationSetsMapEngine => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldObjectsInformationSetsMapEngineServer)__deltaObject__.WorldObjectsInformationSetsMapEngine?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<System.Guid?> GetWorldNodeId(ResourceSystem.Utils.OuterRef entityRef)
        {
            return __deltaObject__.GetWorldNodeId(entityRef);
        }

        public System.Threading.Tasks.Task<bool> AddWorldObject(int typeId, System.Guid entityId)
        {
            return __deltaObject__.AddWorldObject(typeId, entityId);
        }

        public System.Threading.Tasks.Task<bool> RemoveWorldObject(int typeId, System.Guid entityId)
        {
            return __deltaObject__.RemoveWorldObject(typeId, entityId);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Service.AddClientResult> AddClient(System.Guid characterId, System.Guid repositoryId)
        {
            return __deltaObject__.AddClient(characterId, repositoryId);
        }

        public System.Threading.Tasks.Task<System.Guid> GetWorldBoxIdToDrop(SharedCode.Utils.Vector3 position, System.Guid characterOwnerId)
        {
            return __deltaObject__.GetWorldBoxIdToDrop(position, characterOwnerId);
        }

        public System.Threading.Tasks.Task<System.Guid> GetFencePlaceId(SharedCode.Utils.Vector3 position, bool onlyExisted)
        {
            return __deltaObject__.GetFencePlaceId(position, onlyExisted);
        }

        public System.Threading.Tasks.Task OnVisibilityChanged(int subjectTypeId, System.Guid subjectEntityId, System.Collections.Generic.List<(int, System.Guid)> addedObjects, System.Collections.Generic.List<(int, System.Guid)> removedObjects)
        {
            return __deltaObject__.OnVisibilityChanged(subjectTypeId, subjectEntityId, addedObjects, removedObjects);
        }

        public System.Threading.Tasks.Task EnableReplications(int subjectTypeId, System.Guid subjectEntityId, bool enable)
        {
            return __deltaObject__.EnableReplications(subjectTypeId, subjectEntityId, enable);
        }

        public System.Threading.Tasks.Task<int> GetCCU()
        {
            return __deltaObject__.GetCCU();
        }

        public System.Threading.Tasks.Task SpawnNewBot(string spawnPointTypePath, System.Collections.Generic.List<System.Guid> botIds, System.Guid userId)
        {
            return __deltaObject__.SpawnNewBot(spawnPointTypePath, botIds, userId);
        }

        public System.Threading.Tasks.Task<bool> Respawn(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId)
        {
            return __deltaObject__.Respawn(charId, checkBakens, anyCommonBaken, commonBakenId);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.Service.AddClientResult> Login(Assets.Src.Aspects.Doings.BotActionDef botDef, string spawnPointPath, System.Guid userRepository, GeneratedCode.MapSystem.MapOwner mapOwner)
        {
            return __deltaObject__.Login(botDef, spawnPointPath, userRepository, mapOwner);
        }

        public System.Threading.Tasks.Task<bool> Logout(System.Guid userId, bool terminal)
        {
            return __deltaObject__.Logout(userId, terminal);
        }

        public System.Threading.Tasks.Task<bool> LogoutAll()
        {
            return __deltaObject__.LogoutAll();
        }

        public System.Threading.Tasks.Task<bool> ConnectStreamingRepo(System.Guid repo)
        {
            return __deltaObject__.ConnectStreamingRepo(repo);
        }

        public System.Threading.Tasks.Task<bool> DisconnectStreamingRepo(System.Guid repo)
        {
            return __deltaObject__.DisconnectStreamingRepo(repo);
        }

        public System.Threading.Tasks.Task<bool> Teleport(System.Guid oldRepositoryGuid)
        {
            return __deltaObject__.Teleport(oldRepositoryGuid);
        }

        public System.Threading.Tasks.Task<bool> PrepareStaticsFor(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> sceneEntity)
        {
            return __deltaObject__.PrepareStaticsFor(sceneEntity);
        }

        public System.Threading.Tasks.Task<bool> SpawnEntity(System.Guid staticIdFromExport, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent, SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, GeneratedCode.MapSystem.MapOwner mapOwner, System.Guid spawner, SharedCode.Entities.GameObjectEntities.IEntityObjectDef def, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, SharedCode.Entities.GameObjectEntities.ScenicEntityDef scenicEntityDef, Scripting.ScriptingContext ctx)
        {
            return __deltaObject__.SpawnEntity(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx);
        }

        public System.Threading.Tasks.Task<bool> DespawnEntity(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent)
        {
            return __deltaObject__.DespawnEntity(ent);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.GameObjectEntities.PositionRotation> GetPositionToSpawnAt(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef overrideAllowedPointType)
        {
            return __deltaObject__.GetPositionToSpawnAt(charId, checkBakens, anyCommonBaken, commonBakenId, overrideAllowedPointType);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnMap;
                    break;
                case 12:
                    currProperty = WorldObjectsInformationSetsMapEngine;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1598331311;
    }
}