// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    public partial class ItemsStatsAccumulator
    {
        internal static class ExecuteMethods
        {
            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(0, "IItemsStatsAccumulator_SetHasActiveWeaponAndDamageType_Boolean_DamageTypeDef_WeaponSizeDef_Message")]
            internal static async System.Threading.Tasks.Task SetHasActiveWeaponAndDamageType_0(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                bool has;
                (has, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<bool>(__data__, __offset__, 0, chainContext, argumentRefs);
                Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.DamageTypeDef dType;
                (dType, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.DamageTypeDef>(__data__, __offset__, 1, chainContext, argumentRefs);
                Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.WeaponSizeDef size;
                (size, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.WeaponSizeDef>(__data__, __offset__, 2, chainContext, argumentRefs);
                var __result__ = await ((Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator)__deltaObj__).SetHasActiveWeaponAndDamageType(has, dType, size);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }
        }
    }
}