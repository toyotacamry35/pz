// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class AttackEngine
    {
        public Task<bool> StartAttack(GeneratedCode.DeltaObjects.SpellPartCastId attackId, long finishTime, ColonyShared.SharedCode.Aspects.Misc.AttackDef attackDef, System.Collections.Generic.IReadOnlyList<ResourceSystem.Aspects.AttackModifierDef> modifiers)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return StartAttackRunMaster(attackId, finishTime, attackDef, modifiers).AsTask();
                else
                    return StartAttackRun(attackId, finishTime, attackDef, modifiers).AsTask();
            else
                return SendFuncs.StartAttack(attackId, finishTime, attackDef, modifiers, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> StartAttackCreateDeferredDelegate(GeneratedCode.DeltaObjects.SpellPartCastId attackId, long finishTime, ColonyShared.SharedCode.Aspects.Misc.AttackDef attackDef, System.Collections.Generic.IReadOnlyList<ResourceSystem.Aspects.AttackModifierDef> modifiers) => () =>
        {
            return StartAttack(attackId, finishTime, attackDef, modifiers);
        }

        ;
        public async ValueTask<bool> StartAttackRunMaster(GeneratedCode.DeltaObjects.SpellPartCastId attackId, long finishTime, ColonyShared.SharedCode.Aspects.Misc.AttackDef attackDef, System.Collections.Generic.IReadOnlyList<ResourceSystem.Aspects.AttackModifierDef> modifiers)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(StartAttackCreateDeferredDelegate(attackId, finishTime, attackDef, modifiers), nameof(StartAttack));
            }

            return await StartAttackRun(attackId, finishTime, attackDef, modifiers);
        }

        public async ValueTask<bool> StartAttackRun(GeneratedCode.DeltaObjects.SpellPartCastId attackId, long finishTime, ColonyShared.SharedCode.Aspects.Misc.AttackDef attackDef, System.Collections.Generic.IReadOnlyList<ResourceSystem.Aspects.AttackModifierDef> modifiers)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(ColonyShared.SharedCode.Aspects.Combat.IAttackEngine), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(StartAttack)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = StartAttackImpl(attackId, finishTime, attackDef, modifiers);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task FinishAttack(GeneratedCode.DeltaObjects.SpellPartCastId attackId, long currentTime)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return FinishAttackRunMaster(attackId, currentTime).AsTask();
                else
                    return FinishAttackRun(attackId, currentTime).AsTask();
            else
                return SendFuncs.FinishAttack(attackId, currentTime, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> FinishAttackCreateDeferredDelegate(GeneratedCode.DeltaObjects.SpellPartCastId attackId, long currentTime) => () =>
        {
            return FinishAttack(attackId, currentTime);
        }

        ;
        public async ValueTask FinishAttackRunMaster(GeneratedCode.DeltaObjects.SpellPartCastId attackId, long currentTime)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(FinishAttackCreateDeferredDelegate(attackId, currentTime), nameof(FinishAttack));
            }

            await FinishAttackRun(attackId, currentTime);
        }

        public async ValueTask FinishAttackRun(GeneratedCode.DeltaObjects.SpellPartCastId attackId, long currentTime)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(ColonyShared.SharedCode.Aspects.Combat.IAttackEngine), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(FinishAttack)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = FinishAttackImpl(attackId, currentTime);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task PushAttackTargets(GeneratedCode.DeltaObjects.SpellPartCastId attackId, System.Collections.Generic.List<ColonyShared.SharedCode.Aspects.Combat.AttackTargetInfo> targets)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return PushAttackTargetsRunMaster(attackId, targets).AsTask();
                else
                    return PushAttackTargetsRun(attackId, targets).AsTask();
            else
                return SendFuncs.PushAttackTargets(attackId, targets, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> PushAttackTargetsCreateDeferredDelegate(GeneratedCode.DeltaObjects.SpellPartCastId attackId, System.Collections.Generic.List<ColonyShared.SharedCode.Aspects.Combat.AttackTargetInfo> targets) => () =>
        {
            return PushAttackTargets(attackId, targets);
        }

        ;
        public async ValueTask PushAttackTargetsRunMaster(GeneratedCode.DeltaObjects.SpellPartCastId attackId, System.Collections.Generic.List<ColonyShared.SharedCode.Aspects.Combat.AttackTargetInfo> targets)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(PushAttackTargetsCreateDeferredDelegate(attackId, targets), nameof(PushAttackTargets));
            }

            await PushAttackTargetsRun(attackId, targets);
        }

        public async ValueTask PushAttackTargetsRun(GeneratedCode.DeltaObjects.SpellPartCastId attackId, System.Collections.Generic.List<ColonyShared.SharedCode.Aspects.Combat.AttackTargetInfo> targets)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(ColonyShared.SharedCode.Aspects.Combat.IAttackEngine), 2);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(PushAttackTargets)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = PushAttackTargetsImpl(attackId, targets);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task SetAttackDoer(ColonyShared.SharedCode.Aspects.Combat.IAttackDoer newDoer)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.NeedDeferredRpcOnMigrating())
                return SetAttackDoerRunMaster(newDoer).AsTask();
            else
                return SetAttackDoerRun(newDoer).AsTask();
        }

        private Func<Task> SetAttackDoerCreateDeferredDelegate(ColonyShared.SharedCode.Aspects.Combat.IAttackDoer newDoer) => () =>
        {
            return SetAttackDoer(newDoer);
        }

        ;
        public async ValueTask SetAttackDoerRunMaster(ColonyShared.SharedCode.Aspects.Combat.IAttackDoer newDoer)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetAttackDoerCreateDeferredDelegate(newDoer), nameof(SetAttackDoer));
            }

            await SetAttackDoerRun(newDoer);
        }

        public async Task SetAttackDoerRun(ColonyShared.SharedCode.Aspects.Combat.IAttackDoer newDoer)
        {
            this.CheckValidateEntityInAsyncContext();
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(ColonyShared.SharedCode.Aspects.Combat.IAttackEngine), 3);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    await SetAttackDoerImpl(newDoer);
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task UnsetAttackDoer(ColonyShared.SharedCode.Aspects.Combat.IAttackDoer oldDoer)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.NeedDeferredRpcOnMigrating())
                return UnsetAttackDoerRunMaster(oldDoer).AsTask();
            else
                return UnsetAttackDoerRun(oldDoer).AsTask();
        }

        private Func<Task> UnsetAttackDoerCreateDeferredDelegate(ColonyShared.SharedCode.Aspects.Combat.IAttackDoer oldDoer) => () =>
        {
            return UnsetAttackDoer(oldDoer);
        }

        ;
        public async ValueTask UnsetAttackDoerRunMaster(ColonyShared.SharedCode.Aspects.Combat.IAttackDoer oldDoer)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UnsetAttackDoerCreateDeferredDelegate(oldDoer), nameof(UnsetAttackDoer));
            }

            await UnsetAttackDoerRun(oldDoer);
        }

        public async Task UnsetAttackDoerRun(ColonyShared.SharedCode.Aspects.Combat.IAttackDoer oldDoer)
        {
            this.CheckValidateEntityInAsyncContext();
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(ColonyShared.SharedCode.Aspects.Combat.IAttackEngine), 4);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    await UnsetAttackDoerImpl(oldDoer);
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}