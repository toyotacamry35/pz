// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class InGameTimeServiceEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInGameTimeServiceEntityAlways
    {
        public InGameTimeServiceEntityAlways(Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 2056642883;
    }

    public class InGameTimeServiceEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInGameTimeServiceEntityClientBroadcast
    {
        public InGameTimeServiceEntityClientBroadcast(Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity)__deltaObjectBase__;
            }
        }

        public System.DateTime ServerStartTime => __deltaObject__.ServerStartTime;
        public System.DateTime ServerStartupIngameTime => __deltaObject__.ServerStartupIngameTime;
        public System.TimeSpan IngameTimeDayDuration => __deltaObject__.IngameTimeDayDuration;
        public System.Threading.Tasks.Task<System.DateTime> GetCurrentIngameTime()
        {
            return __deltaObject__.GetCurrentIngameTime();
        }

        public System.Threading.Tasks.Task<bool> SetCurrentIngameTime(System.DateTime time)
        {
            return __deltaObject__.SetCurrentIngameTime(time);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = ServerStartTime;
                    break;
                case 11:
                    currProperty = ServerStartupIngameTime;
                    break;
                case 12:
                    currProperty = IngameTimeDayDuration;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -536951960;
    }

    public class InGameTimeServiceEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInGameTimeServiceEntityClientFullApi
    {
        public InGameTimeServiceEntityClientFullApi(Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1202571678;
    }

    public class InGameTimeServiceEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInGameTimeServiceEntityClientFull
    {
        public InGameTimeServiceEntityClientFull(Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity)__deltaObjectBase__;
            }
        }

        public System.DateTime ServerStartTime => __deltaObject__.ServerStartTime;
        public System.DateTime ServerStartupIngameTime => __deltaObject__.ServerStartupIngameTime;
        public System.TimeSpan IngameTimeDayDuration => __deltaObject__.IngameTimeDayDuration;
        public System.Threading.Tasks.Task<System.DateTime> GetCurrentIngameTime()
        {
            return __deltaObject__.GetCurrentIngameTime();
        }

        public System.Threading.Tasks.Task<bool> SetCurrentIngameTime(System.DateTime time)
        {
            return __deltaObject__.SetCurrentIngameTime(time);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = ServerStartTime;
                    break;
                case 11:
                    currProperty = ServerStartupIngameTime;
                    break;
                case 12:
                    currProperty = IngameTimeDayDuration;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1174072956;
    }

    public class InGameTimeServiceEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInGameTimeServiceEntityServerApi
    {
        public InGameTimeServiceEntityServerApi(Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 352232466;
    }

    public class InGameTimeServiceEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IInGameTimeServiceEntityServer
    {
        public InGameTimeServiceEntityServer(Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.Service.IInGameTimeServiceEntity)__deltaObjectBase__;
            }
        }

        public System.DateTime ServerStartTime => __deltaObject__.ServerStartTime;
        public System.DateTime ServerStartupIngameTime => __deltaObject__.ServerStartupIngameTime;
        public System.TimeSpan IngameTimeDayDuration => __deltaObject__.IngameTimeDayDuration;
        public System.Threading.Tasks.Task<System.DateTime> GetCurrentIngameTime()
        {
            return __deltaObject__.GetCurrentIngameTime();
        }

        public System.Threading.Tasks.Task<bool> SetCurrentIngameTime(System.DateTime time)
        {
            return __deltaObject__.SetCurrentIngameTime(time);
        }

        public System.Threading.Tasks.Task<bool> SetTimeFromRealm(System.DateTime serverStartTime)
        {
            return __deltaObject__.SetTimeFromRealm(serverStartTime);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = ServerStartTime;
                    break;
                case 11:
                    currProperty = ServerStartupIngameTime;
                    break;
                case 12:
                    currProperty = IngameTimeDayDuration;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1977076007;
    }
}