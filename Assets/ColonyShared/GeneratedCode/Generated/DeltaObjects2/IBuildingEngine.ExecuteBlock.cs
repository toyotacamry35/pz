// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    public partial class BuildingEngine
    {
        internal static class ExecuteMethods
        {
            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(0, "IBuildingEngine_Build_PropertyAddress_Int32_Vector3_Quaternion_Message")]
            internal static async System.Threading.Tasks.Task Build_0(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                SharedCode.EntitySystem.PropertyAddress address;
                (address, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.EntitySystem.PropertyAddress>(__data__, __offset__, 0, chainContext, argumentRefs);
                int slodIds;
                (slodIds, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<int>(__data__, __offset__, 1, chainContext, argumentRefs);
                SharedCode.Utils.Vector3 position;
                (position, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Utils.Vector3>(__data__, __offset__, 2, chainContext, argumentRefs);
                SharedCode.Utils.Quaternion rotation;
                (rotation, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Utils.Quaternion>(__data__, __offset__, 3, chainContext, argumentRefs);
                var __result__ = await ((SharedCode.Entities.Engine.IBuildingEngine)__deltaObj__).Build(address, slodIds, position, rotation);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }
        }
    }
}