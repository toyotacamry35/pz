// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class ItemsStatsAccumulatorAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemsStatsAccumulatorAlways
    {
        public ItemsStatsAccumulatorAlways(Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1618358309;
    }

    public class ItemsStatsAccumulatorClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemsStatsAccumulatorClientBroadcast
    {
        public ItemsStatsAccumulatorClientBroadcast(Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator)__deltaObjectBase__;
            }
        }

        public override int TypeId => -984128726;
    }

    public class ItemsStatsAccumulatorClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemsStatsAccumulatorClientFullApi
    {
        public ItemsStatsAccumulatorClientFullApi(Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator)__deltaObjectBase__;
            }
        }

        public override int TypeId => -581626081;
    }

    public class ItemsStatsAccumulatorClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemsStatsAccumulatorClientFull
    {
        public ItemsStatsAccumulatorClientFull(Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator)__deltaObjectBase__;
            }
        }

        public bool HasActiveWeapon => __deltaObject__.HasActiveWeapon;
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.DamageTypeDef ActiveWeaponDamageType => __deltaObject__.ActiveWeaponDamageType;
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.WeaponSizeDef ActiveWeaponSize => __deltaObject__.ActiveWeaponSize;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = HasActiveWeapon;
                    break;
                case 11:
                    currProperty = ActiveWeaponDamageType;
                    break;
                case 12:
                    currProperty = ActiveWeaponSize;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1182512264;
    }

    public class ItemsStatsAccumulatorServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemsStatsAccumulatorServerApi
    {
        public ItemsStatsAccumulatorServerApi(Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1573671653;
    }

    public class ItemsStatsAccumulatorServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemsStatsAccumulatorServer
    {
        public ItemsStatsAccumulatorServer(Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator deltaObject): base(deltaObject)
        {
        }

        Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator __deltaObject__
        {
            get
            {
                return (Assets.ColonyShared.SharedCode.Entities.IItemsStatsAccumulator)__deltaObjectBase__;
            }
        }

        public bool HasActiveWeapon => __deltaObject__.HasActiveWeapon;
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.DamageTypeDef ActiveWeaponDamageType => __deltaObject__.ActiveWeaponDamageType;
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.WeaponSizeDef ActiveWeaponSize => __deltaObject__.ActiveWeaponSize;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = HasActiveWeapon;
                    break;
                case 11:
                    currProperty = ActiveWeaponDamageType;
                    break;
                case 12:
                    currProperty = ActiveWeaponSize;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -863903854;
    }
}