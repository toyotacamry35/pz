// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class RealmsCollectionEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmsCollectionEntityAlways
    {
        public RealmsCollectionEntityAlways(SharedCode.Entities.IRealmsCollectionEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmsCollectionEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmsCollectionEntity)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<System.Guid, SharedCode.Aspects.Sessions.RealmRulesDef> Realms
        {
            get
            {
                return __deltaObject__.Realms;
            }
        }

        public System.Threading.Tasks.Task<bool> AddRealm(System.Guid mapId, SharedCode.Aspects.Sessions.RealmRulesDef realmDef)
        {
            return __deltaObject__.AddRealm(mapId, realmDef);
        }

        public System.Threading.Tasks.Task<bool> RemoveRealm(System.Guid mapId)
        {
            return __deltaObject__.RemoveRealm(mapId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Realms;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1814566452;
    }

    public class RealmsCollectionEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmsCollectionEntityClientBroadcast
    {
        public RealmsCollectionEntityClientBroadcast(SharedCode.Entities.IRealmsCollectionEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmsCollectionEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmsCollectionEntity)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<System.Guid, SharedCode.Aspects.Sessions.RealmRulesDef> Realms
        {
            get
            {
                return __deltaObject__.Realms;
            }
        }

        public System.Threading.Tasks.Task<bool> AddRealm(System.Guid mapId, SharedCode.Aspects.Sessions.RealmRulesDef realmDef)
        {
            return __deltaObject__.AddRealm(mapId, realmDef);
        }

        public System.Threading.Tasks.Task<bool> RemoveRealm(System.Guid mapId)
        {
            return __deltaObject__.RemoveRealm(mapId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Realms;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1755358903;
    }

    public class RealmsCollectionEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmsCollectionEntityClientFullApi
    {
        public RealmsCollectionEntityClientFullApi(SharedCode.Entities.IRealmsCollectionEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmsCollectionEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmsCollectionEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1662078935;
    }

    public class RealmsCollectionEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmsCollectionEntityClientFull
    {
        public RealmsCollectionEntityClientFull(SharedCode.Entities.IRealmsCollectionEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmsCollectionEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmsCollectionEntity)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<System.Guid, SharedCode.Aspects.Sessions.RealmRulesDef> Realms
        {
            get
            {
                return __deltaObject__.Realms;
            }
        }

        public System.Threading.Tasks.Task<bool> AddRealm(System.Guid mapId, SharedCode.Aspects.Sessions.RealmRulesDef realmDef)
        {
            return __deltaObject__.AddRealm(mapId, realmDef);
        }

        public System.Threading.Tasks.Task<bool> RemoveRealm(System.Guid mapId)
        {
            return __deltaObject__.RemoveRealm(mapId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Realms;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 336244519;
    }

    public class RealmsCollectionEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmsCollectionEntityServerApi
    {
        public RealmsCollectionEntityServerApi(SharedCode.Entities.IRealmsCollectionEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmsCollectionEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmsCollectionEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -940935518;
    }

    public class RealmsCollectionEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmsCollectionEntityServer
    {
        public RealmsCollectionEntityServer(SharedCode.Entities.IRealmsCollectionEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmsCollectionEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmsCollectionEntity)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<System.Guid, SharedCode.Aspects.Sessions.RealmRulesDef> Realms
        {
            get
            {
                return __deltaObject__.Realms;
            }
        }

        public System.Threading.Tasks.Task<bool> AddRealm(System.Guid mapId, SharedCode.Aspects.Sessions.RealmRulesDef realmDef)
        {
            return __deltaObject__.AddRealm(mapId, realmDef);
        }

        public System.Threading.Tasks.Task<bool> RemoveRealm(System.Guid mapId)
        {
            return __deltaObject__.RemoveRealm(mapId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Realms;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 769524160;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class RealmEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmEntityAlways
    {
        public RealmEntityAlways(SharedCode.Entities.IRealmEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Aspects.Sessions.RealmRulesDef Def => __deltaObject__.Def;
        public bool Dead => __deltaObject__.Dead;
        public bool AllowsToJoin => __deltaObject__.AllowsToJoin;
        public IDeltaDictionary<System.Guid, SharedCode.MapSystem.MapMeta> Maps
        {
            get
            {
                return __deltaObject__.Maps;
            }
        }

        public System.Threading.Tasks.Task<bool> AddMap(System.Guid mapId, SharedCode.MapSystem.MapMeta mapMeta)
        {
            return __deltaObject__.AddMap(mapId, mapMeta);
        }

        public System.Threading.Tasks.Task<bool> RemoveMap(System.Guid mapId)
        {
            return __deltaObject__.RemoveMap(mapId);
        }

        public System.Threading.Tasks.Task<bool> SetActive(bool active)
        {
            return __deltaObject__.SetActive(active);
        }

        public System.Threading.Tasks.Task<bool> SetMapDead(System.Guid mapId)
        {
            return __deltaObject__.SetMapDead(mapId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 14:
                    currProperty = Maps;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -798344417;
    }

    public class RealmEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmEntityClientBroadcast
    {
        public RealmEntityClientBroadcast(SharedCode.Entities.IRealmEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Aspects.Sessions.RealmRulesDef Def => __deltaObject__.Def;
        public long StartTime => __deltaObject__.StartTime;
        public bool Active => __deltaObject__.Active;
        public bool Dead => __deltaObject__.Dead;
        public bool AllowsToJoin => __deltaObject__.AllowsToJoin;
        public IDeltaDictionary<System.Guid, SharedCode.MapSystem.MapMeta> Maps
        {
            get
            {
                return __deltaObject__.Maps;
            }
        }

        public System.Threading.Tasks.Task<bool> AddMap(System.Guid mapId, SharedCode.MapSystem.MapMeta mapMeta)
        {
            return __deltaObject__.AddMap(mapId, mapMeta);
        }

        public System.Threading.Tasks.Task<bool> RemoveMap(System.Guid mapId)
        {
            return __deltaObject__.RemoveMap(mapId);
        }

        public System.Threading.Tasks.Task<bool> SetActive(bool active)
        {
            return __deltaObject__.SetActive(active);
        }

        public System.Threading.Tasks.Task<bool> SetMapDead(System.Guid mapId)
        {
            return __deltaObject__.SetMapDead(mapId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = StartTime;
                    break;
                case 12:
                    currProperty = Active;
                    break;
                case 14:
                    currProperty = Maps;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1014362553;
    }

    public class RealmEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmEntityClientFullApi
    {
        public RealmEntityClientFullApi(SharedCode.Entities.IRealmEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1475509953;
    }

    public class RealmEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmEntityClientFull
    {
        public RealmEntityClientFull(SharedCode.Entities.IRealmEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Aspects.Sessions.RealmRulesDef Def => __deltaObject__.Def;
        public long StartTime => __deltaObject__.StartTime;
        public bool Active => __deltaObject__.Active;
        public bool Dead => __deltaObject__.Dead;
        public bool AllowsToJoin => __deltaObject__.AllowsToJoin;
        public IDeltaDictionary<System.Guid, SharedCode.MapSystem.MapMeta> Maps
        {
            get
            {
                return __deltaObject__.Maps;
            }
        }

        public System.Threading.Tasks.Task<bool> AddMap(System.Guid mapId, SharedCode.MapSystem.MapMeta mapMeta)
        {
            return __deltaObject__.AddMap(mapId, mapMeta);
        }

        public System.Threading.Tasks.Task<bool> RemoveMap(System.Guid mapId)
        {
            return __deltaObject__.RemoveMap(mapId);
        }

        public System.Threading.Tasks.Task<bool> SetActive(bool active)
        {
            return __deltaObject__.SetActive(active);
        }

        public System.Threading.Tasks.Task<bool> SetMapDead(System.Guid mapId)
        {
            return __deltaObject__.SetMapDead(mapId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = StartTime;
                    break;
                case 12:
                    currProperty = Active;
                    break;
                case 14:
                    currProperty = Maps;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -2058419406;
    }

    public class RealmEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmEntityServerApi
    {
        public RealmEntityServerApi(SharedCode.Entities.IRealmEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 677469533;
    }

    public class RealmEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IRealmEntityServer
    {
        public RealmEntityServer(SharedCode.Entities.IRealmEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IRealmEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IRealmEntity)__deltaObjectBase__;
            }
        }

        public SharedCode.Aspects.Sessions.RealmRulesDef Def => __deltaObject__.Def;
        public long StartTime => __deltaObject__.StartTime;
        public bool Active => __deltaObject__.Active;
        public bool Dead => __deltaObject__.Dead;
        public bool AllowsToJoin => __deltaObject__.AllowsToJoin;
        public IDeltaDictionary<System.Guid, bool> AttachedAccounts
        {
            get
            {
                return __deltaObject__.AttachedAccounts;
            }
        }

        public IDeltaDictionary<System.Guid, SharedCode.MapSystem.MapMeta> Maps
        {
            get
            {
                return __deltaObject__.Maps;
            }
        }

        public System.Threading.Tasks.Task<bool> TryAttach(System.Guid account)
        {
            return __deltaObject__.TryAttach(account);
        }

        public System.Threading.Tasks.Task<bool> Enter(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> account)
        {
            return __deltaObject__.Enter(account);
        }

        public System.Threading.Tasks.Task<bool> Leave(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> account)
        {
            return __deltaObject__.Leave(account);
        }

        public System.Threading.Tasks.Task<bool> AddMap(System.Guid mapId, SharedCode.MapSystem.MapMeta mapMeta)
        {
            return __deltaObject__.AddMap(mapId, mapMeta);
        }

        public System.Threading.Tasks.Task<bool> RemoveMap(System.Guid mapId)
        {
            return __deltaObject__.RemoveMap(mapId);
        }

        public System.Threading.Tasks.Task<bool> SetActive(bool active)
        {
            return __deltaObject__.SetActive(active);
        }

        public System.Threading.Tasks.Task<bool> SetMapDead(System.Guid mapId)
        {
            return __deltaObject__.SetMapDead(mapId);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Def;
                    break;
                case 11:
                    currProperty = StartTime;
                    break;
                case 12:
                    currProperty = Active;
                    break;
                case 13:
                    currProperty = AttachedAccounts;
                    break;
                case 14:
                    currProperty = Maps;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1761614014;
    }
}