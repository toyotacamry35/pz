// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class WorldObjectsInformationDataSetEntity
    {
        public Task RegisterWorldObjectsInNewInformationSet(GeneratedCode.Repositories.EntityId worldObjectId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RegisterWorldObjectsInNewInformationSetRunMaster(worldObjectId).AsTask();
                else
                    return RegisterWorldObjectsInNewInformationSetRun(worldObjectId).AsTask();
            else
                return SendFuncs.RegisterWorldObjectsInNewInformationSet(worldObjectId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> RegisterWorldObjectsInNewInformationSetCreateDeferredDelegate(GeneratedCode.Repositories.EntityId worldObjectId) => () =>
        {
            return RegisterWorldObjectsInNewInformationSet(worldObjectId);
        }

        ;
        public async ValueTask RegisterWorldObjectsInNewInformationSetRunMaster(GeneratedCode.Repositories.EntityId worldObjectId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RegisterWorldObjectsInNewInformationSetCreateDeferredDelegate(worldObjectId), nameof(RegisterWorldObjectsInNewInformationSet));
            }

            await RegisterWorldObjectsInNewInformationSetRun(worldObjectId);
        }

        public async ValueTask RegisterWorldObjectsInNewInformationSetRun(GeneratedCode.Repositories.EntityId worldObjectId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IWorldObjectsInformationDataSetEntity), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RegisterWorldObjectsInNewInformationSet)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RegisterWorldObjectsInNewInformationSetImpl(worldObjectId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task RegisterWorldObjectsInNewInformationSetBatch(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsIds)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RegisterWorldObjectsInNewInformationSetBatchRunMaster(worldObjectsIds).AsTask();
                else
                    return RegisterWorldObjectsInNewInformationSetBatchRun(worldObjectsIds).AsTask();
            else
                return SendFuncs.RegisterWorldObjectsInNewInformationSetBatch(worldObjectsIds, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> RegisterWorldObjectsInNewInformationSetBatchCreateDeferredDelegate(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsIds) => () =>
        {
            return RegisterWorldObjectsInNewInformationSetBatch(worldObjectsIds);
        }

        ;
        public async ValueTask RegisterWorldObjectsInNewInformationSetBatchRunMaster(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsIds)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RegisterWorldObjectsInNewInformationSetBatchCreateDeferredDelegate(worldObjectsIds), nameof(RegisterWorldObjectsInNewInformationSetBatch));
            }

            await RegisterWorldObjectsInNewInformationSetBatchRun(worldObjectsIds);
        }

        public async ValueTask RegisterWorldObjectsInNewInformationSetBatchRun(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsIds)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IWorldObjectsInformationDataSetEntity), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RegisterWorldObjectsInNewInformationSetBatch)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RegisterWorldObjectsInNewInformationSetBatchImpl(worldObjectsIds);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task UnregisterWorldObjectsInNewInformationSet(GeneratedCode.Repositories.EntityId worldObjectId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UnregisterWorldObjectsInNewInformationSetRunMaster(worldObjectId).AsTask();
                else
                    return UnregisterWorldObjectsInNewInformationSetRun(worldObjectId).AsTask();
            else
                return SendFuncs.UnregisterWorldObjectsInNewInformationSet(worldObjectId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> UnregisterWorldObjectsInNewInformationSetCreateDeferredDelegate(GeneratedCode.Repositories.EntityId worldObjectId) => () =>
        {
            return UnregisterWorldObjectsInNewInformationSet(worldObjectId);
        }

        ;
        public async ValueTask UnregisterWorldObjectsInNewInformationSetRunMaster(GeneratedCode.Repositories.EntityId worldObjectId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UnregisterWorldObjectsInNewInformationSetCreateDeferredDelegate(worldObjectId), nameof(UnregisterWorldObjectsInNewInformationSet));
            }

            await UnregisterWorldObjectsInNewInformationSetRun(worldObjectId);
        }

        public async ValueTask UnregisterWorldObjectsInNewInformationSetRun(GeneratedCode.Repositories.EntityId worldObjectId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IWorldObjectsInformationDataSetEntity), 2);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(UnregisterWorldObjectsInNewInformationSet)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = UnregisterWorldObjectsInNewInformationSetImpl(worldObjectId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task UnregisterWorldObjectsInNewInformationSetBatch(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsIds)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UnregisterWorldObjectsInNewInformationSetBatchRunMaster(worldObjectsIds).AsTask();
                else
                    return UnregisterWorldObjectsInNewInformationSetBatchRun(worldObjectsIds).AsTask();
            else
                return SendFuncs.UnregisterWorldObjectsInNewInformationSetBatch(worldObjectsIds, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> UnregisterWorldObjectsInNewInformationSetBatchCreateDeferredDelegate(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsIds) => () =>
        {
            return UnregisterWorldObjectsInNewInformationSetBatch(worldObjectsIds);
        }

        ;
        public async ValueTask UnregisterWorldObjectsInNewInformationSetBatchRunMaster(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsIds)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UnregisterWorldObjectsInNewInformationSetBatchCreateDeferredDelegate(worldObjectsIds), nameof(UnregisterWorldObjectsInNewInformationSetBatch));
            }

            await UnregisterWorldObjectsInNewInformationSetBatchRun(worldObjectsIds);
        }

        public async ValueTask UnregisterWorldObjectsInNewInformationSetBatchRun(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsIds)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IWorldObjectsInformationDataSetEntity), 3);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(UnregisterWorldObjectsInNewInformationSetBatch)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = UnregisterWorldObjectsInNewInformationSetBatchImpl(worldObjectsIds);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> ContainsWorldObjectInformation(GeneratedCode.Repositories.EntityId worldObjectId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainsWorldObjectInformationRunMaster(worldObjectId).AsTask();
                else
                    return ContainsWorldObjectInformationRun(worldObjectId).AsTask();
            else
                return SendFuncs.ContainsWorldObjectInformation(worldObjectId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ContainsWorldObjectInformationCreateDeferredDelegate(GeneratedCode.Repositories.EntityId worldObjectId) => () =>
        {
            return ContainsWorldObjectInformation(worldObjectId);
        }

        ;
        public async ValueTask<bool> ContainsWorldObjectInformationRunMaster(GeneratedCode.Repositories.EntityId worldObjectId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainsWorldObjectInformationCreateDeferredDelegate(worldObjectId), nameof(ContainsWorldObjectInformation));
            }

            return await ContainsWorldObjectInformationRun(worldObjectId);
        }

        public async ValueTask<bool> ContainsWorldObjectInformationRun(GeneratedCode.Repositories.EntityId worldObjectId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IWorldObjectsInformationDataSetEntity), 4);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = ContainsWorldObjectInformationImpl(worldObjectId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<System.Collections.Generic.List<GeneratedCode.Repositories.EntityId>> ContainsWorldObjectInformationList(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ContainsWorldObjectInformationListRunMaster(worldObjectsId).AsTask();
                else
                    return ContainsWorldObjectInformationListRun(worldObjectsId).AsTask();
            else
                return SendFuncs.ContainsWorldObjectInformationList(worldObjectsId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<System.Collections.Generic.List<GeneratedCode.Repositories.EntityId>>> ContainsWorldObjectInformationListCreateDeferredDelegate(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsId) => () =>
        {
            return ContainsWorldObjectInformationList(worldObjectsId);
        }

        ;
        public async ValueTask<System.Collections.Generic.List<GeneratedCode.Repositories.EntityId>> ContainsWorldObjectInformationListRunMaster(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ContainsWorldObjectInformationListCreateDeferredDelegate(worldObjectsId), nameof(ContainsWorldObjectInformationList));
            }

            return await ContainsWorldObjectInformationListRun(worldObjectsId);
        }

        public async ValueTask<System.Collections.Generic.List<GeneratedCode.Repositories.EntityId>> ContainsWorldObjectInformationListRun(System.Collections.Generic.List<GeneratedCode.Repositories.EntityId> worldObjectsId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IWorldObjectsInformationDataSetEntity), 5);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = ContainsWorldObjectInformationListImpl(worldObjectsId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class WorldObjectPositionInformation
    {
        public Task<bool> SetPosition(SharedCode.Utils.Vector3 position)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetPositionRunMaster(position).AsTask();
                else
                    return SetPositionRun(position).AsTask();
            else
                return SendFuncs.SetPosition(position, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> SetPositionCreateDeferredDelegate(SharedCode.Utils.Vector3 position) => () =>
        {
            return SetPosition(position);
        }

        ;
        public async ValueTask<bool> SetPositionRunMaster(SharedCode.Utils.Vector3 position)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetPositionCreateDeferredDelegate(position), nameof(SetPosition));
            }

            return await SetPositionRun(position);
        }

        public async ValueTask<bool> SetPositionRun(SharedCode.Utils.Vector3 position)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.IWorldObjectPositionInformation), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(SetPosition)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = SetPositionImpl(position);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class CharacterPositionInformation
    {
        public Task<bool> SetMutation(Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef mutation)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetMutationRunMaster(mutation).AsTask();
                else
                    return SetMutationRun(mutation).AsTask();
            else
                return SendFuncs.SetMutation(mutation, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> SetMutationCreateDeferredDelegate(Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef mutation) => () =>
        {
            return SetMutation(mutation);
        }

        ;
        public async ValueTask<bool> SetMutationRunMaster(Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef mutation)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetMutationCreateDeferredDelegate(mutation), nameof(SetMutation));
            }

            return await SetMutationRun(mutation);
        }

        public async ValueTask<bool> SetMutationRun(Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef mutation)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.ICharacterPositionInformation), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(SetMutation)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = SetMutationImpl(mutation);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> SetPosition(SharedCode.Utils.Vector3 position)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetPositionRunMaster(position).AsTask();
                else
                    return SetPositionRun(position).AsTask();
            else
                return SendFuncs.SetPosition(position, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> SetPositionCreateDeferredDelegate(SharedCode.Utils.Vector3 position) => () =>
        {
            return SetPosition(position);
        }

        ;
        public async ValueTask<bool> SetPositionRunMaster(SharedCode.Utils.Vector3 position)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetPositionCreateDeferredDelegate(position), nameof(SetPosition));
            }

            return await SetPositionRun(position);
        }

        public async ValueTask<bool> SetPositionRun(SharedCode.Utils.Vector3 position)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.ICharacterPositionInformation), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(SetPosition)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = SetPositionImpl(position);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }
    }
}