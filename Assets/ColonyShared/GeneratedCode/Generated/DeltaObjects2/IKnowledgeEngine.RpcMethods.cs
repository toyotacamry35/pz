// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class KnowledgeEngine
    {
        public Task<SharedCode.Entities.Engine.TechnologyOperationResult> AddKnowledge(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddKnowledgeRunMaster(knowledgeDef).AsTask();
                else
                    return AddKnowledgeRun(knowledgeDef).AsTask();
            else
                return SendFuncs.AddKnowledge(knowledgeDef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.TechnologyOperationResult>> AddKnowledgeCreateDeferredDelegate(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef) => () =>
        {
            return AddKnowledge(knowledgeDef);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.TechnologyOperationResult> AddKnowledgeRunMaster(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddKnowledgeCreateDeferredDelegate(knowledgeDef), nameof(AddKnowledge));
            }

            return await AddKnowledgeRun(knowledgeDef);
        }

        public async ValueTask<SharedCode.Entities.Engine.TechnologyOperationResult> AddKnowledgeRun(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.IKnowledgeEngine), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(AddKnowledge)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = AddKnowledgeImpl(knowledgeDef);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task AddTechnology(SharedCode.Aspects.Science.TechnologyDef technologyDef)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddTechnologyRunMaster(technologyDef).AsTask();
                else
                    return AddTechnologyRun(technologyDef).AsTask();
            else
                return SendFuncs.AddTechnology(technologyDef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> AddTechnologyCreateDeferredDelegate(SharedCode.Aspects.Science.TechnologyDef technologyDef) => () =>
        {
            return AddTechnology(technologyDef);
        }

        ;
        public async ValueTask AddTechnologyRunMaster(SharedCode.Aspects.Science.TechnologyDef technologyDef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddTechnologyCreateDeferredDelegate(technologyDef), nameof(AddTechnology));
            }

            await AddTechnologyRun(technologyDef);
        }

        public async ValueTask AddTechnologyRun(SharedCode.Aspects.Science.TechnologyDef technologyDef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.IKnowledgeEngine), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(AddTechnology)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = AddTechnologyImpl(technologyDef);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.TechnologyOperationResult> Explore(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, SharedCode.Aspects.Science.TechPointCountDef[] rewardPoints)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ExploreRunMaster(knowledgeDef, rewardPoints).AsTask();
                else
                    return ExploreRun(knowledgeDef, rewardPoints).AsTask();
            else
                return SendFuncs.Explore(knowledgeDef, rewardPoints, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.TechnologyOperationResult>> ExploreCreateDeferredDelegate(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, SharedCode.Aspects.Science.TechPointCountDef[] rewardPoints) => () =>
        {
            return Explore(knowledgeDef, rewardPoints);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.TechnologyOperationResult> ExploreRunMaster(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, SharedCode.Aspects.Science.TechPointCountDef[] rewardPoints)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ExploreCreateDeferredDelegate(knowledgeDef, rewardPoints), nameof(Explore));
            }

            return await ExploreRun(knowledgeDef, rewardPoints);
        }

        public async ValueTask<SharedCode.Entities.Engine.TechnologyOperationResult> ExploreRun(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, SharedCode.Aspects.Science.TechPointCountDef[] rewardPoints)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.IKnowledgeEngine), 2);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(Explore)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ExploreImpl(knowledgeDef, rewardPoints);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.TechnologyOperationResult> TryToActivate(SharedCode.Aspects.Science.TechnologyDef technologyDef, bool doActivate)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return TryToActivateRunMaster(technologyDef, doActivate).AsTask();
                else
                    return TryToActivateRun(technologyDef, doActivate).AsTask();
            else
                return SendFuncs.TryToActivate(technologyDef, doActivate, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.TechnologyOperationResult>> TryToActivateCreateDeferredDelegate(SharedCode.Aspects.Science.TechnologyDef technologyDef, bool doActivate) => () =>
        {
            return TryToActivate(technologyDef, doActivate);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.TechnologyOperationResult> TryToActivateRunMaster(SharedCode.Aspects.Science.TechnologyDef technologyDef, bool doActivate)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(TryToActivateCreateDeferredDelegate(technologyDef, doActivate), nameof(TryToActivate));
            }

            return await TryToActivateRun(technologyDef, doActivate);
        }

        public async ValueTask<SharedCode.Entities.Engine.TechnologyOperationResult> TryToActivateRun(SharedCode.Aspects.Science.TechnologyDef technologyDef, bool doActivate)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.IKnowledgeEngine), 3);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(TryToActivate)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = TryToActivateImpl(technologyDef, doActivate);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.TechnologyOperationResult> ChangeRPoints(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ChangeRPointsRunMaster(techPointCounts, isIncrement).AsTask();
                else
                    return ChangeRPointsRun(techPointCounts, isIncrement).AsTask();
            else
                return SendFuncs.ChangeRPoints(techPointCounts, isIncrement, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.TechnologyOperationResult>> ChangeRPointsCreateDeferredDelegate(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement) => () =>
        {
            return ChangeRPoints(techPointCounts, isIncrement);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.TechnologyOperationResult> ChangeRPointsRunMaster(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ChangeRPointsCreateDeferredDelegate(techPointCounts, isIncrement), nameof(ChangeRPoints));
            }

            return await ChangeRPointsRun(techPointCounts, isIncrement);
        }

        public async ValueTask<SharedCode.Entities.Engine.TechnologyOperationResult> ChangeRPointsRun(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.IKnowledgeEngine), 4);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(ChangeRPoints)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = ChangeRPointsImpl(techPointCounts, isIncrement);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> CanChangeRPoints(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CanChangeRPointsRunMaster(techPointCounts, isIncrement).AsTask();
                else
                    return CanChangeRPointsRun(techPointCounts, isIncrement).AsTask();
            else
                return SendFuncs.CanChangeRPoints(techPointCounts, isIncrement, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CanChangeRPointsCreateDeferredDelegate(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement) => () =>
        {
            return CanChangeRPoints(techPointCounts, isIncrement);
        }

        ;
        public async ValueTask<bool> CanChangeRPointsRunMaster(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanChangeRPointsCreateDeferredDelegate(techPointCounts, isIncrement), nameof(CanChangeRPoints));
            }

            return await CanChangeRPointsRun(techPointCounts, isIncrement);
        }

        public async ValueTask<bool> CanChangeRPointsRun(SharedCode.Aspects.Science.TechPointCountDef[] techPointCounts, bool isIncrement)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.IKnowledgeEngine), 5);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(CanChangeRPoints)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = CanChangeRPointsImpl(techPointCounts, isIncrement);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Engine.TechnologyOperationResult> AddShownKnowledgeRecord(SharedCode.Aspects.Science.KnowledgeRecordDef knowledgeRecordDef)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddShownKnowledgeRecordRunMaster(knowledgeRecordDef).AsTask();
                else
                    return AddShownKnowledgeRecordRun(knowledgeRecordDef).AsTask();
            else
                return SendFuncs.AddShownKnowledgeRecord(knowledgeRecordDef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Engine.TechnologyOperationResult>> AddShownKnowledgeRecordCreateDeferredDelegate(SharedCode.Aspects.Science.KnowledgeRecordDef knowledgeRecordDef) => () =>
        {
            return AddShownKnowledgeRecord(knowledgeRecordDef);
        }

        ;
        public async ValueTask<SharedCode.Entities.Engine.TechnologyOperationResult> AddShownKnowledgeRecordRunMaster(SharedCode.Aspects.Science.KnowledgeRecordDef knowledgeRecordDef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddShownKnowledgeRecordCreateDeferredDelegate(knowledgeRecordDef), nameof(AddShownKnowledgeRecord));
            }

            return await AddShownKnowledgeRecordRun(knowledgeRecordDef);
        }

        public async ValueTask<SharedCode.Entities.Engine.TechnologyOperationResult> AddShownKnowledgeRecordRun(SharedCode.Aspects.Science.KnowledgeRecordDef knowledgeRecordDef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Engine.IKnowledgeEngine), 6);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(AddShownKnowledgeRecord)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = AddShownKnowledgeRecordImpl(knowledgeRecordDef);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }
    }
}