// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class BankCellAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankCellAlways
    {
        public BankCellAlways(SharedCode.Entities.IBankCell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IBankCell __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IBankCell)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnerInformation;
                    break;
                case 13:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -610125918;
    }

    public class BankCellClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankCellClientBroadcast
    {
        public BankCellClientBroadcast(SharedCode.Entities.IBankCell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IBankCell __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IBankCell)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientBroadcast OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientBroadcast)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnerInformation;
                    break;
                case 12:
                    currProperty = OpenMechanics;
                    break;
                case 13:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1925136497;
    }

    public class BankCellClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankCellClientFullApi
    {
        public BankCellClientFullApi(SharedCode.Entities.IBankCell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IBankCell __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IBankCell)__deltaObjectBase__;
            }
        }

        public override int TypeId => -503516217;
    }

    public class BankCellClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankCellClientFull
    {
        public BankCellClientFull(SharedCode.Entities.IBankCell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IBankCell __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IBankCell)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientFull OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientFull)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnerInformation;
                    break;
                case 11:
                    currProperty = Inventory;
                    break;
                case 12:
                    currProperty = OpenMechanics;
                    break;
                case 13:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -267232359;
    }

    public class BankCellServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankCellServerApi
    {
        public BankCellServerApi(SharedCode.Entities.IBankCell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IBankCell __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IBankCell)__deltaObjectBase__;
            }
        }

        public override int TypeId => 550830354;
    }

    public class BankCellServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBankCellServer
    {
        public BankCellServer(SharedCode.Entities.IBankCell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IBankCell __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IBankCell)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsServer OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsServer)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<ResourceSystem.Utils.OuterRef> GetOpenOuterRef(ResourceSystem.Utils.OuterRef oref)
        {
            return __deltaObject__.GetOpenOuterRef(oref);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = OwnerInformation;
                    break;
                case 11:
                    currProperty = Inventory;
                    break;
                case 12:
                    currProperty = OpenMechanics;
                    break;
                case 13:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 351560174;
    }
}