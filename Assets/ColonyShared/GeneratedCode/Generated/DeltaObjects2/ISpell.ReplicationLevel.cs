// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class SpellAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellAlways
    {
        public SpellAlways(SharedCode.Wizardry.ISpell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpell __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpell)__deltaObjectBase__;
            }
        }

        public SharedCode.Wizardry.SpellStateValidator Validator => __deltaObject__.Validator;
        public override int TypeId => 160138661;
    }

    public class SpellClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientBroadcast
    {
        public SpellClientBroadcast(SharedCode.Wizardry.ISpell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpell __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpell)__deltaObjectBase__;
            }
        }

        public SharedCode.Wizardry.SpellCast CastData => __deltaObject__.CastData;
        public IDeltaList<ResourceSystem.Aspects.SpellModifierDef> Modifiers => __deltaObject__.Modifiers;
        public SharedCode.Wizardry.SpellFinishReason FinishReason => __deltaObject__.FinishReason;
        public SharedCode.Wizardry.SpellId Id => __deltaObject__.Id;
        public long Finished => __deltaObject__.Finished;
        public long Started => __deltaObject__.Started;
        public SharedCode.Wizardry.SpellStateValidator Validator => __deltaObject__.Validator;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 15:
                    currProperty = CastData;
                    break;
                case 16:
                    currProperty = Modifiers;
                    break;
                case 17:
                    currProperty = FinishReason;
                    break;
                case 18:
                    currProperty = Id;
                    break;
                case 19:
                    currProperty = Finished;
                    break;
                case 20:
                    currProperty = Started;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1755308034;
    }

    public class SpellClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientFullApi
    {
        public SpellClientFullApi(SharedCode.Wizardry.ISpell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpell __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpell)__deltaObjectBase__;
            }
        }

        public override int TypeId => 2087097572;
    }

    public class SpellClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientFull
    {
        public SpellClientFull(SharedCode.Wizardry.ISpell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpell __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpell)__deltaObjectBase__;
            }
        }

        public SharedCode.Wizardry.SpellCast CastData => __deltaObject__.CastData;
        public IDeltaList<ResourceSystem.Aspects.SpellModifierDef> Modifiers => __deltaObject__.Modifiers;
        public SharedCode.Wizardry.SpellFinishReason FinishReason => __deltaObject__.FinishReason;
        public SharedCode.Wizardry.SpellId Id => __deltaObject__.Id;
        public long Finished => __deltaObject__.Finished;
        public long Started => __deltaObject__.Started;
        public SharedCode.Wizardry.SpellStateValidator Validator => __deltaObject__.Validator;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 15:
                    currProperty = CastData;
                    break;
                case 16:
                    currProperty = Modifiers;
                    break;
                case 17:
                    currProperty = FinishReason;
                    break;
                case 18:
                    currProperty = Id;
                    break;
                case 19:
                    currProperty = Finished;
                    break;
                case 20:
                    currProperty = Started;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -118763944;
    }

    public class SpellServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellServerApi
    {
        public SpellServerApi(SharedCode.Wizardry.ISpell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpell __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpell)__deltaObjectBase__;
            }
        }

        public override int TypeId => -754442126;
    }

    public class SpellServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellServer
    {
        public SpellServer(SharedCode.Wizardry.ISpell deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpell __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpell)__deltaObjectBase__;
            }
        }

        public SharedCode.Wizardry.SpellCast CastData => __deltaObject__.CastData;
        public IDeltaList<ResourceSystem.Aspects.SpellModifierDef> Modifiers => __deltaObject__.Modifiers;
        public SharedCode.Wizardry.SpellFinishReason FinishReason => __deltaObject__.FinishReason;
        public SharedCode.Wizardry.SpellId Id => __deltaObject__.Id;
        public long Finished => __deltaObject__.Finished;
        public long Started => __deltaObject__.Started;
        public SharedCode.Wizardry.SpellStateValidator Validator => __deltaObject__.Validator;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 15:
                    currProperty = CastData;
                    break;
                case 16:
                    currProperty = Modifiers;
                    break;
                case 17:
                    currProperty = FinishReason;
                    break;
                case 18:
                    currProperty = Id;
                    break;
                case 19:
                    currProperty = Finished;
                    break;
                case 20:
                    currProperty = Started;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1394179196;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class SpellSlotAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellSlotAlways
    {
        public SpellSlotAlways(SharedCode.Wizardry.ISpellSlot deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellSlot __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellSlot)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1840218883;
    }

    public class SpellSlotClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellSlotClientBroadcast
    {
        public SpellSlotClientBroadcast(SharedCode.Wizardry.ISpellSlot deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellSlot __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellSlot)__deltaObjectBase__;
            }
        }

        public override int TypeId => -439309249;
    }

    public class SpellSlotClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellSlotClientFullApi
    {
        public SpellSlotClientFullApi(SharedCode.Wizardry.ISpellSlot deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellSlot __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellSlot)__deltaObjectBase__;
            }
        }

        public override int TypeId => 613468657;
    }

    public class SpellSlotClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellSlotClientFull
    {
        public SpellSlotClientFull(SharedCode.Wizardry.ISpellSlot deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellSlot __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellSlot)__deltaObjectBase__;
            }
        }

        public override int TypeId => -127238831;
    }

    public class SpellSlotServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellSlotServerApi
    {
        public SpellSlotServerApi(SharedCode.Wizardry.ISpellSlot deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellSlot __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellSlot)__deltaObjectBase__;
            }
        }

        public override int TypeId => 932078585;
    }

    public class SpellSlotServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellSlotServer
    {
        public SpellSlotServer(SharedCode.Wizardry.ISpellSlot deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellSlot __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellSlot)__deltaObjectBase__;
            }
        }

        public override int TypeId => -500937319;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class SpellStatusAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusAlways
    {
        public SpellStatusAlways(SharedCode.Wizardry.ISpellStatus deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellStatus __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellStatus)__deltaObjectBase__;
            }
        }

        public SharedCode.Wizardry.SubSpell SubSpell => __deltaObject__.SubSpell;
        public SharedCode.Wizardry.SpellDef Spell => __deltaObject__.Spell;
        public IDeltaList<(SharedCode.Wizardry.SpellWordDef, int)> ActivationsPerWord => __deltaObject__.ActivationsPerWord;
        public int SuccesfullPredicatesCheckCount => __deltaObject__.SuccesfullPredicatesCheckCount;
        public int FailedPredicatesCheckCount => __deltaObject__.FailedPredicatesCheckCount;
        public int ActivationsCount => __deltaObject__.ActivationsCount;
        public int DeactivationsCount => __deltaObject__.DeactivationsCount;
        public int SuccesfullActivationsCount => __deltaObject__.SuccesfullActivationsCount;
        IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusAlways> __SubSpells__Wrapper__;
        public IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusAlways> SubSpells
        {
            get
            {
                if (__SubSpells__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__SubSpells__Wrapper__).GetBaseDeltaObject() != __deltaObject__.SubSpells)
                    __SubSpells__Wrapper__ = __deltaObject__.SubSpells == null ? null : new DeltaListWrapper<SharedCode.Wizardry.ISpellStatus, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusAlways>(__deltaObject__.SubSpells);
                return __SubSpells__Wrapper__;
            }
        }

        public int Activations => __deltaObject__.Activations;
        public long AccumulatedDelta => __deltaObject__.AccumulatedDelta;
        public long LastTimeUpdated => __deltaObject__.LastTimeUpdated;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = SubSpell;
                    break;
                case 11:
                    currProperty = Spell;
                    break;
                case 12:
                    currProperty = ActivationsPerWord;
                    break;
                case 13:
                    currProperty = SuccesfullPredicatesCheckCount;
                    break;
                case 14:
                    currProperty = FailedPredicatesCheckCount;
                    break;
                case 15:
                    currProperty = ActivationsCount;
                    break;
                case 16:
                    currProperty = DeactivationsCount;
                    break;
                case 17:
                    currProperty = SuccesfullActivationsCount;
                    break;
                case 18:
                    currProperty = SubSpells;
                    break;
                case 19:
                    currProperty = Activations;
                    break;
                case 20:
                    currProperty = AccumulatedDelta;
                    break;
                case 21:
                    currProperty = LastTimeUpdated;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 34249606;
    }

    public class SpellStatusClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientBroadcast
    {
        public SpellStatusClientBroadcast(SharedCode.Wizardry.ISpellStatus deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellStatus __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellStatus)__deltaObjectBase__;
            }
        }

        public SharedCode.Wizardry.SubSpell SubSpell => __deltaObject__.SubSpell;
        public SharedCode.Wizardry.SpellDef Spell => __deltaObject__.Spell;
        public IDeltaList<(SharedCode.Wizardry.SpellWordDef, int)> ActivationsPerWord => __deltaObject__.ActivationsPerWord;
        public int SuccesfullPredicatesCheckCount => __deltaObject__.SuccesfullPredicatesCheckCount;
        public int FailedPredicatesCheckCount => __deltaObject__.FailedPredicatesCheckCount;
        public int ActivationsCount => __deltaObject__.ActivationsCount;
        public int DeactivationsCount => __deltaObject__.DeactivationsCount;
        public int SuccesfullActivationsCount => __deltaObject__.SuccesfullActivationsCount;
        IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientBroadcast> __SubSpells__Wrapper__;
        public IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientBroadcast> SubSpells
        {
            get
            {
                if (__SubSpells__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__SubSpells__Wrapper__).GetBaseDeltaObject() != __deltaObject__.SubSpells)
                    __SubSpells__Wrapper__ = __deltaObject__.SubSpells == null ? null : new DeltaListWrapper<SharedCode.Wizardry.ISpellStatus, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientBroadcast>(__deltaObject__.SubSpells);
                return __SubSpells__Wrapper__;
            }
        }

        public int Activations => __deltaObject__.Activations;
        public long AccumulatedDelta => __deltaObject__.AccumulatedDelta;
        public long LastTimeUpdated => __deltaObject__.LastTimeUpdated;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = SubSpell;
                    break;
                case 11:
                    currProperty = Spell;
                    break;
                case 12:
                    currProperty = ActivationsPerWord;
                    break;
                case 13:
                    currProperty = SuccesfullPredicatesCheckCount;
                    break;
                case 14:
                    currProperty = FailedPredicatesCheckCount;
                    break;
                case 15:
                    currProperty = ActivationsCount;
                    break;
                case 16:
                    currProperty = DeactivationsCount;
                    break;
                case 17:
                    currProperty = SuccesfullActivationsCount;
                    break;
                case 18:
                    currProperty = SubSpells;
                    break;
                case 19:
                    currProperty = Activations;
                    break;
                case 20:
                    currProperty = AccumulatedDelta;
                    break;
                case 21:
                    currProperty = LastTimeUpdated;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1844183049;
    }

    public class SpellStatusClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientFullApi
    {
        public SpellStatusClientFullApi(SharedCode.Wizardry.ISpellStatus deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellStatus __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellStatus)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1574144698;
    }

    public class SpellStatusClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientFull
    {
        public SpellStatusClientFull(SharedCode.Wizardry.ISpellStatus deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellStatus __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellStatus)__deltaObjectBase__;
            }
        }

        public SharedCode.Wizardry.SubSpell SubSpell => __deltaObject__.SubSpell;
        public SharedCode.Wizardry.SpellDef Spell => __deltaObject__.Spell;
        public IDeltaList<(SharedCode.Wizardry.SpellWordDef, int)> ActivationsPerWord => __deltaObject__.ActivationsPerWord;
        public int SuccesfullPredicatesCheckCount => __deltaObject__.SuccesfullPredicatesCheckCount;
        public int FailedPredicatesCheckCount => __deltaObject__.FailedPredicatesCheckCount;
        public int ActivationsCount => __deltaObject__.ActivationsCount;
        public int DeactivationsCount => __deltaObject__.DeactivationsCount;
        public int SuccesfullActivationsCount => __deltaObject__.SuccesfullActivationsCount;
        IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientFull> __SubSpells__Wrapper__;
        public IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientFull> SubSpells
        {
            get
            {
                if (__SubSpells__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__SubSpells__Wrapper__).GetBaseDeltaObject() != __deltaObject__.SubSpells)
                    __SubSpells__Wrapper__ = __deltaObject__.SubSpells == null ? null : new DeltaListWrapper<SharedCode.Wizardry.ISpellStatus, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientFull>(__deltaObject__.SubSpells);
                return __SubSpells__Wrapper__;
            }
        }

        public int Activations => __deltaObject__.Activations;
        public long AccumulatedDelta => __deltaObject__.AccumulatedDelta;
        public long LastTimeUpdated => __deltaObject__.LastTimeUpdated;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = SubSpell;
                    break;
                case 11:
                    currProperty = Spell;
                    break;
                case 12:
                    currProperty = ActivationsPerWord;
                    break;
                case 13:
                    currProperty = SuccesfullPredicatesCheckCount;
                    break;
                case 14:
                    currProperty = FailedPredicatesCheckCount;
                    break;
                case 15:
                    currProperty = ActivationsCount;
                    break;
                case 16:
                    currProperty = DeactivationsCount;
                    break;
                case 17:
                    currProperty = SuccesfullActivationsCount;
                    break;
                case 18:
                    currProperty = SubSpells;
                    break;
                case 19:
                    currProperty = Activations;
                    break;
                case 20:
                    currProperty = AccumulatedDelta;
                    break;
                case 21:
                    currProperty = LastTimeUpdated;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1013575866;
    }

    public class SpellStatusServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusServerApi
    {
        public SpellStatusServerApi(SharedCode.Wizardry.ISpellStatus deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellStatus __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellStatus)__deltaObjectBase__;
            }
        }

        public override int TypeId => 578136946;
    }

    public class SpellStatusServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusServer
    {
        public SpellStatusServer(SharedCode.Wizardry.ISpellStatus deltaObject): base(deltaObject)
        {
        }

        SharedCode.Wizardry.ISpellStatus __deltaObject__
        {
            get
            {
                return (SharedCode.Wizardry.ISpellStatus)__deltaObjectBase__;
            }
        }

        public SharedCode.Wizardry.SubSpell SubSpell => __deltaObject__.SubSpell;
        public SharedCode.Wizardry.SpellDef Spell => __deltaObject__.Spell;
        public IDeltaList<(SharedCode.Wizardry.SpellWordDef, int)> ActivationsPerWord => __deltaObject__.ActivationsPerWord;
        public int SuccesfullPredicatesCheckCount => __deltaObject__.SuccesfullPredicatesCheckCount;
        public int FailedPredicatesCheckCount => __deltaObject__.FailedPredicatesCheckCount;
        public int ActivationsCount => __deltaObject__.ActivationsCount;
        public int DeactivationsCount => __deltaObject__.DeactivationsCount;
        public int SuccesfullActivationsCount => __deltaObject__.SuccesfullActivationsCount;
        IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusServer> __SubSpells__Wrapper__;
        public IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusServer> SubSpells
        {
            get
            {
                if (__SubSpells__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__SubSpells__Wrapper__).GetBaseDeltaObject() != __deltaObject__.SubSpells)
                    __SubSpells__Wrapper__ = __deltaObject__.SubSpells == null ? null : new DeltaListWrapper<SharedCode.Wizardry.ISpellStatus, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusServer>(__deltaObject__.SubSpells);
                return __SubSpells__Wrapper__;
            }
        }

        public int Activations => __deltaObject__.Activations;
        public long AccumulatedDelta => __deltaObject__.AccumulatedDelta;
        public long LastTimeUpdated => __deltaObject__.LastTimeUpdated;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = SubSpell;
                    break;
                case 11:
                    currProperty = Spell;
                    break;
                case 12:
                    currProperty = ActivationsPerWord;
                    break;
                case 13:
                    currProperty = SuccesfullPredicatesCheckCount;
                    break;
                case 14:
                    currProperty = FailedPredicatesCheckCount;
                    break;
                case 15:
                    currProperty = ActivationsCount;
                    break;
                case 16:
                    currProperty = DeactivationsCount;
                    break;
                case 17:
                    currProperty = SuccesfullActivationsCount;
                    break;
                case 18:
                    currProperty = SubSpells;
                    break;
                case 19:
                    currProperty = Activations;
                    break;
                case 20:
                    currProperty = AccumulatedDelta;
                    break;
                case 21:
                    currProperty = LastTimeUpdated;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1591339429;
    }
}