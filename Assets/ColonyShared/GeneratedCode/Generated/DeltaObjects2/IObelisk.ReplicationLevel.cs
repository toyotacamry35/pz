// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class ObeliskAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IObeliskAlways
    {
        public ObeliskAlways(GeneratedCode.DeltaObjects.IObelisk deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IObelisk __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IObelisk)__deltaObjectBase__;
            }
        }

        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Wizard;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 22:
                    currProperty = Def;
                    break;
                case 23:
                    currProperty = MapOwner;
                    break;
                case 24:
                    currProperty = StaticIdFromExport;
                    break;
                case 25:
                    currProperty = Name;
                    break;
                case 26:
                    currProperty = Prefab;
                    break;
                case 27:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 28:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 30:
                    currProperty = WorldSpaced;
                    break;
                case 31:
                    currProperty = MovementSync;
                    break;
                case 32:
                    currProperty = Buffs;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 2105661990;
    }

    public class ObeliskClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IObeliskClientBroadcast
    {
        public ObeliskClientBroadcast(GeneratedCode.DeltaObjects.IObelisk deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IObelisk __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IObelisk)__deltaObjectBase__;
            }
        }

        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientBroadcast AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientBroadcast)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Wizard;
                    break;
                case 11:
                    currProperty = SlaveWizardHolder;
                    break;
                case 12:
                    currProperty = Health;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 16:
                    currProperty = Stats;
                    break;
                case 17:
                    currProperty = SpawnedObject;
                    break;
                case 20:
                    currProperty = AnimationDoerOwner;
                    break;
                case 22:
                    currProperty = Def;
                    break;
                case 23:
                    currProperty = MapOwner;
                    break;
                case 24:
                    currProperty = StaticIdFromExport;
                    break;
                case 25:
                    currProperty = Name;
                    break;
                case 26:
                    currProperty = Prefab;
                    break;
                case 27:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 28:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 30:
                    currProperty = WorldSpaced;
                    break;
                case 31:
                    currProperty = MovementSync;
                    break;
                case 32:
                    currProperty = Buffs;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 921092856;
    }

    public class ObeliskClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IObeliskClientFullApi
    {
        public ObeliskClientFullApi(GeneratedCode.DeltaObjects.IObelisk deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IObelisk __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IObelisk)__deltaObjectBase__;
            }
        }

        public override int TypeId => 468622838;
    }

    public class ObeliskClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IObeliskClientFull
    {
        public ObeliskClientFull(GeneratedCode.DeltaObjects.IObelisk deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IObelisk __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IObelisk)__deltaObjectBase__;
            }
        }

        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteClientFull Brute => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteClientFull)__deltaObject__.Brute?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientFull AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientFull)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Wizard;
                    break;
                case 11:
                    currProperty = SlaveWizardHolder;
                    break;
                case 12:
                    currProperty = Health;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 15:
                    currProperty = Brute;
                    break;
                case 16:
                    currProperty = Stats;
                    break;
                case 17:
                    currProperty = SpawnedObject;
                    break;
                case 20:
                    currProperty = AnimationDoerOwner;
                    break;
                case 22:
                    currProperty = Def;
                    break;
                case 23:
                    currProperty = MapOwner;
                    break;
                case 24:
                    currProperty = StaticIdFromExport;
                    break;
                case 25:
                    currProperty = Name;
                    break;
                case 26:
                    currProperty = Prefab;
                    break;
                case 27:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 28:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 30:
                    currProperty = WorldSpaced;
                    break;
                case 31:
                    currProperty = MovementSync;
                    break;
                case 32:
                    currProperty = Buffs;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1951324266;
    }

    public class ObeliskServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IObeliskServerApi
    {
        public ObeliskServerApi(GeneratedCode.DeltaObjects.IObelisk deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IObelisk __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IObelisk)__deltaObjectBase__;
            }
        }

        public override int TypeId => 287696325;
    }

    public class ObeliskServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IObeliskServer
    {
        public ObeliskServer(GeneratedCode.DeltaObjects.IObelisk deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IObelisk __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IObelisk)__deltaObjectBase__;
            }
        }

        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteServer Brute => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteServer)__deltaObject__.Brute?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer Destroyable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer)__deltaObject__.Destroyable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerServer AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerServer)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<bool> InvokeHitZonesDamageReceivedEvent(Assets.ColonyShared.SharedCode.Aspects.Damage.Damage damage)
        {
            return __deltaObject__.InvokeHitZonesDamageReceivedEvent(damage);
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public event System.Func<Assets.ColonyShared.SharedCode.Aspects.Damage.Damage, System.Threading.Tasks.Task> HitZonesDamageReceivedEvent
        {
            add
            {
                __deltaObject__.HitZonesDamageReceivedEvent += value;
            }

            remove
            {
                __deltaObject__.HitZonesDamageReceivedEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Wizard;
                    break;
                case 11:
                    currProperty = SlaveWizardHolder;
                    break;
                case 12:
                    currProperty = Health;
                    break;
                case 13:
                    currProperty = Mortal;
                    break;
                case 15:
                    currProperty = Brute;
                    break;
                case 16:
                    currProperty = Stats;
                    break;
                case 17:
                    currProperty = SpawnedObject;
                    break;
                case 18:
                    currProperty = Destroyable;
                    break;
                case 20:
                    currProperty = AnimationDoerOwner;
                    break;
                case 22:
                    currProperty = Def;
                    break;
                case 23:
                    currProperty = MapOwner;
                    break;
                case 24:
                    currProperty = StaticIdFromExport;
                    break;
                case 25:
                    currProperty = Name;
                    break;
                case 26:
                    currProperty = Prefab;
                    break;
                case 27:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 28:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 30:
                    currProperty = WorldSpaced;
                    break;
                case 31:
                    currProperty = MovementSync;
                    break;
                case 32:
                    currProperty = Buffs;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1297252181;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class AltarAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAltarAlways
    {
        public AltarAlways(GeneratedCode.DeltaObjects.IAltar deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IAltar __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IAltar)__deltaObjectBase__;
            }
        }

        public Assets.Src.Aspects.Impl.Factions.Template.QuestDef CurrentQuestOfObject => __deltaObject__.CurrentQuestOfObject;
        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> CurrentObject => __deltaObject__.CurrentObject;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef CurrentObjectDef => __deltaObject__.CurrentObjectDef;
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalAlways)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsAlways)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = CurrentQuestOfObject;
                    break;
                case 11:
                    currProperty = CurrentObject;
                    break;
                case 12:
                    currProperty = CurrentObjectDef;
                    break;
                case 13:
                    currProperty = Wizard;
                    break;
                case 16:
                    currProperty = Mortal;
                    break;
                case 25:
                    currProperty = Def;
                    break;
                case 26:
                    currProperty = MapOwner;
                    break;
                case 27:
                    currProperty = StaticIdFromExport;
                    break;
                case 28:
                    currProperty = Name;
                    break;
                case 29:
                    currProperty = Prefab;
                    break;
                case 30:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 31:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 33:
                    currProperty = WorldSpaced;
                    break;
                case 34:
                    currProperty = MovementSync;
                    break;
                case 35:
                    currProperty = Buffs;
                    break;
                case 39:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1984677350;
    }

    public class AltarClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAltarClientBroadcast
    {
        public AltarClientBroadcast(GeneratedCode.DeltaObjects.IAltar deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IAltar __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IAltar)__deltaObjectBase__;
            }
        }

        public Assets.Src.Aspects.Impl.Factions.Template.QuestDef CurrentQuestOfObject => __deltaObject__.CurrentQuestOfObject;
        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> CurrentObject => __deltaObject__.CurrentObject;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef CurrentObjectDef => __deltaObject__.CurrentObjectDef;
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientBroadcast)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientBroadcast)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientBroadcast AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientBroadcast)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientBroadcast)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientBroadcast OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientBroadcast)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = CurrentQuestOfObject;
                    break;
                case 11:
                    currProperty = CurrentObject;
                    break;
                case 12:
                    currProperty = CurrentObjectDef;
                    break;
                case 13:
                    currProperty = Wizard;
                    break;
                case 14:
                    currProperty = SlaveWizardHolder;
                    break;
                case 15:
                    currProperty = Health;
                    break;
                case 16:
                    currProperty = Mortal;
                    break;
                case 19:
                    currProperty = Stats;
                    break;
                case 20:
                    currProperty = SpawnedObject;
                    break;
                case 23:
                    currProperty = AnimationDoerOwner;
                    break;
                case 25:
                    currProperty = Def;
                    break;
                case 26:
                    currProperty = MapOwner;
                    break;
                case 27:
                    currProperty = StaticIdFromExport;
                    break;
                case 28:
                    currProperty = Name;
                    break;
                case 29:
                    currProperty = Prefab;
                    break;
                case 30:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 31:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 33:
                    currProperty = WorldSpaced;
                    break;
                case 34:
                    currProperty = MovementSync;
                    break;
                case 35:
                    currProperty = Buffs;
                    break;
                case 38:
                    currProperty = OpenMechanics;
                    break;
                case 39:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -896890948;
    }

    public class AltarClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAltarClientFullApi
    {
        public AltarClientFullApi(GeneratedCode.DeltaObjects.IAltar deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IAltar __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IAltar)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1847153968;
    }

    public class AltarClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAltarClientFull
    {
        public AltarClientFull(GeneratedCode.DeltaObjects.IAltar deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IAltar __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IAltar)__deltaObjectBase__;
            }
        }

        public Assets.Src.Aspects.Impl.Factions.Template.QuestDef CurrentQuestOfObject => __deltaObject__.CurrentQuestOfObject;
        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> CurrentObject => __deltaObject__.CurrentObject;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef CurrentObjectDef => __deltaObject__.CurrentObjectDef;
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalClientFull)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteClientFull Brute => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteClientFull)__deltaObject__.Brute?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectClientFull)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientFull AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerClientFull)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsClientFull)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineClientFull Quest => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineClientFull)__deltaObject__.Quest?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientFull OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientFull)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = CurrentQuestOfObject;
                    break;
                case 11:
                    currProperty = CurrentObject;
                    break;
                case 12:
                    currProperty = CurrentObjectDef;
                    break;
                case 13:
                    currProperty = Wizard;
                    break;
                case 14:
                    currProperty = SlaveWizardHolder;
                    break;
                case 15:
                    currProperty = Health;
                    break;
                case 16:
                    currProperty = Mortal;
                    break;
                case 18:
                    currProperty = Brute;
                    break;
                case 19:
                    currProperty = Stats;
                    break;
                case 20:
                    currProperty = SpawnedObject;
                    break;
                case 23:
                    currProperty = AnimationDoerOwner;
                    break;
                case 25:
                    currProperty = Def;
                    break;
                case 26:
                    currProperty = MapOwner;
                    break;
                case 27:
                    currProperty = StaticIdFromExport;
                    break;
                case 28:
                    currProperty = Name;
                    break;
                case 29:
                    currProperty = Prefab;
                    break;
                case 30:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 31:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 33:
                    currProperty = WorldSpaced;
                    break;
                case 34:
                    currProperty = MovementSync;
                    break;
                case 35:
                    currProperty = Buffs;
                    break;
                case 36:
                    currProperty = Inventory;
                    break;
                case 37:
                    currProperty = Quest;
                    break;
                case 38:
                    currProperty = OpenMechanics;
                    break;
                case 39:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1566471597;
    }

    public class AltarServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAltarServerApi
    {
        public AltarServerApi(GeneratedCode.DeltaObjects.IAltar deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IAltar __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IAltar)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1782320367;
    }

    public class AltarServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAltarServer
    {
        public AltarServer(GeneratedCode.DeltaObjects.IAltar deltaObject): base(deltaObject)
        {
        }

        GeneratedCode.DeltaObjects.IAltar __deltaObject__
        {
            get
            {
                return (GeneratedCode.DeltaObjects.IAltar)__deltaObjectBase__;
            }
        }

        public Assets.Src.Aspects.Impl.Factions.Template.QuestDef CurrentQuestOfObject => __deltaObject__.CurrentQuestOfObject;
        public SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> CurrentObject => __deltaObject__.CurrentObject;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef CurrentObjectDef => __deltaObject__.CurrentObjectDef;
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer Mortal => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMortalServer)__deltaObject__.Mortal?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteServer Brute => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBruteServer)__deltaObject__.Brute?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer SpawnedObject => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpawnedObjectServer)__deltaObject__.SpawnedObject?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer Destroyable => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IDestroyableServer)__deltaObject__.Destroyable?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerServer AnimationDoerOwner => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IAnimationDoerOwnerServer)__deltaObject__.AnimationDoerOwner?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public bool QuerySpatialData => __deltaObject__.QuerySpatialData;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer Buffs => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuffsServer)__deltaObject__.Buffs?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineServer Quest => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IQuestEngineServer)__deltaObject__.Quest?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsServer OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsServer)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<bool> InvokeHitZonesDamageReceivedEvent(Assets.ColonyShared.SharedCode.Aspects.Damage.Damage damage)
        {
            return __deltaObject__.InvokeHitZonesDamageReceivedEvent(damage);
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public System.Threading.Tasks.Task<ResourceSystem.Utils.OuterRef> GetOpenOuterRef(ResourceSystem.Utils.OuterRef oref)
        {
            return __deltaObject__.GetOpenOuterRef(oref);
        }

        public event System.Func<Assets.ColonyShared.SharedCode.Aspects.Damage.Damage, System.Threading.Tasks.Task> HitZonesDamageReceivedEvent
        {
            add
            {
                __deltaObject__.HitZonesDamageReceivedEvent += value;
            }

            remove
            {
                __deltaObject__.HitZonesDamageReceivedEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = CurrentQuestOfObject;
                    break;
                case 11:
                    currProperty = CurrentObject;
                    break;
                case 12:
                    currProperty = CurrentObjectDef;
                    break;
                case 13:
                    currProperty = Wizard;
                    break;
                case 14:
                    currProperty = SlaveWizardHolder;
                    break;
                case 15:
                    currProperty = Health;
                    break;
                case 16:
                    currProperty = Mortal;
                    break;
                case 18:
                    currProperty = Brute;
                    break;
                case 19:
                    currProperty = Stats;
                    break;
                case 20:
                    currProperty = SpawnedObject;
                    break;
                case 21:
                    currProperty = Destroyable;
                    break;
                case 23:
                    currProperty = AnimationDoerOwner;
                    break;
                case 25:
                    currProperty = Def;
                    break;
                case 26:
                    currProperty = MapOwner;
                    break;
                case 27:
                    currProperty = StaticIdFromExport;
                    break;
                case 28:
                    currProperty = Name;
                    break;
                case 29:
                    currProperty = Prefab;
                    break;
                case 30:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 31:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 33:
                    currProperty = WorldSpaced;
                    break;
                case 34:
                    currProperty = MovementSync;
                    break;
                case 35:
                    currProperty = Buffs;
                    break;
                case 36:
                    currProperty = Inventory;
                    break;
                case 37:
                    currProperty = Quest;
                    break;
                case 38:
                    currProperty = OpenMechanics;
                    break;
                case 39:
                    currProperty = ContainerApi;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1700963454;
    }
}