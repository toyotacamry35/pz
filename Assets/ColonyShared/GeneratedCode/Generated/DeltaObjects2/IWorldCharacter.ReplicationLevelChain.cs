// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Entities.Service;
using SharedCode.EntitySystem.ChainCalls;
using SharedCode.Logging;
using SharedCode.OurSimpleIoC;
using SharedCode.Serializers;
using SharedCode.Utils;
using System.Linq;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using GeneratedCode.DeltaObjects.Chain;

[GeneratedCode("CodeGen", "1.0")]
public class WorldCharacterAlwaysChainProxy : IChainedEntity
{
    private WorldCharacterChainProxy __chain__;
    public WorldCharacterAlwaysChainProxy(WorldCharacterChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WorldCharacterAlwaysChainProxy TestCheatRpc(ChainArgument<string> argument)
    {
        __chain__.TestCheatRpc(argument);
        return this;
    }

    public WorldCharacterAlwaysChainProxy NameSet(ChainArgument<string> value)
    {
        __chain__.NameSet(value);
        return this;
    }

    public WorldCharacterAlwaysChainProxy PrefabSet(ChainArgument<string> value)
    {
        __chain__.PrefabSet(value);
        return this;
    }

    public WorldCharacterAlwaysChainProxy SetStat(ChainArgument<Assets.Src.Aspects.Impl.Stats.StatResource> res, ChainArgument<float> setValue)
    {
        __chain__.SetStat(res, setValue);
        return this;
    }

    public WorldCharacterAlwaysChainProxy AllowedSpawnPointSet(ChainArgument<SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef> value)
    {
        __chain__.AllowedSpawnPointSet(value);
        return this;
    }

    public WorldCharacterAlwaysChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WorldCharacterAlwaysChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WorldCharacterAlwaysChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WorldCharacterAlwaysChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterAlways entity)
    {
        return new WorldCharacterAlwaysChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject()));
    }

    public static WorldCharacterAlwaysChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterAlways entity, IChainedEntity fromChain)
    {
        return new WorldCharacterAlwaysChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class WorldCharacterClientBroadcastChainProxy : IChainedEntity
{
    private WorldCharacterChainProxy __chain__;
    public WorldCharacterClientBroadcastChainProxy(WorldCharacterChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WorldCharacterClientBroadcastChainProxy TestCheatRpc(ChainArgument<string> argument)
    {
        __chain__.TestCheatRpc(argument);
        return this;
    }

    public WorldCharacterClientBroadcastChainProxy NameSet(ChainArgument<string> value)
    {
        __chain__.NameSet(value);
        return this;
    }

    public WorldCharacterClientBroadcastChainProxy PrefabSet(ChainArgument<string> value)
    {
        __chain__.PrefabSet(value);
        return this;
    }

    public WorldCharacterClientBroadcastChainProxy SetStat(ChainArgument<Assets.Src.Aspects.Impl.Stats.StatResource> res, ChainArgument<float> setValue)
    {
        __chain__.SetStat(res, setValue);
        return this;
    }

    public WorldCharacterClientBroadcastChainProxy AllowedSpawnPointSet(ChainArgument<SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef> value)
    {
        __chain__.AllowedSpawnPointSet(value);
        return this;
    }

    public WorldCharacterClientBroadcastChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WorldCharacterClientBroadcastChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WorldCharacterClientBroadcastChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WorldCharacterClientBroadcastChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterClientBroadcast entity)
    {
        return new WorldCharacterClientBroadcastChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject()));
    }

    public static WorldCharacterClientBroadcastChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterClientBroadcast entity, IChainedEntity fromChain)
    {
        return new WorldCharacterClientBroadcastChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class WorldCharacterClientFullApiChainProxy : IChainedEntity
{
    private WorldCharacterChainProxy __chain__;
    public WorldCharacterClientFullApiChainProxy(WorldCharacterChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WorldCharacterClientFullApiChainProxy MoveItem(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<SharedCode.EntitySystem.PropertyAddress> destination, ChainArgument<int> destinationSlotId, ChainArgument<int> count, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.MoveItem(source, sourceSlotId, destination, destinationSlotId, count, clientSrcEntityId);
        return this;
    }

    public WorldCharacterClientFullApiChainProxy MoveAllItems(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<SharedCode.EntitySystem.PropertyAddress> destination)
    {
        __chain__.MoveAllItems(source, destination);
        return this;
    }

    public WorldCharacterClientFullApiChainProxy RemoveItem(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<int> count, ChainArgument<System.Guid> clientEntityId)
    {
        __chain__.RemoveItem(source, sourceSlotId, count, clientEntityId);
        return this;
    }

    public WorldCharacterClientFullApiChainProxy SavePerk(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.SavePerk(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterClientFullApiChainProxy DisassemblyPerk(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.DisassemblyPerk(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterClientFullApiChainProxy Break(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.Break(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterClientFullApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WorldCharacterClientFullApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WorldCharacterClientFullApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WorldCharacterClientFullApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterClientFullApi entity)
    {
        return new WorldCharacterClientFullApiChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject()));
    }

    public static WorldCharacterClientFullApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterClientFullApi entity, IChainedEntity fromChain)
    {
        return new WorldCharacterClientFullApiChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class WorldCharacterClientFullChainProxy : IChainedEntity
{
    private WorldCharacterChainProxy __chain__;
    public WorldCharacterClientFullChainProxy(WorldCharacterChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WorldCharacterClientFullChainProxy SendChatMessage(ChainArgument<string> message)
    {
        __chain__.SendChatMessage(message);
        return this;
    }

    public WorldCharacterClientFullChainProxy Respawn(ChainArgument<bool> onBaken, ChainArgument<bool> anyCommonBaken, ChainArgument<System.Guid> commonBakenId)
    {
        __chain__.Respawn(onBaken, anyCommonBaken, commonBakenId);
        return this;
    }

    public WorldCharacterClientFullChainProxy HasBaken()
    {
        __chain__.HasBaken();
        return this;
    }

    public WorldCharacterClientFullChainProxy IsBakenActivated(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> bakenRef)
    {
        __chain__.IsBakenActivated(bakenRef);
        return this;
    }

    public WorldCharacterClientFullChainProxy MoveItem(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<SharedCode.EntitySystem.PropertyAddress> destination, ChainArgument<int> destinationSlotId, ChainArgument<int> count, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.MoveItem(source, sourceSlotId, destination, destinationSlotId, count, clientSrcEntityId);
        return this;
    }

    public WorldCharacterClientFullChainProxy MoveAllItems(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<SharedCode.EntitySystem.PropertyAddress> destination)
    {
        __chain__.MoveAllItems(source, destination);
        return this;
    }

    public WorldCharacterClientFullChainProxy RemoveItem(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<int> count, ChainArgument<System.Guid> clientEntityId)
    {
        __chain__.RemoveItem(source, sourceSlotId, count, clientEntityId);
        return this;
    }

    public WorldCharacterClientFullChainProxy SavePerk(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.SavePerk(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterClientFullChainProxy DisassemblyPerk(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.DisassemblyPerk(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterClientFullChainProxy Break(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.Break(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterClientFullChainProxy AddPerkSlot(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> slotId, ChainArgument<SharedCode.Aspects.Item.Templates.ItemTypeResource> perkSlotType)
    {
        __chain__.AddPerkSlot(source, slotId, perkSlotType);
        return this;
    }

    public WorldCharacterClientFullChainProxy CanAddPerkSlot(ChainArgument<SharedCode.Aspects.Item.Templates.ItemTypeResource> perkSlotType)
    {
        __chain__.CanAddPerkSlot(perkSlotType);
        return this;
    }

    public WorldCharacterClientFullChainProxy AddUsedSlot(ChainArgument<Assets.Src.ResourcesSystem.Base.ResourceIDFull> dollSlotRes)
    {
        __chain__.AddUsedSlot(dollSlotRes);
        return this;
    }

    public WorldCharacterClientFullChainProxy RemoveUsedSlot(ChainArgument<Assets.Src.ResourcesSystem.Base.ResourceIDFull> dollSlotRes)
    {
        __chain__.RemoveUsedSlot(dollSlotRes);
        return this;
    }

    public WorldCharacterClientFullChainProxy CreateBuildElement(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<System.Guid> placeId, ChainArgument<SharedCode.Aspects.Building.BuildRecipeDef> buildRecipeDef, ChainArgument<SharedCode.Aspects.Building.CreateBuildElementData> data)
    {
        __chain__.CreateBuildElement(type, placeId, buildRecipeDef, data);
        return this;
    }

    public WorldCharacterClientFullChainProxy OperateBuildElement(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<System.Guid> placeId, ChainArgument<System.Guid> elementId, ChainArgument<SharedCode.Entities.Building.OperationData> data)
    {
        __chain__.OperateBuildElement(type, placeId, elementId, data);
        return this;
    }

    public WorldCharacterClientFullChainProxy SetBuildCheat(ChainArgument<SharedCode.Entities.Building.OperationData> data)
    {
        __chain__.SetBuildCheat(data);
        return this;
    }

    public WorldCharacterClientFullChainProxy GetBuildCheat(ChainArgument<SharedCode.Entities.Building.OperationData> data)
    {
        __chain__.GetBuildCheat(data);
        return this;
    }

    public WorldCharacterClientFullChainProxy AddPointMarker(ChainArgument<System.Guid> pointMarkerGuid, ChainArgument<Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointMarker> pointMarker)
    {
        __chain__.AddPointMarker(pointMarkerGuid, pointMarker);
        return this;
    }

    public WorldCharacterClientFullChainProxy RemovePointMarker(ChainArgument<System.Guid> pointMarkerGuid)
    {
        __chain__.RemovePointMarker(pointMarkerGuid);
        return this;
    }

    public WorldCharacterClientFullChainProxy AddPointOfInterest(ChainArgument<Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointOfInterestDef> poi)
    {
        __chain__.AddPointOfInterest(poi);
        return this;
    }

    public WorldCharacterClientFullChainProxy RemovePointOfInterest(ChainArgument<Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointOfInterestDef> poi)
    {
        __chain__.RemovePointOfInterest(poi);
        return this;
    }

    public WorldCharacterClientFullChainProxy UnstuckTeleport(ChainArgument<float> minTimeout)
    {
        __chain__.UnstuckTeleport(minTimeout);
        return this;
    }

    public WorldCharacterClientFullChainProxy TestCheatRpc(ChainArgument<string> argument)
    {
        __chain__.TestCheatRpc(argument);
        return this;
    }

    public WorldCharacterClientFullChainProxy Suicide()
    {
        __chain__.Suicide();
        return this;
    }

    public WorldCharacterClientFullChainProxy NameSet(ChainArgument<string> value)
    {
        __chain__.NameSet(value);
        return this;
    }

    public WorldCharacterClientFullChainProxy PrefabSet(ChainArgument<string> value)
    {
        __chain__.PrefabSet(value);
        return this;
    }

    public WorldCharacterClientFullChainProxy GetCurrencyValue(ChainArgument<SharedCode.Aspects.Science.CurrencyResource> currency)
    {
        __chain__.GetCurrencyValue(currency);
        return this;
    }

    public WorldCharacterClientFullChainProxy SetStat(ChainArgument<Assets.Src.Aspects.Impl.Stats.StatResource> res, ChainArgument<float> setValue)
    {
        __chain__.SetStat(res, setValue);
        return this;
    }

    public WorldCharacterClientFullChainProxy AllowedSpawnPointSet(ChainArgument<SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef> value)
    {
        __chain__.AllowedSpawnPointSet(value);
        return this;
    }

    public WorldCharacterClientFullChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WorldCharacterClientFullChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WorldCharacterClientFullChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WorldCharacterClientFullChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterClientFull entity)
    {
        return new WorldCharacterClientFullChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject()));
    }

    public static WorldCharacterClientFullChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterClientFull entity, IChainedEntity fromChain)
    {
        return new WorldCharacterClientFullChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class WorldCharacterServerApiChainProxy : IChainedEntity
{
    private WorldCharacterChainProxy __chain__;
    public WorldCharacterServerApiChainProxy(WorldCharacterChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WorldCharacterServerApiChainProxy InvokeItemDropped(ChainArgument<SharedCode.Aspects.Item.Templates.BaseItemResource> item, ChainArgument<int> count)
    {
        __chain__.InvokeItemDropped(item, count);
        return this;
    }

    public WorldCharacterServerApiChainProxy AddItems(ChainArgument<System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack>> itemResourcesToAdd, ChainArgument<SharedCode.EntitySystem.PropertyAddress> destination)
    {
        __chain__.AddItems(itemResourcesToAdd, destination);
        return this;
    }

    public WorldCharacterServerApiChainProxy MoveItem(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<SharedCode.EntitySystem.PropertyAddress> destination, ChainArgument<int> destinationSlotId, ChainArgument<int> count, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.MoveItem(source, sourceSlotId, destination, destinationSlotId, count, clientSrcEntityId);
        return this;
    }

    public WorldCharacterServerApiChainProxy MoveAllItems(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<SharedCode.EntitySystem.PropertyAddress> destination)
    {
        __chain__.MoveAllItems(source, destination);
        return this;
    }

    public WorldCharacterServerApiChainProxy RemoveItem(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<int> count, ChainArgument<System.Guid> clientEntityId)
    {
        __chain__.RemoveItem(source, sourceSlotId, count, clientEntityId);
        return this;
    }

    public WorldCharacterServerApiChainProxy SavePerk(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.SavePerk(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterServerApiChainProxy DisassemblyPerk(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.DisassemblyPerk(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterServerApiChainProxy Break(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.Break(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterServerApiChainProxy ChangeCurrencies(ChainArgument<System.Collections.Generic.List<SharedCode.Entities.CurrencyResourcePack>> currencies)
    {
        __chain__.ChangeCurrencies(currencies);
        return this;
    }

    public WorldCharacterServerApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WorldCharacterServerApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WorldCharacterServerApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WorldCharacterServerApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterServerApi entity)
    {
        return new WorldCharacterServerApiChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject()));
    }

    public static WorldCharacterServerApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterServerApi entity, IChainedEntity fromChain)
    {
        return new WorldCharacterServerApiChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class WorldCharacterServerChainProxy : IChainedEntity
{
    private WorldCharacterChainProxy __chain__;
    public WorldCharacterServerChainProxy(WorldCharacterChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WorldCharacterServerChainProxy SendChatMessage(ChainArgument<string> message)
    {
        __chain__.SendChatMessage(message);
        return this;
    }

    public WorldCharacterServerChainProxy Respawn(ChainArgument<bool> onBaken, ChainArgument<bool> anyCommonBaken, ChainArgument<System.Guid> commonBakenId)
    {
        __chain__.Respawn(onBaken, anyCommonBaken, commonBakenId);
        return this;
    }

    public WorldCharacterServerChainProxy HasBaken()
    {
        __chain__.HasBaken();
        return this;
    }

    public WorldCharacterServerChainProxy IsBakenActivated(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> bakenRef)
    {
        __chain__.IsBakenActivated(bakenRef);
        return this;
    }

    public WorldCharacterServerChainProxy ActivateCommonBaken(ChainArgument<System.Guid> commonBakenGuid)
    {
        __chain__.ActivateCommonBaken(commonBakenGuid);
        return this;
    }

    public WorldCharacterServerChainProxy InvokeItemDropped(ChainArgument<SharedCode.Aspects.Item.Templates.BaseItemResource> item, ChainArgument<int> count)
    {
        __chain__.InvokeItemDropped(item, count);
        return this;
    }

    public WorldCharacterServerChainProxy AddItems(ChainArgument<System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack>> itemResourcesToAdd, ChainArgument<SharedCode.EntitySystem.PropertyAddress> destination)
    {
        __chain__.AddItems(itemResourcesToAdd, destination);
        return this;
    }

    public WorldCharacterServerChainProxy MoveItem(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<SharedCode.EntitySystem.PropertyAddress> destination, ChainArgument<int> destinationSlotId, ChainArgument<int> count, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.MoveItem(source, sourceSlotId, destination, destinationSlotId, count, clientSrcEntityId);
        return this;
    }

    public WorldCharacterServerChainProxy MoveAllItems(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<SharedCode.EntitySystem.PropertyAddress> destination)
    {
        __chain__.MoveAllItems(source, destination);
        return this;
    }

    public WorldCharacterServerChainProxy RemoveItem(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<int> count, ChainArgument<System.Guid> clientEntityId)
    {
        __chain__.RemoveItem(source, sourceSlotId, count, clientEntityId);
        return this;
    }

    public WorldCharacterServerChainProxy SavePerk(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.SavePerk(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterServerChainProxy DisassemblyPerk(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.DisassemblyPerk(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterServerChainProxy Break(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> sourceSlotId, ChainArgument<System.Guid> clientSrcEntityId)
    {
        __chain__.Break(source, sourceSlotId, clientSrcEntityId);
        return this;
    }

    public WorldCharacterServerChainProxy AddPerkSlot(ChainArgument<SharedCode.EntitySystem.PropertyAddress> source, ChainArgument<int> slotId, ChainArgument<SharedCode.Aspects.Item.Templates.ItemTypeResource> perkSlotType)
    {
        __chain__.AddPerkSlot(source, slotId, perkSlotType);
        return this;
    }

    public WorldCharacterServerChainProxy CanAddPerkSlot(ChainArgument<SharedCode.Aspects.Item.Templates.ItemTypeResource> perkSlotType)
    {
        __chain__.CanAddPerkSlot(perkSlotType);
        return this;
    }

    public WorldCharacterServerChainProxy AddUsedSlot(ChainArgument<Assets.Src.ResourcesSystem.Base.ResourceIDFull> dollSlotRes)
    {
        __chain__.AddUsedSlot(dollSlotRes);
        return this;
    }

    public WorldCharacterServerChainProxy RemoveUsedSlot(ChainArgument<Assets.Src.ResourcesSystem.Base.ResourceIDFull> dollSlotRes)
    {
        __chain__.RemoveUsedSlot(dollSlotRes);
        return this;
    }

    public WorldCharacterServerChainProxy DropCorpse()
    {
        __chain__.DropCorpse();
        return this;
    }

    public WorldCharacterServerChainProxy CreateBuildElement(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<System.Guid> placeId, ChainArgument<SharedCode.Aspects.Building.BuildRecipeDef> buildRecipeDef, ChainArgument<SharedCode.Aspects.Building.CreateBuildElementData> data)
    {
        __chain__.CreateBuildElement(type, placeId, buildRecipeDef, data);
        return this;
    }

    public WorldCharacterServerChainProxy OperateBuildElement(ChainArgument<SharedCode.DeltaObjects.Building.BuildType> type, ChainArgument<System.Guid> placeId, ChainArgument<System.Guid> elementId, ChainArgument<SharedCode.Entities.Building.OperationData> data)
    {
        __chain__.OperateBuildElement(type, placeId, elementId, data);
        return this;
    }

    public WorldCharacterServerChainProxy SetBuildCheat(ChainArgument<SharedCode.Entities.Building.OperationData> data)
    {
        __chain__.SetBuildCheat(data);
        return this;
    }

    public WorldCharacterServerChainProxy GetBuildCheat(ChainArgument<SharedCode.Entities.Building.OperationData> data)
    {
        __chain__.GetBuildCheat(data);
        return this;
    }

    public WorldCharacterServerChainProxy AddPointMarker(ChainArgument<System.Guid> pointMarkerGuid, ChainArgument<Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointMarker> pointMarker)
    {
        __chain__.AddPointMarker(pointMarkerGuid, pointMarker);
        return this;
    }

    public WorldCharacterServerChainProxy RemovePointMarker(ChainArgument<System.Guid> pointMarkerGuid)
    {
        __chain__.RemovePointMarker(pointMarkerGuid);
        return this;
    }

    public WorldCharacterServerChainProxy AddPointOfInterest(ChainArgument<Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointOfInterestDef> poi)
    {
        __chain__.AddPointOfInterest(poi);
        return this;
    }

    public WorldCharacterServerChainProxy RemovePointOfInterest(ChainArgument<Assets.ColonyShared.SharedCode.Aspects.WorldObjects.PointOfInterestDef> poi)
    {
        __chain__.RemovePointOfInterest(poi);
        return this;
    }

    public WorldCharacterServerChainProxy NotifyThatClientIsGone()
    {
        __chain__.NotifyThatClientIsGone();
        return this;
    }

    public WorldCharacterServerChainProxy NotifyThatClientIsBack()
    {
        __chain__.NotifyThatClientIsBack();
        return this;
    }

    public WorldCharacterServerChainProxy UnstuckTeleport(ChainArgument<float> minTimeout)
    {
        __chain__.UnstuckTeleport(minTimeout);
        return this;
    }

    public WorldCharacterServerChainProxy TestCheatRpc(ChainArgument<string> argument)
    {
        __chain__.TestCheatRpc(argument);
        return this;
    }

    public WorldCharacterServerChainProxy Suicide()
    {
        __chain__.Suicide();
        return this;
    }

    public WorldCharacterServerChainProxy SuicideCheat()
    {
        __chain__.SuicideCheat();
        return this;
    }

    public WorldCharacterServerChainProxy NameSet(ChainArgument<string> value)
    {
        __chain__.NameSet(value);
        return this;
    }

    public WorldCharacterServerChainProxy PrefabSet(ChainArgument<string> value)
    {
        __chain__.PrefabSet(value);
        return this;
    }

    public WorldCharacterServerChainProxy ChangeCurrencies(ChainArgument<System.Collections.Generic.List<SharedCode.Entities.CurrencyResourcePack>> currencies)
    {
        __chain__.ChangeCurrencies(currencies);
        return this;
    }

    public WorldCharacterServerChainProxy GetCurrencyValue(ChainArgument<SharedCode.Aspects.Science.CurrencyResource> currency)
    {
        __chain__.GetCurrencyValue(currency);
        return this;
    }

    public WorldCharacterServerChainProxy ChangeStatistic(ChainArgument<Assets.ColonyShared.SharedCode.Aspects.Statictic.StatisticType> statistic, ChainArgument<Assets.ColonyShared.SharedCode.Aspects.Statictic.StatisticType> target, ChainArgument<float> value)
    {
        __chain__.ChangeStatistic(statistic, target, value);
        return this;
    }

    public WorldCharacterServerChainProxy SetStat(ChainArgument<Assets.Src.Aspects.Impl.Stats.StatResource> res, ChainArgument<float> setValue)
    {
        __chain__.SetStat(res, setValue);
        return this;
    }

    public WorldCharacterServerChainProxy AllowedSpawnPointSet(ChainArgument<SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef> value)
    {
        __chain__.AllowedSpawnPointSet(value);
        return this;
    }

    public WorldCharacterServerChainProxy GatherResources(ChainArgument<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> giver, ChainArgument<System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack>> items)
    {
        __chain__.GatherResources(giver, items);
        return this;
    }

    public WorldCharacterServerChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WorldCharacterServerChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WorldCharacterServerChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WorldCharacterServerChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterServer entity)
    {
        return new WorldCharacterServerChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject()));
    }

    public static WorldCharacterServerChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldCharacterServer entity, IChainedEntity fromChain)
    {
        return new WorldCharacterServerChainProxy(new WorldCharacterChainProxy((SharedCode.Entities.IWorldCharacter)entity.GetBaseDeltaObject(), fromChain));
    }
}