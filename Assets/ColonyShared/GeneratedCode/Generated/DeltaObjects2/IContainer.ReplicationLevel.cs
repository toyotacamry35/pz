// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class ContainerAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerAlways
    {
        public ContainerAlways(SharedCode.DeltaObjects.IContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IContainer)__deltaObjectBase__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public override int TypeId => 1621828882;
    }

    public class ContainerClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientBroadcast
    {
        public ContainerClientBroadcast(SharedCode.DeltaObjects.IContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1021213271;
    }

    public class ContainerClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFullApi
    {
        public ContainerClientFullApi(SharedCode.DeltaObjects.IContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IContainer)__deltaObjectBase__;
            }
        }

        public override int TypeId => 352277207;
    }

    public class ContainerClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerClientFull
    {
        public ContainerClientFull(SharedCode.DeltaObjects.IContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 499372546;
    }

    public class ContainerServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServerApi
    {
        public ContainerServerApi(SharedCode.DeltaObjects.IContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IContainer)__deltaObjectBase__;
            }
        }

        public override int TypeId => 2007729168;
    }

    public class ContainerServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerServer
    {
        public ContainerServer(SharedCode.DeltaObjects.IContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public System.Threading.Tasks.Task<bool> CanAdd(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanAdd(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<bool> CanRemove(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanRemove(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task OnItemAdded(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnItemAdded(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnBeforeItemRemoved(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1348035326;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class BuildingContainerAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuildingContainerAlways
    {
        public BuildingContainerAlways(SharedCode.DeltaObjects.IBuildingContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IBuildingContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IBuildingContainer)__deltaObjectBase__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public override int TypeId => -346733346;
    }

    public class BuildingContainerClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuildingContainerClientBroadcast
    {
        public BuildingContainerClientBroadcast(SharedCode.DeltaObjects.IBuildingContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IBuildingContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IBuildingContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1960237739;
    }

    public class BuildingContainerClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuildingContainerClientFullApi
    {
        public BuildingContainerClientFullApi(SharedCode.DeltaObjects.IBuildingContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IBuildingContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IBuildingContainer)__deltaObjectBase__;
            }
        }

        public override int TypeId => 561726641;
    }

    public class BuildingContainerClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuildingContainerClientFull
    {
        public BuildingContainerClientFull(SharedCode.DeltaObjects.IBuildingContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IBuildingContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IBuildingContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 5694841;
    }

    public class BuildingContainerServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuildingContainerServerApi
    {
        public BuildingContainerServerApi(SharedCode.DeltaObjects.IBuildingContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IBuildingContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IBuildingContainer)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1631013353;
    }

    public class BuildingContainerServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuildingContainerServer
    {
        public BuildingContainerServer(SharedCode.DeltaObjects.IBuildingContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IBuildingContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IBuildingContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public System.Threading.Tasks.Task<bool> CanAdd(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanAdd(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<bool> CanRemove(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanRemove(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task OnItemAdded(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnItemAdded(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnBeforeItemRemoved(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1743432495;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class MachineOutputContainerAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineOutputContainerAlways
    {
        public MachineOutputContainerAlways(SharedCode.DeltaObjects.IMachineOutputContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineOutputContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineOutputContainer)__deltaObjectBase__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public override int TypeId => 375130541;
    }

    public class MachineOutputContainerClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineOutputContainerClientBroadcast
    {
        public MachineOutputContainerClientBroadcast(SharedCode.DeltaObjects.IMachineOutputContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineOutputContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineOutputContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 926159499;
    }

    public class MachineOutputContainerClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineOutputContainerClientFullApi
    {
        public MachineOutputContainerClientFullApi(SharedCode.DeltaObjects.IMachineOutputContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineOutputContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineOutputContainer)__deltaObjectBase__;
            }
        }

        public override int TypeId => -213875739;
    }

    public class MachineOutputContainerClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineOutputContainerClientFull
    {
        public MachineOutputContainerClientFull(SharedCode.DeltaObjects.IMachineOutputContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineOutputContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineOutputContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -249723326;
    }

    public class MachineOutputContainerServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineOutputContainerServerApi
    {
        public MachineOutputContainerServerApi(SharedCode.DeltaObjects.IMachineOutputContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineOutputContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineOutputContainer)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1862249630;
    }

    public class MachineOutputContainerServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineOutputContainerServer
    {
        public MachineOutputContainerServer(SharedCode.DeltaObjects.IMachineOutputContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineOutputContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineOutputContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public System.Threading.Tasks.Task<bool> CanAdd(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanAdd(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<bool> CanRemove(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanRemove(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task OnItemAdded(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnItemAdded(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnBeforeItemRemoved(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 517848264;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class MachineFuelContainerAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineFuelContainerAlways
    {
        public MachineFuelContainerAlways(SharedCode.DeltaObjects.IMachineFuelContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineFuelContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineFuelContainer)__deltaObjectBase__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public override int TypeId => 1683875422;
    }

    public class MachineFuelContainerClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineFuelContainerClientBroadcast
    {
        public MachineFuelContainerClientBroadcast(SharedCode.DeltaObjects.IMachineFuelContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineFuelContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineFuelContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -186614508;
    }

    public class MachineFuelContainerClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineFuelContainerClientFullApi
    {
        public MachineFuelContainerClientFullApi(SharedCode.DeltaObjects.IMachineFuelContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineFuelContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineFuelContainer)__deltaObjectBase__;
            }
        }

        public override int TypeId => 550828169;
    }

    public class MachineFuelContainerClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineFuelContainerClientFull
    {
        public MachineFuelContainerClientFull(SharedCode.DeltaObjects.IMachineFuelContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineFuelContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineFuelContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 175282286;
    }

    public class MachineFuelContainerServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineFuelContainerServerApi
    {
        public MachineFuelContainerServerApi(SharedCode.DeltaObjects.IMachineFuelContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineFuelContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineFuelContainer)__deltaObjectBase__;
            }
        }

        public override int TypeId => -865223465;
    }

    public class MachineFuelContainerServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineFuelContainerServer
    {
        public MachineFuelContainerServer(SharedCode.DeltaObjects.IMachineFuelContainer deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IMachineFuelContainer __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IMachineFuelContainer)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public System.Threading.Tasks.Task<bool> CanAdd(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanAdd(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<bool> CanRemove(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanRemove(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task OnItemAdded(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnItemAdded(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnBeforeItemRemoved(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Items;
                    break;
                case 11:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1066265398;
    }
}