// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    public interface ICheatServiceAgentEntityImplementRemoteMethods
    {
        System.Threading.Tasks.Task<string> GetRepositoryEntitiesCountImpl();
        System.Threading.Tasks.Task DumpRepositoryImpl();
        System.Threading.Tasks.Task ForceGCImpl(int count);
        System.Threading.Tasks.Task SetGCEnabledImpl(bool enabled);
    }
}

namespace GeneratedCode.DeltaObjects
{
    public interface ICheatServiceEntityImplementRemoteMethods
    {
        System.Threading.Tasks.Task AddSomeItemsImpl(System.Collections.Generic.List<SharedCode.Entities.ItemResourcePack> prototypeNames, SharedCode.EntitySystem.PropertyAddress source);
        System.Threading.Tasks.Task AddItemsInSlotImpl(SharedCode.Entities.ItemResourcePack prototypeName, SharedCode.EntitySystem.PropertyAddress source, int slot);
        System.Threading.Tasks.Task AddQuestImpl(Assets.Src.Aspects.Impl.Factions.Template.QuestDef quest, System.Guid characterId);
        System.Threading.Tasks.Task AddTechPointsImpl(SharedCode.Aspects.Science.TechPointCount[] techPointCounts, System.Guid characterId);
        System.Threading.Tasks.Task AddKnowledgeImpl(SharedCode.Aspects.Science.KnowledgeDef knowledgeDef, System.Guid characterId);
        System.Threading.Tasks.Task SpawnInteractiveObjectEntityImpl(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task SpawnNewMineableEntityImpl(SharedCode.Entities.GameObjectEntities.MineableEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task SpawnInteractiveEntityImpl(SharedCode.Entities.GameObjectEntities.InteractiveEntityDef entityDef, SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task<string> GetRepositoryEntitiesCountImpl();
        System.Threading.Tasks.Task<string> GetRepositoryEntitiesCountOnAllRepositoriesImpl();
        System.Threading.Tasks.Task DumpAllServerRepositoriesImpl();
        System.Threading.Tasks.Task<string> SetVisibilityRadiusImpl(float enterRadius, float leaveRadius);
        System.Threading.Tasks.Task<string> GetTooLongEntityWaitQueuesImpl();
        System.Threading.Tasks.Task<int> GetCCUImpl();
        System.Threading.Tasks.Task SetDebugModeImpl(bool enabled);
        System.Threading.Tasks.Task SetDebugMobsImpl(bool enabledStatus, bool hard);
        System.Threading.Tasks.Task SetDebugSpellsImpl(bool enabledStatus);
        System.Threading.Tasks.Task PrintBrokenLocomotionsImpl();
        System.Threading.Tasks.ValueTask DamageAllItemsImpl(System.Guid character, float percent);
        System.Threading.Tasks.Task SetDebugMobPositionLoggingImpl(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus, bool dump);
        System.Threading.Tasks.Task SetCurveLoggerStateImpl(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool enabledStatus, bool dump, bool serverOnly, string loggerName, System.Guid dumpId);
        System.Threading.Tasks.Task SetLoggableEnableImpl(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool enabledStatus);
        System.Threading.Tasks.Task MainUnityThreadOnServerSleepImpl(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> charRef, bool isOn, float sleepTime, float delayBeforeSleep, float repeatTime);
        System.Threading.Tasks.Task<bool> ChangeHealthImpl(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> victimEntity, int deltaValue);
        System.Threading.Tasks.Task<bool> GodmodeImpl(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> applicantEntityRef, bool enable);
        System.Threading.Tasks.Task Version01Impl();
        System.Threading.Tasks.Task<SharedCode.Utils.Vector3[]> ResolveCharacterCoordsImpl(System.Guid[] guids);
        System.Threading.Tasks.Task ForceGCImpl(int count, System.Guid repositoryId);
        System.Threading.Tasks.Task ForceSelfCompactionGCImpl();
        System.Threading.Tasks.Task SetGCEnabledImpl(bool enabled, System.Guid repositoryId);
        System.Threading.Tasks.Task CastSpellImpl(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> entityRef, SharedCode.Wizardry.SpellCast spellCast);
        System.Threading.Tasks.Task SetServerCheatVariableImpl(Assets.Src.ResourcesSystem.Base.BaseResource resource, string value);
        System.Threading.Tasks.Task<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> TestCheckPZ15200DoneImpl(float waitBeforeReplicate);
        System.Threading.Tasks.Task EnableWizardLoggerImpl(ResourceSystem.Utils.OuterRef entity, bool enable);
        System.Threading.Tasks.Task SetGenderImpl(ResourceSystem.Utils.OuterRef entity, ResourceSystem.Aspects.Misc.GenderDef gender);
        System.Threading.Tasks.Task InvokeTraumaImpl(ResourceSystem.Utils.OuterRef entity, string trauma);
        System.Threading.Tasks.Task StopTraumaImpl(ResourceSystem.Utils.OuterRef entity, string trauma);
    }
}