// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Network;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem;
using System.Collections.Generic;

namespace GeneratedCode.DeltaObjects
{
    public partial class LinksEngine
    {
        internal static class SendFuncs
        {
            public static ValueTask SetLinksFromScene(System.Collections.Generic.Dictionary<Assets.ResourceSystem.Aspects.Links.LinkTypeDef, System.Collections.Generic.List<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> links, IDeltaObject __entity__, INetworkProxy networkProxy, IEntitiesRepository __repository__, Guid migrationId)
            {
                int offset;
                var serializer = ((IEntitiesRepositoryExtension)__repository__).Serializer;
                var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
                try
                {
                    __buffer__ = EntitySystem.RpcHelper.FillSendHeader(serializer, __buffer__, out offset, 0, ref migrationId);
                    __buffer__ = EntitySystem.RpcHelper.SerializeObjectId(serializer, __buffer__, ref offset, __entity__);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (System.Collections.Generic.Dictionary<Assets.ResourceSystem.Aspects.Links.LinkTypeDef, System.Collections.Generic.List<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>>)links);
                    return EntitySystem.RpcHelper.SendMessage(__buffer__, offset, typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 0, SharedCode.Network.MessageSendOptions.ReliableOrdered, networkProxy, false);
                }
                finally
                {
                    EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
                }
            }

            public static ValueTask<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>> GetLinked(Assets.ResourceSystem.Aspects.Links.LinkTypeDef link, IDeltaObject __entity__, INetworkProxy networkProxy, IEntitiesRepository __repository__, Guid migrationId)
            {
                int offset;
                var serializer = ((IEntitiesRepositoryExtension)__repository__).Serializer;
                Guid __guid__;
                var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
                try
                {
                    __buffer__ = EntitySystem.RpcHelper.FillRequestHeader(serializer, __buffer__, out offset, out __guid__, 1, ref migrationId);
                    __buffer__ = EntitySystem.RpcHelper.SerializeObjectId(serializer, __buffer__, ref offset, __entity__);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (Assets.ResourceSystem.Aspects.Links.LinkTypeDef)link);
                    return EntitySystem.RpcHelper.SendRequest<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>(__buffer__, offset, typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 1, SharedCode.Network.MessageSendOptions.ReliableOrdered, __guid__, networkProxy, SharedCode.EntitySystem.ServerCoreRuntimeParameters.RpcTimeoutSeconds, false);
                }
                finally
                {
                    EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
                }
            }

            public static ValueTask<System.Collections.Generic.IEnumerable<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>> GetLinkeds(Assets.ResourceSystem.Aspects.Links.LinkTypeDef link, IDeltaObject __entity__, INetworkProxy networkProxy, IEntitiesRepository __repository__, Guid migrationId)
            {
                int offset;
                var serializer = ((IEntitiesRepositoryExtension)__repository__).Serializer;
                Guid __guid__;
                var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
                try
                {
                    __buffer__ = EntitySystem.RpcHelper.FillRequestHeader(serializer, __buffer__, out offset, out __guid__, 2, ref migrationId);
                    __buffer__ = EntitySystem.RpcHelper.SerializeObjectId(serializer, __buffer__, ref offset, __entity__);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (Assets.ResourceSystem.Aspects.Links.LinkTypeDef)link);
                    return EntitySystem.RpcHelper.SendRequest<System.Collections.Generic.IEnumerable<SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>>>(__buffer__, offset, typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 2, SharedCode.Network.MessageSendOptions.ReliableOrdered, __guid__, networkProxy, SharedCode.EntitySystem.ServerCoreRuntimeParameters.RpcTimeoutSeconds, false);
                }
                finally
                {
                    EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
                }
            }

            public static ValueTask AddLinkRef(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, bool watched, bool saved, IDeltaObject __entity__, INetworkProxy networkProxy, IEntitiesRepository __repository__, Guid migrationId)
            {
                int offset;
                var serializer = ((IEntitiesRepositoryExtension)__repository__).Serializer;
                var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
                try
                {
                    __buffer__ = EntitySystem.RpcHelper.FillSendHeader(serializer, __buffer__, out offset, 3, ref migrationId);
                    __buffer__ = EntitySystem.RpcHelper.SerializeObjectId(serializer, __buffer__, ref offset, __entity__);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (Assets.ResourceSystem.Aspects.Links.LinkTypeDef)key);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>)outerRef);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (bool)watched);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (bool)saved);
                    return EntitySystem.RpcHelper.SendMessage(__buffer__, offset, typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 3, SharedCode.Network.MessageSendOptions.ReliableOrdered, networkProxy, false);
                }
                finally
                {
                    EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
                }
            }

            public static ValueTask RemoveLinkKey(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, IDeltaObject __entity__, INetworkProxy networkProxy, IEntitiesRepository __repository__, Guid migrationId)
            {
                int offset;
                var serializer = ((IEntitiesRepositoryExtension)__repository__).Serializer;
                var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
                try
                {
                    __buffer__ = EntitySystem.RpcHelper.FillSendHeader(serializer, __buffer__, out offset, 4, ref migrationId);
                    __buffer__ = EntitySystem.RpcHelper.SerializeObjectId(serializer, __buffer__, ref offset, __entity__);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (Assets.ResourceSystem.Aspects.Links.LinkTypeDef)key);
                    return EntitySystem.RpcHelper.SendMessage(__buffer__, offset, typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 4, SharedCode.Network.MessageSendOptions.ReliableOrdered, networkProxy, false);
                }
                finally
                {
                    EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
                }
            }

            public static ValueTask RemoveLinkRef(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, IDeltaObject __entity__, INetworkProxy networkProxy, IEntitiesRepository __repository__, Guid migrationId)
            {
                int offset;
                var serializer = ((IEntitiesRepositoryExtension)__repository__).Serializer;
                var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
                try
                {
                    __buffer__ = EntitySystem.RpcHelper.FillSendHeader(serializer, __buffer__, out offset, 5, ref migrationId);
                    __buffer__ = EntitySystem.RpcHelper.SerializeObjectId(serializer, __buffer__, ref offset, __entity__);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>)outerRef);
                    return EntitySystem.RpcHelper.SendMessage(__buffer__, offset, typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 5, SharedCode.Network.MessageSendOptions.ReliableOrdered, networkProxy, false);
                }
                finally
                {
                    EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
                }
            }

            public static ValueTask RemoveLinkRefByKey(Assets.ResourceSystem.Aspects.Links.LinkTypeDef key, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> outerRef, IDeltaObject __entity__, INetworkProxy networkProxy, IEntitiesRepository __repository__, Guid migrationId)
            {
                int offset;
                var serializer = ((IEntitiesRepositoryExtension)__repository__).Serializer;
                var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
                try
                {
                    __buffer__ = EntitySystem.RpcHelper.FillSendHeader(serializer, __buffer__, out offset, 6, ref migrationId);
                    __buffer__ = EntitySystem.RpcHelper.SerializeObjectId(serializer, __buffer__, ref offset, __entity__);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (Assets.ResourceSystem.Aspects.Links.LinkTypeDef)key);
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity>)outerRef);
                    return EntitySystem.RpcHelper.SendMessage(__buffer__, offset, typeof(Assets.ColonyShared.SharedCode.Entities.Engine.ILinksEngine), 6, SharedCode.Network.MessageSendOptions.ReliableOrdered, networkProxy, false);
                }
                finally
                {
                    EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
                }
            }
        }
    }
}