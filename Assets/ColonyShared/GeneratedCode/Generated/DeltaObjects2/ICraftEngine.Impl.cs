// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("CraftEngine")]
    public partial class CraftEngine : SharedCode.EntitySystem.BaseEntity, SharedCode.Entities.Engine.ICraftEngine, ICraftEngineImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public CraftEngine()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                UseOwnOutputContainer = default(bool);
                IntermediateFuelContainer = new GeneratedCode.DeltaObjects.Container();
                IntermediateCraftContainer = new GeneratedCode.DeltaObjects.Container();
                OutputContainer = new GeneratedCode.DeltaObjects.Container();
                FuelContainerAddress = new SharedCode.EntitySystem.PropertyAddress();
                ResultContainerAddress = new SharedCode.EntitySystem.PropertyAddress();
                CraftingQueue = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, SharedCode.Entities.Engine.ICraftingQueueItem>();
                MaxQueueSize = default(int);
                CraftRecipesUsageStats = new SharedCode.EntitySystem.Delta.DeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, int>();
                CraftRecipesLastUsageTimes = new SharedCode.EntitySystem.Delta.DeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, long>();
                FuelTimeAlreadyInUse = default(long);
                StartFuelTimeUTC0InMilliseconds = default(long);
                StartCraftingTimeUTC0InMilliseconds = default(long);
                CurrentWorkbenchType = default(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef);
                FuelScheduleCancellation = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken>();
                CraftScheduleCancellation = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken>();
                Inventory = new GeneratedCode.DeltaObjects.Container();
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
                ContainerApi = new GeneratedCode.DeltaObjects.ContainerApi();
            }

            constructor();
        }

        public CraftEngine(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                UseOwnOutputContainer = default(bool);
                IntermediateFuelContainer = new GeneratedCode.DeltaObjects.Container();
                IntermediateCraftContainer = new GeneratedCode.DeltaObjects.Container();
                OutputContainer = new GeneratedCode.DeltaObjects.Container();
                FuelContainerAddress = new SharedCode.EntitySystem.PropertyAddress();
                ResultContainerAddress = new SharedCode.EntitySystem.PropertyAddress();
                CraftingQueue = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, SharedCode.Entities.Engine.ICraftingQueueItem>();
                MaxQueueSize = default(int);
                CraftRecipesUsageStats = new SharedCode.EntitySystem.Delta.DeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, int>();
                CraftRecipesLastUsageTimes = new SharedCode.EntitySystem.Delta.DeltaDictionary<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef, long>();
                FuelTimeAlreadyInUse = default(long);
                StartFuelTimeUTC0InMilliseconds = default(long);
                StartCraftingTimeUTC0InMilliseconds = default(long);
                CurrentWorkbenchType = default(SharedCode.Aspects.Item.Templates.WorkbenchTypeDef);
                FuelScheduleCancellation = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken>();
                CraftScheduleCancellation = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.EntitySystem.ChainCalls.ChainCancellationToken>();
                Inventory = new GeneratedCode.DeltaObjects.Container();
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
                ContainerApi = new GeneratedCode.DeltaObjects.ContainerApi();
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_IntermediateFuelContainer != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_IntermediateFuelContainer).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_IntermediateCraftContainer != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_IntermediateCraftContainer).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_OutputContainer != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_OutputContainer).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_CraftingQueue != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_CraftingQueue).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_CraftRecipesUsageStats != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_CraftRecipesUsageStats).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_CraftRecipesLastUsageTimes != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_CraftRecipesLastUsageTimes).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_FuelScheduleCancellation != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_FuelScheduleCancellation).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_CraftScheduleCancellation != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_CraftScheduleCancellation).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_Inventory != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Inventory).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_OwnerInformation != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_OwnerInformation).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_ContainerApi != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_ContainerApi).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _IntermediateFuelContainer, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _IntermediateCraftContainer, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _OutputContainer, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _CraftingQueue, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _CraftRecipesUsageStats, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _CraftRecipesLastUsageTimes, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _FuelScheduleCancellation, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _CraftScheduleCancellation, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Inventory, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _OwnerInformation, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _ContainerApi, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _IntermediateFuelContainer, 11, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _IntermediateCraftContainer, 12, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _OutputContainer, 13, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _CraftingQueue, 16, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _CraftRecipesUsageStats, 18, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _CraftRecipesLastUsageTimes, 19, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _FuelScheduleCancellation, 24, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _CraftScheduleCancellation, 25, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Inventory, 26, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _OwnerInformation, 27, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _ContainerApi, 28, false, SharedCode.EntitySystem.ReplicationLevel.Always);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_IntermediateFuelContainer)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_IntermediateCraftContainer)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OutputContainer)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftingQueue)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftRecipesUsageStats)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftRecipesLastUsageTimes)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_FuelScheduleCancellation)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftScheduleCancellation)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Inventory)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ContainerApi)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _IntermediateFuelContainer, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _IntermediateCraftContainer, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _OutputContainer, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _CraftingQueue, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _CraftRecipesUsageStats, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _CraftRecipesLastUsageTimes, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _FuelScheduleCancellation, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _CraftScheduleCancellation, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Inventory, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _OwnerInformation, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _ContainerApi, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_IntermediateFuelContainer)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_IntermediateCraftContainer)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OutputContainer)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftingQueue)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftRecipesUsageStats)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftRecipesLastUsageTimes)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_FuelScheduleCancellation)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftScheduleCancellation)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Inventory)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ContainerApi)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "UseOwnOutputContainer":
                    UseOwnOutputContainer__Changed += callback;
                    break;
                case "IntermediateFuelContainer":
                    IntermediateFuelContainer__Changed += callback;
                    break;
                case "IntermediateCraftContainer":
                    IntermediateCraftContainer__Changed += callback;
                    break;
                case "OutputContainer":
                    OutputContainer__Changed += callback;
                    break;
                case "FuelContainerAddress":
                    FuelContainerAddress__Changed += callback;
                    break;
                case "ResultContainerAddress":
                    ResultContainerAddress__Changed += callback;
                    break;
                case "CraftingQueue":
                    CraftingQueue__Changed += callback;
                    break;
                case "MaxQueueSize":
                    MaxQueueSize__Changed += callback;
                    break;
                case "CraftRecipesUsageStats":
                    CraftRecipesUsageStats__Changed += callback;
                    break;
                case "CraftRecipesLastUsageTimes":
                    CraftRecipesLastUsageTimes__Changed += callback;
                    break;
                case "FuelTimeAlreadyInUse":
                    FuelTimeAlreadyInUse__Changed += callback;
                    break;
                case "StartFuelTimeUTC0InMilliseconds":
                    StartFuelTimeUTC0InMilliseconds__Changed += callback;
                    break;
                case "StartCraftingTimeUTC0InMilliseconds":
                    StartCraftingTimeUTC0InMilliseconds__Changed += callback;
                    break;
                case "CurrentWorkbenchType":
                    CurrentWorkbenchType__Changed += callback;
                    break;
                case "FuelScheduleCancellation":
                    FuelScheduleCancellation__Changed += callback;
                    break;
                case "CraftScheduleCancellation":
                    CraftScheduleCancellation__Changed += callback;
                    break;
                case "Inventory":
                    Inventory__Changed += callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed += callback;
                    break;
                case "ContainerApi":
                    ContainerApi__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "UseOwnOutputContainer":
                    UseOwnOutputContainer__Changed -= callback;
                    break;
                case "IntermediateFuelContainer":
                    IntermediateFuelContainer__Changed -= callback;
                    break;
                case "IntermediateCraftContainer":
                    IntermediateCraftContainer__Changed -= callback;
                    break;
                case "OutputContainer":
                    OutputContainer__Changed -= callback;
                    break;
                case "FuelContainerAddress":
                    FuelContainerAddress__Changed -= callback;
                    break;
                case "ResultContainerAddress":
                    ResultContainerAddress__Changed -= callback;
                    break;
                case "CraftingQueue":
                    CraftingQueue__Changed -= callback;
                    break;
                case "MaxQueueSize":
                    MaxQueueSize__Changed -= callback;
                    break;
                case "CraftRecipesUsageStats":
                    CraftRecipesUsageStats__Changed -= callback;
                    break;
                case "CraftRecipesLastUsageTimes":
                    CraftRecipesLastUsageTimes__Changed -= callback;
                    break;
                case "FuelTimeAlreadyInUse":
                    FuelTimeAlreadyInUse__Changed -= callback;
                    break;
                case "StartFuelTimeUTC0InMilliseconds":
                    StartFuelTimeUTC0InMilliseconds__Changed -= callback;
                    break;
                case "StartCraftingTimeUTC0InMilliseconds":
                    StartCraftingTimeUTC0InMilliseconds__Changed -= callback;
                    break;
                case "CurrentWorkbenchType":
                    CurrentWorkbenchType__Changed -= callback;
                    break;
                case "FuelScheduleCancellation":
                    FuelScheduleCancellation__Changed -= callback;
                    break;
                case "CraftScheduleCancellation":
                    CraftScheduleCancellation__Changed -= callback;
                    break;
                case "Inventory":
                    Inventory__Changed -= callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed -= callback;
                    break;
                case "ContainerApi":
                    ContainerApi__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "UseOwnOutputContainer":
                    UseOwnOutputContainer__Changed = null;
                    break;
                case "IntermediateFuelContainer":
                    IntermediateFuelContainer__Changed = null;
                    break;
                case "IntermediateCraftContainer":
                    IntermediateCraftContainer__Changed = null;
                    break;
                case "OutputContainer":
                    OutputContainer__Changed = null;
                    break;
                case "FuelContainerAddress":
                    FuelContainerAddress__Changed = null;
                    break;
                case "ResultContainerAddress":
                    ResultContainerAddress__Changed = null;
                    break;
                case "CraftingQueue":
                    CraftingQueue__Changed = null;
                    break;
                case "MaxQueueSize":
                    MaxQueueSize__Changed = null;
                    break;
                case "CraftRecipesUsageStats":
                    CraftRecipesUsageStats__Changed = null;
                    break;
                case "CraftRecipesLastUsageTimes":
                    CraftRecipesLastUsageTimes__Changed = null;
                    break;
                case "FuelTimeAlreadyInUse":
                    FuelTimeAlreadyInUse__Changed = null;
                    break;
                case "StartFuelTimeUTC0InMilliseconds":
                    StartFuelTimeUTC0InMilliseconds__Changed = null;
                    break;
                case "StartCraftingTimeUTC0InMilliseconds":
                    StartCraftingTimeUTC0InMilliseconds__Changed = null;
                    break;
                case "CurrentWorkbenchType":
                    CurrentWorkbenchType__Changed = null;
                    break;
                case "FuelScheduleCancellation":
                    FuelScheduleCancellation__Changed = null;
                    break;
                case "CraftScheduleCancellation":
                    CraftScheduleCancellation__Changed = null;
                    break;
                case "Inventory":
                    Inventory__Changed = null;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed = null;
                    break;
                case "ContainerApi":
                    ContainerApi__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            UseOwnOutputContainer__Changed = null;
            IntermediateFuelContainer__Changed = null;
            IntermediateCraftContainer__Changed = null;
            OutputContainer__Changed = null;
            FuelContainerAddress__Changed = null;
            ResultContainerAddress__Changed = null;
            CraftingQueue__Changed = null;
            MaxQueueSize__Changed = null;
            CraftRecipesUsageStats__Changed = null;
            CraftRecipesLastUsageTimes__Changed = null;
            FuelTimeAlreadyInUse__Changed = null;
            StartFuelTimeUTC0InMilliseconds__Changed = null;
            StartCraftingTimeUTC0InMilliseconds__Changed = null;
            CurrentWorkbenchType__Changed = null;
            FuelScheduleCancellation__Changed = null;
            CraftScheduleCancellation__Changed = null;
            Inventory__Changed = null;
            OwnerInformation__Changed = null;
            ContainerApi__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && UseOwnOutputContainer__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_UseOwnOutputContainer, nameof(UseOwnOutputContainer), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, UseOwnOutputContainer__Changed);
            }

            if (NeedFireEvent(11) && IntermediateFuelContainer__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_IntermediateFuelContainer, nameof(IntermediateFuelContainer), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, IntermediateFuelContainer__Changed);
            }

            if (NeedFireEvent(12) && IntermediateCraftContainer__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_IntermediateCraftContainer, nameof(IntermediateCraftContainer), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, IntermediateCraftContainer__Changed);
            }

            if (NeedFireEvent(13) && OutputContainer__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OutputContainer, nameof(OutputContainer), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OutputContainer__Changed);
            }

            if (NeedFireEvent(14) && FuelContainerAddress__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_FuelContainerAddress, nameof(FuelContainerAddress), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, FuelContainerAddress__Changed);
            }

            if (NeedFireEvent(15) && ResultContainerAddress__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ResultContainerAddress, nameof(ResultContainerAddress), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ResultContainerAddress__Changed);
            }

            if (NeedFireEvent(16) && CraftingQueue__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 16;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CraftingQueue, nameof(CraftingQueue), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CraftingQueue__Changed);
            }

            if (NeedFireEvent(17) && MaxQueueSize__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 17;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_MaxQueueSize, nameof(MaxQueueSize), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, MaxQueueSize__Changed);
            }

            if (NeedFireEvent(18) && CraftRecipesUsageStats__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 18;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CraftRecipesUsageStats, nameof(CraftRecipesUsageStats), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CraftRecipesUsageStats__Changed);
            }

            if (NeedFireEvent(19) && CraftRecipesLastUsageTimes__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 19;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CraftRecipesLastUsageTimes, nameof(CraftRecipesLastUsageTimes), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CraftRecipesLastUsageTimes__Changed);
            }

            if (NeedFireEvent(20) && FuelTimeAlreadyInUse__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 20;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_FuelTimeAlreadyInUse, nameof(FuelTimeAlreadyInUse), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, FuelTimeAlreadyInUse__Changed);
            }

            if (NeedFireEvent(21) && StartFuelTimeUTC0InMilliseconds__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 21;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_StartFuelTimeUTC0InMilliseconds, nameof(StartFuelTimeUTC0InMilliseconds), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, StartFuelTimeUTC0InMilliseconds__Changed);
            }

            if (NeedFireEvent(22) && StartCraftingTimeUTC0InMilliseconds__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 22;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_StartCraftingTimeUTC0InMilliseconds, nameof(StartCraftingTimeUTC0InMilliseconds), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, StartCraftingTimeUTC0InMilliseconds__Changed);
            }

            if (NeedFireEvent(23) && CurrentWorkbenchType__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 23;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CurrentWorkbenchType, nameof(CurrentWorkbenchType), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CurrentWorkbenchType__Changed);
            }

            if (NeedFireEvent(24) && FuelScheduleCancellation__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 24;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_FuelScheduleCancellation, nameof(FuelScheduleCancellation), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, FuelScheduleCancellation__Changed);
            }

            if (NeedFireEvent(25) && CraftScheduleCancellation__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 25;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CraftScheduleCancellation, nameof(CraftScheduleCancellation), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CraftScheduleCancellation__Changed);
            }

            if (NeedFireEvent(26) && Inventory__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 26;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Inventory, nameof(Inventory), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Inventory__Changed);
            }

            if (NeedFireEvent(27) && OwnerInformation__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 27;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OwnerInformation, nameof(OwnerInformation), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OwnerInformation__Changed);
            }

            if (NeedFireEvent(28) && ContainerApi__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 28;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ContainerApi, nameof(ContainerApi), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ContainerApi__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                UseOwnOutputContainer = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                IntermediateFuelContainer = default;
            if (_IntermediateFuelContainer != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_IntermediateFuelContainer).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                IntermediateCraftContainer = default;
            if (_IntermediateCraftContainer != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_IntermediateCraftContainer).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                OutputContainer = default;
            if (_OutputContainer != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OutputContainer).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                FuelContainerAddress = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                ResultContainerAddress = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                CraftingQueue = default;
            if (_CraftingQueue != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftingQueue).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                MaxQueueSize = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                CraftRecipesUsageStats = default;
            if (_CraftRecipesUsageStats != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftRecipesUsageStats).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                CraftRecipesLastUsageTimes = default;
            if (_CraftRecipesLastUsageTimes != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftRecipesLastUsageTimes).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                FuelTimeAlreadyInUse = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                StartFuelTimeUTC0InMilliseconds = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                StartCraftingTimeUTC0InMilliseconds = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                CurrentWorkbenchType = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                FuelScheduleCancellation = default;
            if (_FuelScheduleCancellation != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_FuelScheduleCancellation).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                CraftScheduleCancellation = default;
            if (_CraftScheduleCancellation != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CraftScheduleCancellation).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                Inventory = default;
            if (_Inventory != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Inventory).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                OwnerInformation = default;
            if (_OwnerInformation != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                ContainerApi = default;
            if (_ContainerApi != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ContainerApi).Downgrade(mask);
        }
    }
}