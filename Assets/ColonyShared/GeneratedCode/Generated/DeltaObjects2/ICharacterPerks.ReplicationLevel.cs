// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class TemporaryPerksAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITemporaryPerksAlways
    {
        public TemporaryPerksAlways(SharedCode.DeltaObjects.ITemporaryPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ITemporaryPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ITemporaryPerks)__deltaObjectBase__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public override int TypeId => 1222321118;
    }

    public class TemporaryPerksClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITemporaryPerksClientBroadcast
    {
        public TemporaryPerksClientBroadcast(SharedCode.DeltaObjects.ITemporaryPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ITemporaryPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ITemporaryPerks)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = Items;
                    break;
                case 12:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1729062518;
    }

    public class TemporaryPerksClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITemporaryPerksClientFullApi
    {
        public TemporaryPerksClientFullApi(SharedCode.DeltaObjects.ITemporaryPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ITemporaryPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ITemporaryPerks)__deltaObjectBase__;
            }
        }

        public override int TypeId => -2007930982;
    }

    public class TemporaryPerksClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITemporaryPerksClientFull
    {
        public TemporaryPerksClientFull(SharedCode.DeltaObjects.ITemporaryPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ITemporaryPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ITemporaryPerks)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<int, SharedCode.Aspects.Item.Templates.ItemTypeResource> PerkSlots
        {
            get
            {
                return __deltaObject__.PerkSlots;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task AddPerkSlot(int slotId, SharedCode.Aspects.Item.Templates.ItemTypeResource perkSlotType)
        {
            return __deltaObject__.AddPerkSlot(slotId, perkSlotType);
        }

        public System.Threading.Tasks.Task RemovePerkSlot(int slotId)
        {
            return __deltaObject__.RemovePerkSlot(slotId);
        }

        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = PerkSlots;
                    break;
                case 11:
                    currProperty = Items;
                    break;
                case 12:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 490346605;
    }

    public class TemporaryPerksServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITemporaryPerksServerApi
    {
        public TemporaryPerksServerApi(SharedCode.DeltaObjects.ITemporaryPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ITemporaryPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ITemporaryPerks)__deltaObjectBase__;
            }
        }

        public override int TypeId => 2113011117;
    }

    public class TemporaryPerksServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ITemporaryPerksServer
    {
        public TemporaryPerksServer(SharedCode.DeltaObjects.ITemporaryPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ITemporaryPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ITemporaryPerks)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<int, SharedCode.Aspects.Item.Templates.ItemTypeResource> PerkSlots
        {
            get
            {
                return __deltaObject__.PerkSlots;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task AddPerkSlot(int slotId, SharedCode.Aspects.Item.Templates.ItemTypeResource perkSlotType)
        {
            return __deltaObject__.AddPerkSlot(slotId, perkSlotType);
        }

        public System.Threading.Tasks.Task RemovePerkSlot(int slotId)
        {
            return __deltaObject__.RemovePerkSlot(slotId);
        }

        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public System.Threading.Tasks.Task<bool> CanAdd(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanAdd(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<bool> CanRemove(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanRemove(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task OnItemAdded(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnItemAdded(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnBeforeItemRemoved(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = PerkSlots;
                    break;
                case 11:
                    currProperty = Items;
                    break;
                case 12:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -547821135;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class PermanentPerksAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPermanentPerksAlways
    {
        public PermanentPerksAlways(SharedCode.DeltaObjects.IPermanentPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IPermanentPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IPermanentPerks)__deltaObjectBase__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public override int TypeId => 531124931;
    }

    public class PermanentPerksClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPermanentPerksClientBroadcast
    {
        public PermanentPerksClientBroadcast(SharedCode.DeltaObjects.IPermanentPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IPermanentPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IPermanentPerks)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = Items;
                    break;
                case 12:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 939313738;
    }

    public class PermanentPerksClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPermanentPerksClientFullApi
    {
        public PermanentPerksClientFullApi(SharedCode.DeltaObjects.IPermanentPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IPermanentPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IPermanentPerks)__deltaObjectBase__;
            }
        }

        public override int TypeId => 892701231;
    }

    public class PermanentPerksClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPermanentPerksClientFull
    {
        public PermanentPerksClientFull(SharedCode.DeltaObjects.IPermanentPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IPermanentPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IPermanentPerks)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<int, SharedCode.Aspects.Item.Templates.ItemTypeResource> PerkSlots
        {
            get
            {
                return __deltaObject__.PerkSlots;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task AddPerkSlot(int slotId, SharedCode.Aspects.Item.Templates.ItemTypeResource perkSlotType)
        {
            return __deltaObject__.AddPerkSlot(slotId, perkSlotType);
        }

        public System.Threading.Tasks.Task RemovePerkSlot(int slotId)
        {
            return __deltaObject__.RemovePerkSlot(slotId);
        }

        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = PerkSlots;
                    break;
                case 11:
                    currProperty = Items;
                    break;
                case 12:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1302273682;
    }

    public class PermanentPerksServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPermanentPerksServerApi
    {
        public PermanentPerksServerApi(SharedCode.DeltaObjects.IPermanentPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IPermanentPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IPermanentPerks)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1957623459;
    }

    public class PermanentPerksServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IPermanentPerksServer
    {
        public PermanentPerksServer(SharedCode.DeltaObjects.IPermanentPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.IPermanentPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.IPermanentPerks)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<int, SharedCode.Aspects.Item.Templates.ItemTypeResource> PerkSlots
        {
            get
            {
                return __deltaObject__.PerkSlots;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task AddPerkSlot(int slotId, SharedCode.Aspects.Item.Templates.ItemTypeResource perkSlotType)
        {
            return __deltaObject__.AddPerkSlot(slotId, perkSlotType);
        }

        public System.Threading.Tasks.Task RemovePerkSlot(int slotId)
        {
            return __deltaObject__.RemovePerkSlot(slotId);
        }

        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public System.Threading.Tasks.Task<bool> CanAdd(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanAdd(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<bool> CanRemove(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanRemove(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task OnItemAdded(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnItemAdded(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnBeforeItemRemoved(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = PerkSlots;
                    break;
                case 11:
                    currProperty = Items;
                    break;
                case 12:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1831386839;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class SavedPerksAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISavedPerksAlways
    {
        public SavedPerksAlways(SharedCode.DeltaObjects.ISavedPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ISavedPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ISavedPerks)__deltaObjectBase__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public override int TypeId => -529856990;
    }

    public class SavedPerksClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISavedPerksClientBroadcast
    {
        public SavedPerksClientBroadcast(SharedCode.DeltaObjects.ISavedPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ISavedPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ISavedPerks)__deltaObjectBase__;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = Items;
                    break;
                case 12:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -190667834;
    }

    public class SavedPerksClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISavedPerksClientFullApi
    {
        public SavedPerksClientFullApi(SharedCode.DeltaObjects.ISavedPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ISavedPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ISavedPerks)__deltaObjectBase__;
            }
        }

        public override int TypeId => 191958816;
    }

    public class SavedPerksClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISavedPerksClientFull
    {
        public SavedPerksClientFull(SharedCode.DeltaObjects.ISavedPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ISavedPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ISavedPerks)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<int, SharedCode.Aspects.Item.Templates.ItemTypeResource> PerkSlots
        {
            get
            {
                return __deltaObject__.PerkSlots;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task AddPerkSlot(int slotId, SharedCode.Aspects.Item.Templates.ItemTypeResource perkSlotType)
        {
            return __deltaObject__.AddPerkSlot(slotId, perkSlotType);
        }

        public System.Threading.Tasks.Task RemovePerkSlot(int slotId)
        {
            return __deltaObject__.RemovePerkSlot(slotId);
        }

        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = PerkSlots;
                    break;
                case 11:
                    currProperty = Items;
                    break;
                case 12:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -912722822;
    }

    public class SavedPerksServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISavedPerksServerApi
    {
        public SavedPerksServerApi(SharedCode.DeltaObjects.ISavedPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ISavedPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ISavedPerks)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1363546815;
    }

    public class SavedPerksServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISavedPerksServer
    {
        public SavedPerksServer(SharedCode.DeltaObjects.ISavedPerks deltaObject): base(deltaObject)
        {
        }

        SharedCode.DeltaObjects.ISavedPerks __deltaObject__
        {
            get
            {
                return (SharedCode.DeltaObjects.ISavedPerks)__deltaObjectBase__;
            }
        }

        public IDeltaDictionary<int, SharedCode.Aspects.Item.Templates.ItemTypeResource> PerkSlots
        {
            get
            {
                return __deltaObject__.PerkSlots;
            }
        }

        IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> __Items__Wrapper__;
        public IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> Items
        {
            get
            {
                if (__Items__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Items__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Items)
                    __Items__Wrapper__ = __deltaObject__.Items == null ? null : new DeltaDictionaryWrapper<int, SharedCode.DeltaObjects.ISlotItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer>(__deltaObject__.Items);
                return __Items__Wrapper__;
            }
        }

        public System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots => __deltaObject__.TransactionReservedSlots;
        public int Size => __deltaObject__.Size;
        public System.Threading.Tasks.Task AddPerkSlot(int slotId, SharedCode.Aspects.Item.Templates.ItemTypeResource perkSlotType)
        {
            return __deltaObject__.AddPerkSlot(slotId, perkSlotType);
        }

        public System.Threading.Tasks.Task RemovePerkSlot(int slotId)
        {
            return __deltaObject__.RemovePerkSlot(slotId);
        }

        public System.Threading.Tasks.Task<float> GetMaxWeigth()
        {
            return __deltaObject__.GetMaxWeigth();
        }

        public System.Threading.Tasks.Task<float> GetTotalWeight()
        {
            return __deltaObject__.GetTotalWeight();
        }

        public System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            return __deltaObject__.GetMaxStackForSlot(destinationSlot);
        }

        public System.Threading.Tasks.Task<bool> IgnoreMaxStack()
        {
            return __deltaObject__.IgnoreMaxStack();
        }

        public System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            return __deltaObject__.CanAutoselectEmptySlotsForAddStacks();
        }

        public System.Threading.Tasks.Task<bool> CanAdd(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanAdd(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<bool> CanRemove(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.CanRemove(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task OnItemAdded(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnItemAdded(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual)
        {
            return __deltaObject__.OnBeforeItemRemoved(item.To<SharedCode.Entities.IItem>(), index, count, manual);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer
        {
            add
            {
                __deltaObject__.ItemAddedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemAddedToContainer -= value;
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer
        {
            add
            {
                __deltaObject__.ItemRemovedToContainer += value;
            }

            remove
            {
                __deltaObject__.ItemRemovedToContainer -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = PerkSlots;
                    break;
                case 11:
                    currProperty = Items;
                    break;
                case 12:
                    currProperty = Size;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 147440111;
    }
}