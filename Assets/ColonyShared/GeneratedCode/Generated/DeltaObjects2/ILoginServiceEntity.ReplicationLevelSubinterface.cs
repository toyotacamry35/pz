// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, -571907685, typeof(SharedCode.Entities.Cloud.ILoginServiceEntity))]
    public interface ILoginServiceEntityAlways : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        System.Threading.Tasks.Task<bool> IsMapDead(System.Guid map, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> RequestUpdateAccountData(System.Guid accId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfJoining(System.Guid accId, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfLeaving(System.Guid accId, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfRealmGiveUp(System.Guid accId, System.Guid realmId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, 2042875035, typeof(SharedCode.Entities.Cloud.ILoginServiceEntity))]
    public interface ILoginServiceEntityClientBroadcast : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Aspects.Sessions.RealmRulesConfigDef RealmRulesConfigDef
        {
            get;
        }

        System.Threading.Tasks.Task<bool> AttachMapToRealm(System.Guid mapId, GeneratedCode.Custom.Config.MapDef mapDef, System.Guid realmId);
        System.Threading.Tasks.Task<SharedCode.Entities.Cloud.LoginResult> Login(SharedCode.Data.Platform platform, string version, string userId, string code);
        System.Threading.Tasks.Task Logout();
        System.Threading.Tasks.ValueTask<bool> SetMaxCCU(int ccu);
        System.Threading.Tasks.ValueTask<int> GetCCU();
        System.Threading.Tasks.ValueTask<int> GetMaxCCU();
        System.Threading.Tasks.Task<bool> IsMapDead(System.Guid map, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> RequestUpdateAccountData(System.Guid accId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfJoining(System.Guid accId, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfLeaving(System.Guid accId, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfRealmGiveUp(System.Guid accId, System.Guid realmId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, 779259007, typeof(SharedCode.Entities.Cloud.ILoginServiceEntity))]
    public interface ILoginServiceEntityClientFullApi : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, 302010263, typeof(SharedCode.Entities.Cloud.ILoginServiceEntity))]
    public interface ILoginServiceEntityClientFull : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Aspects.Sessions.RealmRulesConfigDef RealmRulesConfigDef
        {
            get;
        }

        System.Threading.Tasks.Task<bool> AttachMapToRealm(System.Guid mapId, GeneratedCode.Custom.Config.MapDef mapDef, System.Guid realmId);
        System.Threading.Tasks.Task<SharedCode.Entities.Cloud.LoginResult> Login(SharedCode.Data.Platform platform, string version, string userId, string code);
        System.Threading.Tasks.Task Logout();
        System.Threading.Tasks.ValueTask<bool> SetMaxCCU(int ccu);
        System.Threading.Tasks.ValueTask<int> GetCCU();
        System.Threading.Tasks.ValueTask<int> GetMaxCCU();
        System.Threading.Tasks.Task<bool> IsMapDead(System.Guid map, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> RequestUpdateAccountData(System.Guid accId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfJoining(System.Guid accId, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfLeaving(System.Guid accId, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfRealmGiveUp(System.Guid accId, System.Guid realmId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, -485580990, typeof(SharedCode.Entities.Cloud.ILoginServiceEntity))]
    public interface ILoginServiceEntityServerApi : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, 874233082, typeof(SharedCode.Entities.Cloud.ILoginServiceEntity))]
    public interface ILoginServiceEntityServer : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Aspects.Sessions.RealmRulesConfigDef RealmRulesConfigDef
        {
            get;
        }

        System.Threading.Tasks.Task<SharedCode.Entities.Cloud.FindRealmRequestResult> FindRealm(SharedCode.Aspects.Sessions.RealmRulesQueryDef query, System.Guid accountId, System.Guid currentRealm);
        System.Threading.Tasks.Task<System.Guid> GetUserRealm(System.Guid userId);
        System.Threading.Tasks.Task<bool> AttachMapToRealm(System.Guid mapId, GeneratedCode.Custom.Config.MapDef mapDef, System.Guid realmId);
        System.Threading.Tasks.Task<SharedCode.Entities.Cloud.LoginResult> Login(SharedCode.Data.Platform platform, string version, string userId, string code);
        System.Threading.Tasks.Task Logout();
        System.Threading.Tasks.Task<SharedCode.Entities.Cloud.RealmStatus> GetRealmStatus();
        System.Threading.Tasks.Task<SharedCode.Entities.Cloud.ELogoutResult> Kick(System.Guid id);
        System.Threading.Tasks.ValueTask<bool> SetMaxCCU(int ccu);
        System.Threading.Tasks.ValueTask<int> GetCCU();
        System.Threading.Tasks.ValueTask<int> GetMaxCCU();
        System.Threading.Tasks.ValueTask<SharedCode.Entities.Cloud.AccountList> GetAllAccountsOnline();
        System.Threading.Tasks.Task<bool> IsMapDead(System.Guid map, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> DeleteAllCharacters(System.Guid accountId);
        System.Threading.Tasks.ValueTask<SharedCode.Entities.Cloud.CharacterList> GetAllCharactersForAccount(System.Guid accountId);
        System.Threading.Tasks.ValueTask<int> GetAccountExperience(System.Guid accountId);
        System.Threading.Tasks.ValueTask<int> AddAccountExperience(System.Guid accountId, int expToGive);
        System.Threading.Tasks.ValueTask<bool> RequestUpdateAccountData(System.Guid accId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfJoining(System.Guid accId, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfLeaving(System.Guid accId, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> NotifyPlatformOfRealmGiveUp(System.Guid accId, System.Guid realmId);
        System.Threading.Tasks.ValueTask<bool> GiveUpRealmOnDeath(System.Guid accId);
        System.Threading.Tasks.Task<System.Guid> GetAccountIdByUserId(System.Guid userId);
        System.Threading.Tasks.ValueTask<SharedCode.Entities.AccountStatsData> GetAccountDataForAccStats(System.Guid accountId);
        System.Threading.Tasks.Task<bool> AssignAccountToMap(System.Guid accId, System.Guid mapId);
        System.Threading.Tasks.Task<bool> GrantAccountReward(System.Guid characterId, ResourceSystem.Aspects.Rewards.RewardDef reward);
    }
}