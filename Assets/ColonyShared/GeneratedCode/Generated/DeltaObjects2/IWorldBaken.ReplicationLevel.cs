// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class WorldBakenAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldBakenAlways
    {
        public WorldBakenAlways(SharedCode.Entities.IWorldBaken deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldBaken __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldBaken)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 11:
                    currProperty = Def;
                    break;
                case 12:
                    currProperty = Name;
                    break;
                case 13:
                    currProperty = Prefab;
                    break;
                case 14:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 15:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 17:
                    currProperty = WorldSpaced;
                    break;
                case 18:
                    currProperty = MovementSync;
                    break;
                case 19:
                    currProperty = OwnerInformation;
                    break;
                case 22:
                    currProperty = MapOwner;
                    break;
                case 23:
                    currProperty = StaticIdFromExport;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -2041065066;
    }

    public class WorldBakenClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldBakenClientBroadcast
    {
        public WorldBakenClientBroadcast(SharedCode.Entities.IWorldBaken deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldBaken __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldBaken)__deltaObjectBase__;
            }
        }

        public long ReadyTimeUTC0InMilliseconds => __deltaObject__.ReadyTimeUTC0InMilliseconds;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public System.Threading.Tasks.Task SetCooldown()
        {
            return __deltaObject__.SetCooldown();
        }

        public System.Threading.Tasks.Task<float> GetVerticalSpawnPointDistance()
        {
            return __deltaObject__.GetVerticalSpawnPointDistance();
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = ReadyTimeUTC0InMilliseconds;
                    break;
                case 11:
                    currProperty = Def;
                    break;
                case 12:
                    currProperty = Name;
                    break;
                case 13:
                    currProperty = Prefab;
                    break;
                case 14:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 15:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 17:
                    currProperty = WorldSpaced;
                    break;
                case 18:
                    currProperty = MovementSync;
                    break;
                case 19:
                    currProperty = OwnerInformation;
                    break;
                case 20:
                    currProperty = Stats;
                    break;
                case 21:
                    currProperty = Health;
                    break;
                case 22:
                    currProperty = MapOwner;
                    break;
                case 23:
                    currProperty = StaticIdFromExport;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -357841300;
    }

    public class WorldBakenClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldBakenClientFullApi
    {
        public WorldBakenClientFullApi(SharedCode.Entities.IWorldBaken deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldBaken __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldBaken)__deltaObjectBase__;
            }
        }

        public override int TypeId => 506774320;
    }

    public class WorldBakenClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldBakenClientFull
    {
        public WorldBakenClientFull(SharedCode.Entities.IWorldBaken deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldBaken __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldBaken)__deltaObjectBase__;
            }
        }

        public long ReadyTimeUTC0InMilliseconds => __deltaObject__.ReadyTimeUTC0InMilliseconds;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public System.Threading.Tasks.Task SetCooldown()
        {
            return __deltaObject__.SetCooldown();
        }

        public System.Threading.Tasks.Task<float> GetVerticalSpawnPointDistance()
        {
            return __deltaObject__.GetVerticalSpawnPointDistance();
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = ReadyTimeUTC0InMilliseconds;
                    break;
                case 11:
                    currProperty = Def;
                    break;
                case 12:
                    currProperty = Name;
                    break;
                case 13:
                    currProperty = Prefab;
                    break;
                case 14:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 15:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 17:
                    currProperty = WorldSpaced;
                    break;
                case 18:
                    currProperty = MovementSync;
                    break;
                case 19:
                    currProperty = OwnerInformation;
                    break;
                case 20:
                    currProperty = Stats;
                    break;
                case 21:
                    currProperty = Health;
                    break;
                case 22:
                    currProperty = MapOwner;
                    break;
                case 23:
                    currProperty = StaticIdFromExport;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 771222026;
    }

    public class WorldBakenServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldBakenServerApi
    {
        public WorldBakenServerApi(SharedCode.Entities.IWorldBaken deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldBaken __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldBaken)__deltaObjectBase__;
            }
        }

        public override int TypeId => 2096597490;
    }

    public class WorldBakenServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldBakenServer
    {
        public WorldBakenServer(SharedCode.Entities.IWorldBaken deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldBaken __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldBaken)__deltaObjectBase__;
            }
        }

        public long ReadyTimeUTC0InMilliseconds => __deltaObject__.ReadyTimeUTC0InMilliseconds;
        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public System.Threading.Tasks.Task SetCooldown()
        {
            return __deltaObject__.SetCooldown();
        }

        public System.Threading.Tasks.Task<float> GetVerticalSpawnPointDistance()
        {
            return __deltaObject__.GetVerticalSpawnPointDistance();
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = ReadyTimeUTC0InMilliseconds;
                    break;
                case 11:
                    currProperty = Def;
                    break;
                case 12:
                    currProperty = Name;
                    break;
                case 13:
                    currProperty = Prefab;
                    break;
                case 14:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 15:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 17:
                    currProperty = WorldSpaced;
                    break;
                case 18:
                    currProperty = MovementSync;
                    break;
                case 19:
                    currProperty = OwnerInformation;
                    break;
                case 20:
                    currProperty = Stats;
                    break;
                case 21:
                    currProperty = Health;
                    break;
                case 22:
                    currProperty = MapOwner;
                    break;
                case 23:
                    currProperty = StaticIdFromExport;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -415987639;
    }
}