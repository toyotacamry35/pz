// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class AccountEntityAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountEntityAlways
    {
        public AccountEntityAlways(SharedCode.Entities.IAccountEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IAccountEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IAccountEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1350886417;
    }

    public class AccountEntityClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountEntityClientBroadcast
    {
        public AccountEntityClientBroadcast(SharedCode.Entities.IAccountEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IAccountEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IAccountEntity)__deltaObjectBase__;
            }
        }

        public string AccountId => __deltaObject__.AccountId;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 16:
                    currProperty = AccountId;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1928067791;
    }

    public class AccountEntityClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountEntityClientFullApi
    {
        public AccountEntityClientFullApi(SharedCode.Entities.IAccountEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IAccountEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IAccountEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => 591899204;
    }

    public class AccountEntityClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountEntityClientFull
    {
        public AccountEntityClientFull(SharedCode.Entities.IAccountEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IAccountEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IAccountEntity)__deltaObjectBase__;
            }
        }

        public int Experience => __deltaObject__.Experience;
        public int UnconsumedExperience => __deltaObject__.UnconsumedExperience;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISessionResultClientFull LastSessionResult => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISessionResultClientFull)__deltaObject__.LastSessionResult?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public IDeltaDictionary<SharedCode.Aspects.Sessions.RealmRulesQueryDef, SharedCode.Entities.RealmRulesQueryState> AvailableRealmQueries
        {
            get
            {
                return __deltaObject__.AvailableRealmQueries;
            }
        }

        IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountCharacterClientFull> __Characters__Wrapper__;
        public IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountCharacterClientFull> Characters
        {
            get
            {
                if (__Characters__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Characters__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Characters)
                    __Characters__Wrapper__ = __deltaObject__.Characters == null ? null : new DeltaListWrapper<SharedCode.Entities.IAccountCharacter, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountCharacterClientFull>(__deltaObject__.Characters);
                return __Characters__Wrapper__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharRealmDataClientFull CharRealmData => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharRealmDataClientFull)__deltaObject__.CharRealmData?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public string AccountId => __deltaObject__.AccountId;
        public ResourceSystem.Aspects.Misc.GenderDef Gender => __deltaObject__.Gender;
        public System.Threading.Tasks.ValueTask<bool> ConsumeRewards()
        {
            return __deltaObject__.ConsumeRewards();
        }

        public System.Threading.Tasks.ValueTask<SharedCode.Entities.DeleteCharacterResultType> DeleteAccountCharacter(System.Guid characterId)
        {
            return __deltaObject__.DeleteAccountCharacter(characterId);
        }

        public System.Threading.Tasks.ValueTask<SharedCode.Entities.CreateNewCharacterResult> CreateNewCharacter(string name, System.Guid accountId)
        {
            return __deltaObject__.CreateNewCharacter(name, accountId);
        }

        public System.Threading.Tasks.Task SetGender(ResourceSystem.Aspects.Misc.GenderDef val)
        {
            return __deltaObject__.SetGender(val);
        }

        public System.Threading.Tasks.Task TryConsumeUnconsumedExp(int val)
        {
            return __deltaObject__.TryConsumeUnconsumedExp(val);
        }

        public System.Threading.Tasks.Task<int> CalcAccLevel()
        {
            return __deltaObject__.CalcAccLevel();
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Experience;
                    break;
                case 11:
                    currProperty = UnconsumedExperience;
                    break;
                case 12:
                    currProperty = LastSessionResult;
                    break;
                case 13:
                    currProperty = AvailableRealmQueries;
                    break;
                case 14:
                    currProperty = Characters;
                    break;
                case 15:
                    currProperty = CharRealmData;
                    break;
                case 16:
                    currProperty = AccountId;
                    break;
                case 17:
                    currProperty = Gender;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1575540808;
    }

    public class AccountEntityServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountEntityServerApi
    {
        public AccountEntityServerApi(SharedCode.Entities.IAccountEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IAccountEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IAccountEntity)__deltaObjectBase__;
            }
        }

        public override int TypeId => -585738188;
    }

    public class AccountEntityServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountEntityServer
    {
        public AccountEntityServer(SharedCode.Entities.IAccountEntity deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IAccountEntity __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IAccountEntity)__deltaObjectBase__;
            }
        }

        public int Experience => __deltaObject__.Experience;
        public int UnconsumedExperience => __deltaObject__.UnconsumedExperience;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISessionResultServer LastSessionResult => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISessionResultServer)__deltaObject__.LastSessionResult?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public IDeltaDictionary<SharedCode.Aspects.Sessions.RealmRulesQueryDef, SharedCode.Entities.RealmRulesQueryState> AvailableRealmQueries
        {
            get
            {
                return __deltaObject__.AvailableRealmQueries;
            }
        }

        IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountCharacterServer> __Characters__Wrapper__;
        public IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountCharacterServer> Characters
        {
            get
            {
                if (__Characters__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__Characters__Wrapper__).GetBaseDeltaObject() != __deltaObject__.Characters)
                    __Characters__Wrapper__ = __deltaObject__.Characters == null ? null : new DeltaListWrapper<SharedCode.Entities.IAccountCharacter, GeneratedCode.DeltaObjects.ReplicationInterfaces.IAccountCharacterServer>(__deltaObject__.Characters);
                return __Characters__Wrapper__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharRealmDataServer CharRealmData => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICharRealmDataServer)__deltaObject__.CharRealmData?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public string AccountId => __deltaObject__.AccountId;
        public ResourceSystem.Aspects.Misc.GenderDef Gender => __deltaObject__.Gender;
        public System.Threading.Tasks.ValueTask SetCurrentUserId(System.Guid userId)
        {
            return __deltaObject__.SetCurrentUserId(userId);
        }

        public System.Threading.Tasks.ValueTask<System.Guid> GetCurrentUserId()
        {
            return __deltaObject__.GetCurrentUserId();
        }

        public System.Threading.Tasks.ValueTask<bool> ClearAndConsumeOldRealmRewards()
        {
            return __deltaObject__.ClearAndConsumeOldRealmRewards();
        }

        public System.Threading.Tasks.ValueTask<bool> ConsumeRewards()
        {
            return __deltaObject__.ConsumeRewards();
        }

        public System.Threading.Tasks.ValueTask<SharedCode.Entities.DeleteCharacterResultType> DeleteAccountCharacter(System.Guid characterId)
        {
            return __deltaObject__.DeleteAccountCharacter(characterId);
        }

        public System.Threading.Tasks.ValueTask<SharedCode.Entities.CreateNewCharacterResult> CreateNewCharacter(string name, System.Guid accountId)
        {
            return __deltaObject__.CreateNewCharacter(name, accountId);
        }

        public System.Threading.Tasks.Task SetGender(ResourceSystem.Aspects.Misc.GenderDef val)
        {
            return __deltaObject__.SetGender(val);
        }

        public System.Threading.Tasks.Task TryConsumeUnconsumedExp(int val)
        {
            return __deltaObject__.TryConsumeUnconsumedExp(val);
        }

        public System.Threading.Tasks.Task<int> CalcAccLevel()
        {
            return __deltaObject__.CalcAccLevel();
        }

        public System.Threading.Tasks.ValueTask<int> AddExperience(int deltaVal)
        {
            return __deltaObject__.AddExperience(deltaVal);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Experience;
                    break;
                case 11:
                    currProperty = UnconsumedExperience;
                    break;
                case 12:
                    currProperty = LastSessionResult;
                    break;
                case 13:
                    currProperty = AvailableRealmQueries;
                    break;
                case 14:
                    currProperty = Characters;
                    break;
                case 15:
                    currProperty = CharRealmData;
                    break;
                case 16:
                    currProperty = AccountId;
                    break;
                case 17:
                    currProperty = Gender;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 90519038;
    }
}