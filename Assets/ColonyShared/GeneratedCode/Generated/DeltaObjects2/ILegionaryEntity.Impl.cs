// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("LegionaryEntity")]
    public partial class LegionaryEntity : SharedCode.EntitySystem.BaseEntity, SharedCode.AI.ILegionaryEntity, ILegionaryEntityImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public LegionaryEntity()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                SlaveWizardHolder = new GeneratedCode.DeltaObjects.SlaveWizardHolder();
                Health = new GeneratedCode.DeltaObjects.HealthEngine();
                Mortal = new GeneratedCode.DeltaObjects.Mortal();
                CorpseSpawner = new GeneratedCode.DeltaObjects.CorpseSpawner();
                Brute = new GeneratedCode.DeltaObjects.Brute();
                Def = default(SharedCode.Entities.GameObjectEntities.IEntityObjectDef);
                MapOwner = default(GeneratedCode.MapSystem.MapOwner);
                StaticIdFromExport = default(System.Guid);
                Name = default(string);
                Prefab = default(string);
                SomeUnknownResourceThatMayBeUseful = default(Assets.Src.ResourcesSystem.Base.ISaveableResource);
                OnSceneObjectNetId = default(SharedCode.Entities.OnSceneObjectNetId);
                AutoAddToWorldSpace = new GeneratedCode.DeltaObjects.AutoAddToWorldSpace();
                WorldSpaced = new GeneratedCode.DeltaObjects.WorldSpaced();
                Stats = new GeneratedCode.DeltaObjects.StatsEngine();
                MovementSync = new GeneratedCode.DeltaObjects.MobMovementSync();
                LogableEntity = new GeneratedCode.DeltaObjects.LogableEntity();
                SpawnedObject = new GeneratedCode.DeltaObjects.SpawnedObject();
                Destroyable = new GeneratedCode.DeltaObjects.Destroyable();
                ReactionsOwner = new GeneratedCode.DeltaObjects.ReactionsOwner();
                AnimationDoerOwner = new GeneratedCode.DeltaObjects.AnimationDoerOwner();
                Doll = new GeneratedCode.DeltaObjects.CharacterDoll();
                ContainerApi = new GeneratedCode.DeltaObjects.ContainerApi();
                Bank = new GeneratedCode.DeltaObjects.BankEngine();
                Buffs = new GeneratedCode.DeltaObjects.Buffs();
                InputActionHandlers = new GeneratedCode.DeltaObjects.InputActionHandlers();
                AttackEngine = new GeneratedCode.DeltaObjects.AttackEngine();
                LocomotionOwner = new GeneratedCode.DeltaObjects.LocomotionOwner();
                AiTargetRecipient = new GeneratedCode.DeltaObjects.AiTargetRecipient();
                Faction = default(Assets.Src.Aspects.Impl.Factions.Template.FactionDef);
                SquadId = default(System.Guid);
            }

            constructor();
        }

        public LegionaryEntity(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                SlaveWizardHolder = new GeneratedCode.DeltaObjects.SlaveWizardHolder();
                Health = new GeneratedCode.DeltaObjects.HealthEngine();
                Mortal = new GeneratedCode.DeltaObjects.Mortal();
                CorpseSpawner = new GeneratedCode.DeltaObjects.CorpseSpawner();
                Brute = new GeneratedCode.DeltaObjects.Brute();
                Def = default(SharedCode.Entities.GameObjectEntities.IEntityObjectDef);
                MapOwner = default(GeneratedCode.MapSystem.MapOwner);
                StaticIdFromExport = default(System.Guid);
                Name = default(string);
                Prefab = default(string);
                SomeUnknownResourceThatMayBeUseful = default(Assets.Src.ResourcesSystem.Base.ISaveableResource);
                OnSceneObjectNetId = default(SharedCode.Entities.OnSceneObjectNetId);
                AutoAddToWorldSpace = new GeneratedCode.DeltaObjects.AutoAddToWorldSpace();
                WorldSpaced = new GeneratedCode.DeltaObjects.WorldSpaced();
                Stats = new GeneratedCode.DeltaObjects.StatsEngine();
                MovementSync = new GeneratedCode.DeltaObjects.MobMovementSync();
                LogableEntity = new GeneratedCode.DeltaObjects.LogableEntity();
                SpawnedObject = new GeneratedCode.DeltaObjects.SpawnedObject();
                Destroyable = new GeneratedCode.DeltaObjects.Destroyable();
                ReactionsOwner = new GeneratedCode.DeltaObjects.ReactionsOwner();
                AnimationDoerOwner = new GeneratedCode.DeltaObjects.AnimationDoerOwner();
                Doll = new GeneratedCode.DeltaObjects.CharacterDoll();
                ContainerApi = new GeneratedCode.DeltaObjects.ContainerApi();
                Bank = new GeneratedCode.DeltaObjects.BankEngine();
                Buffs = new GeneratedCode.DeltaObjects.Buffs();
                InputActionHandlers = new GeneratedCode.DeltaObjects.InputActionHandlers();
                AttackEngine = new GeneratedCode.DeltaObjects.AttackEngine();
                LocomotionOwner = new GeneratedCode.DeltaObjects.LocomotionOwner();
                AiTargetRecipient = new GeneratedCode.DeltaObjects.AiTargetRecipient();
                Faction = default(Assets.Src.Aspects.Impl.Factions.Template.FactionDef);
                SquadId = default(System.Guid);
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if (_Wizard != null && ((long)SharedCode.EntitySystem.ReplicationLevel.Always & replicationMask) == (long)SharedCode.EntitySystem.ReplicationLevel.Always && (!onlyDbEntities || GeneratedCode.EntitySystem.DeltaObjectHelper.DbEntity(_Wizard)))
                entities.Add((currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, _Wizard));
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_SlaveWizardHolder != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_SlaveWizardHolder).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_Health != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Health).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_Mortal != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Mortal).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Master) == (long)SharedCode.EntitySystem.ReplicationLevel.Master)
                if (_CorpseSpawner != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_CorpseSpawner).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Master, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_Brute != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Brute).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Master) == (long)SharedCode.EntitySystem.ReplicationLevel.Master)
                if (_AutoAddToWorldSpace != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_AutoAddToWorldSpace).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Master, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_WorldSpaced != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_WorldSpaced).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_Stats != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Stats).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_MovementSync != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_MovementSync).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_LogableEntity != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_LogableEntity).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_SpawnedObject != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_SpawnedObject).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_Destroyable != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Destroyable).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Master) == (long)SharedCode.EntitySystem.ReplicationLevel.Master)
                if (_ReactionsOwner != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_ReactionsOwner).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Master, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_AnimationDoerOwner != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_AnimationDoerOwner).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_Doll != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Doll).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_ContainerApi != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_ContainerApi).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_Bank != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Bank).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_Buffs != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Buffs).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_InputActionHandlers != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_InputActionHandlers).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_AttackEngine != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_AttackEngine).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_LocomotionOwner != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_LocomotionOwner).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_AiTargetRecipient != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_AiTargetRecipient).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void LinkEntityRefs(SharedCode.EntitySystem.IEntitiesRepository repository)
        {
            base.LinkEntityRefs(repository);
            Wizard = GeneratedCode.EntitySystem.DeltaObjectHelper.LinkEntityRef(GetType(), Wizard, nameof(Wizard), repository);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _SlaveWizardHolder, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Health, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Mortal, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _CorpseSpawner, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Master ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Master, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Brute, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _AutoAddToWorldSpace, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Master ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Master, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _WorldSpaced, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Stats, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _MovementSync, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _LogableEntity, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _SpawnedObject, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Destroyable, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _ReactionsOwner, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Master ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Master, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _AnimationDoerOwner, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Doll, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _ContainerApi, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Bank, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Buffs, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _InputActionHandlers, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _AttackEngine, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _LocomotionOwner, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _AiTargetRecipient, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _SlaveWizardHolder, 11, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Health, 12, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Mortal, 13, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _CorpseSpawner, 14, false, SharedCode.EntitySystem.ReplicationLevel.Master);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Brute, 15, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _AutoAddToWorldSpace, 23, false, SharedCode.EntitySystem.ReplicationLevel.Master);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _WorldSpaced, 24, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Stats, 25, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _MovementSync, 26, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _LogableEntity, 27, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _SpawnedObject, 28, true, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Destroyable, 29, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _ReactionsOwner, 30, false, SharedCode.EntitySystem.ReplicationLevel.Master);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _AnimationDoerOwner, 31, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Doll, 32, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _ContainerApi, 33, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Bank, 34, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Buffs, 35, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _InputActionHandlers, 36, true, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _AttackEngine, 37, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _LocomotionOwner, 38, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _AiTargetRecipient, 39, false, SharedCode.EntitySystem.ReplicationLevel.Always);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SlaveWizardHolder)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Health)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Mortal)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CorpseSpawner)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Brute)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AutoAddToWorldSpace)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_WorldSpaced)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Stats)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_MovementSync)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LogableEntity)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SpawnedObject)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Destroyable)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ReactionsOwner)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AnimationDoerOwner)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Doll)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ContainerApi)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Bank)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Buffs)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_InputActionHandlers)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AttackEngine)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LocomotionOwner)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AiTargetRecipient)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize((SharedCode.EntitySystem.IEntitiesRepositoryExtension)EntitiesRepository, parentEntity, _Wizard, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _SlaveWizardHolder, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Health, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Mortal, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _CorpseSpawner, SharedCode.EntitySystem.ReplicationLevel.Master, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Brute, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _AutoAddToWorldSpace, SharedCode.EntitySystem.ReplicationLevel.Master, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _WorldSpaced, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Stats, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _MovementSync, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _LogableEntity, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _SpawnedObject, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Destroyable, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _ReactionsOwner, SharedCode.EntitySystem.ReplicationLevel.Master, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _AnimationDoerOwner, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Doll, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _ContainerApi, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Bank, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Buffs, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _InputActionHandlers, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _AttackEngine, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _LocomotionOwner, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _AiTargetRecipient, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SlaveWizardHolder)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Health)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Mortal)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CorpseSpawner)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Brute)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AutoAddToWorldSpace)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_WorldSpaced)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Stats)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_MovementSync)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LogableEntity)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SpawnedObject)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Destroyable)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ReactionsOwner)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AnimationDoerOwner)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Doll)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ContainerApi)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Bank)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Buffs)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_InputActionHandlers)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AttackEngine)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LocomotionOwner)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AiTargetRecipient)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Wizard":
                    Wizard__Changed += callback;
                    break;
                case "SlaveWizardHolder":
                    SlaveWizardHolder__Changed += callback;
                    break;
                case "Health":
                    Health__Changed += callback;
                    break;
                case "Mortal":
                    Mortal__Changed += callback;
                    break;
                case "CorpseSpawner":
                    CorpseSpawner__Changed += callback;
                    break;
                case "Brute":
                    Brute__Changed += callback;
                    break;
                case "Def":
                    Def__Changed += callback;
                    break;
                case "MapOwner":
                    MapOwner__Changed += callback;
                    break;
                case "StaticIdFromExport":
                    StaticIdFromExport__Changed += callback;
                    break;
                case "Name":
                    Name__Changed += callback;
                    break;
                case "Prefab":
                    Prefab__Changed += callback;
                    break;
                case "SomeUnknownResourceThatMayBeUseful":
                    SomeUnknownResourceThatMayBeUseful__Changed += callback;
                    break;
                case "OnSceneObjectNetId":
                    OnSceneObjectNetId__Changed += callback;
                    break;
                case "AutoAddToWorldSpace":
                    AutoAddToWorldSpace__Changed += callback;
                    break;
                case "WorldSpaced":
                    WorldSpaced__Changed += callback;
                    break;
                case "Stats":
                    Stats__Changed += callback;
                    break;
                case "MovementSync":
                    MovementSync__Changed += callback;
                    break;
                case "LogableEntity":
                    LogableEntity__Changed += callback;
                    break;
                case "SpawnedObject":
                    SpawnedObject__Changed += callback;
                    break;
                case "Destroyable":
                    Destroyable__Changed += callback;
                    break;
                case "ReactionsOwner":
                    ReactionsOwner__Changed += callback;
                    break;
                case "AnimationDoerOwner":
                    AnimationDoerOwner__Changed += callback;
                    break;
                case "Doll":
                    Doll__Changed += callback;
                    break;
                case "ContainerApi":
                    ContainerApi__Changed += callback;
                    break;
                case "Bank":
                    Bank__Changed += callback;
                    break;
                case "Buffs":
                    Buffs__Changed += callback;
                    break;
                case "InputActionHandlers":
                    InputActionHandlers__Changed += callback;
                    break;
                case "AttackEngine":
                    AttackEngine__Changed += callback;
                    break;
                case "LocomotionOwner":
                    LocomotionOwner__Changed += callback;
                    break;
                case "AiTargetRecipient":
                    AiTargetRecipient__Changed += callback;
                    break;
                case "Faction":
                    Faction__Changed += callback;
                    break;
                case "SquadId":
                    SquadId__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Wizard":
                    Wizard__Changed -= callback;
                    break;
                case "SlaveWizardHolder":
                    SlaveWizardHolder__Changed -= callback;
                    break;
                case "Health":
                    Health__Changed -= callback;
                    break;
                case "Mortal":
                    Mortal__Changed -= callback;
                    break;
                case "CorpseSpawner":
                    CorpseSpawner__Changed -= callback;
                    break;
                case "Brute":
                    Brute__Changed -= callback;
                    break;
                case "Def":
                    Def__Changed -= callback;
                    break;
                case "MapOwner":
                    MapOwner__Changed -= callback;
                    break;
                case "StaticIdFromExport":
                    StaticIdFromExport__Changed -= callback;
                    break;
                case "Name":
                    Name__Changed -= callback;
                    break;
                case "Prefab":
                    Prefab__Changed -= callback;
                    break;
                case "SomeUnknownResourceThatMayBeUseful":
                    SomeUnknownResourceThatMayBeUseful__Changed -= callback;
                    break;
                case "OnSceneObjectNetId":
                    OnSceneObjectNetId__Changed -= callback;
                    break;
                case "AutoAddToWorldSpace":
                    AutoAddToWorldSpace__Changed -= callback;
                    break;
                case "WorldSpaced":
                    WorldSpaced__Changed -= callback;
                    break;
                case "Stats":
                    Stats__Changed -= callback;
                    break;
                case "MovementSync":
                    MovementSync__Changed -= callback;
                    break;
                case "LogableEntity":
                    LogableEntity__Changed -= callback;
                    break;
                case "SpawnedObject":
                    SpawnedObject__Changed -= callback;
                    break;
                case "Destroyable":
                    Destroyable__Changed -= callback;
                    break;
                case "ReactionsOwner":
                    ReactionsOwner__Changed -= callback;
                    break;
                case "AnimationDoerOwner":
                    AnimationDoerOwner__Changed -= callback;
                    break;
                case "Doll":
                    Doll__Changed -= callback;
                    break;
                case "ContainerApi":
                    ContainerApi__Changed -= callback;
                    break;
                case "Bank":
                    Bank__Changed -= callback;
                    break;
                case "Buffs":
                    Buffs__Changed -= callback;
                    break;
                case "InputActionHandlers":
                    InputActionHandlers__Changed -= callback;
                    break;
                case "AttackEngine":
                    AttackEngine__Changed -= callback;
                    break;
                case "LocomotionOwner":
                    LocomotionOwner__Changed -= callback;
                    break;
                case "AiTargetRecipient":
                    AiTargetRecipient__Changed -= callback;
                    break;
                case "Faction":
                    Faction__Changed -= callback;
                    break;
                case "SquadId":
                    SquadId__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "Wizard":
                    Wizard__Changed = null;
                    break;
                case "SlaveWizardHolder":
                    SlaveWizardHolder__Changed = null;
                    break;
                case "Health":
                    Health__Changed = null;
                    break;
                case "Mortal":
                    Mortal__Changed = null;
                    break;
                case "CorpseSpawner":
                    CorpseSpawner__Changed = null;
                    break;
                case "Brute":
                    Brute__Changed = null;
                    break;
                case "Def":
                    Def__Changed = null;
                    break;
                case "MapOwner":
                    MapOwner__Changed = null;
                    break;
                case "StaticIdFromExport":
                    StaticIdFromExport__Changed = null;
                    break;
                case "Name":
                    Name__Changed = null;
                    break;
                case "Prefab":
                    Prefab__Changed = null;
                    break;
                case "SomeUnknownResourceThatMayBeUseful":
                    SomeUnknownResourceThatMayBeUseful__Changed = null;
                    break;
                case "OnSceneObjectNetId":
                    OnSceneObjectNetId__Changed = null;
                    break;
                case "AutoAddToWorldSpace":
                    AutoAddToWorldSpace__Changed = null;
                    break;
                case "WorldSpaced":
                    WorldSpaced__Changed = null;
                    break;
                case "Stats":
                    Stats__Changed = null;
                    break;
                case "MovementSync":
                    MovementSync__Changed = null;
                    break;
                case "LogableEntity":
                    LogableEntity__Changed = null;
                    break;
                case "SpawnedObject":
                    SpawnedObject__Changed = null;
                    break;
                case "Destroyable":
                    Destroyable__Changed = null;
                    break;
                case "ReactionsOwner":
                    ReactionsOwner__Changed = null;
                    break;
                case "AnimationDoerOwner":
                    AnimationDoerOwner__Changed = null;
                    break;
                case "Doll":
                    Doll__Changed = null;
                    break;
                case "ContainerApi":
                    ContainerApi__Changed = null;
                    break;
                case "Bank":
                    Bank__Changed = null;
                    break;
                case "Buffs":
                    Buffs__Changed = null;
                    break;
                case "InputActionHandlers":
                    InputActionHandlers__Changed = null;
                    break;
                case "AttackEngine":
                    AttackEngine__Changed = null;
                    break;
                case "LocomotionOwner":
                    LocomotionOwner__Changed = null;
                    break;
                case "AiTargetRecipient":
                    AiTargetRecipient__Changed = null;
                    break;
                case "Faction":
                    Faction__Changed = null;
                    break;
                case "SquadId":
                    SquadId__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            Wizard__Changed = null;
            SlaveWizardHolder__Changed = null;
            Health__Changed = null;
            Mortal__Changed = null;
            CorpseSpawner__Changed = null;
            Brute__Changed = null;
            Def__Changed = null;
            MapOwner__Changed = null;
            StaticIdFromExport__Changed = null;
            Name__Changed = null;
            Prefab__Changed = null;
            SomeUnknownResourceThatMayBeUseful__Changed = null;
            OnSceneObjectNetId__Changed = null;
            AutoAddToWorldSpace__Changed = null;
            WorldSpaced__Changed = null;
            Stats__Changed = null;
            MovementSync__Changed = null;
            LogableEntity__Changed = null;
            SpawnedObject__Changed = null;
            Destroyable__Changed = null;
            ReactionsOwner__Changed = null;
            AnimationDoerOwner__Changed = null;
            Doll__Changed = null;
            ContainerApi__Changed = null;
            Bank__Changed = null;
            Buffs__Changed = null;
            InputActionHandlers__Changed = null;
            AttackEngine__Changed = null;
            LocomotionOwner__Changed = null;
            AiTargetRecipient__Changed = null;
            Faction__Changed = null;
            SquadId__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && Wizard__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Wizard, nameof(Wizard), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Wizard__Changed);
            }

            if (NeedFireEvent(11) && SlaveWizardHolder__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SlaveWizardHolder, nameof(SlaveWizardHolder), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SlaveWizardHolder__Changed);
            }

            if (NeedFireEvent(12) && Health__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Health, nameof(Health), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Health__Changed);
            }

            if (NeedFireEvent(13) && Mortal__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Mortal, nameof(Mortal), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Mortal__Changed);
            }

            if (NeedFireEvent(14) && CorpseSpawner__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CorpseSpawner, nameof(CorpseSpawner), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CorpseSpawner__Changed);
            }

            if (NeedFireEvent(15) && Brute__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Brute, nameof(Brute), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Brute__Changed);
            }

            if (NeedFireEvent(16) && Def__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 16;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Def, nameof(Def), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Def__Changed);
            }

            if (NeedFireEvent(17) && MapOwner__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 17;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_MapOwner, nameof(MapOwner), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, MapOwner__Changed);
            }

            if (NeedFireEvent(18) && StaticIdFromExport__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 18;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_StaticIdFromExport, nameof(StaticIdFromExport), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, StaticIdFromExport__Changed);
            }

            if (NeedFireEvent(19) && Name__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 19;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Name, nameof(Name), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Name__Changed);
            }

            if (NeedFireEvent(20) && Prefab__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 20;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Prefab, nameof(Prefab), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Prefab__Changed);
            }

            if (NeedFireEvent(21) && SomeUnknownResourceThatMayBeUseful__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 21;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SomeUnknownResourceThatMayBeUseful, nameof(SomeUnknownResourceThatMayBeUseful), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SomeUnknownResourceThatMayBeUseful__Changed);
            }

            if (NeedFireEvent(22) && OnSceneObjectNetId__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 22;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OnSceneObjectNetId, nameof(OnSceneObjectNetId), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OnSceneObjectNetId__Changed);
            }

            if (NeedFireEvent(23) && AutoAddToWorldSpace__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 23;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AutoAddToWorldSpace, nameof(AutoAddToWorldSpace), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AutoAddToWorldSpace__Changed);
            }

            if (NeedFireEvent(24) && WorldSpaced__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 24;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_WorldSpaced, nameof(WorldSpaced), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, WorldSpaced__Changed);
            }

            if (NeedFireEvent(25) && Stats__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 25;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Stats, nameof(Stats), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Stats__Changed);
            }

            if (NeedFireEvent(26) && MovementSync__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 26;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_MovementSync, nameof(MovementSync), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, MovementSync__Changed);
            }

            if (NeedFireEvent(27) && LogableEntity__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 27;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LogableEntity, nameof(LogableEntity), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LogableEntity__Changed);
            }

            if (NeedFireEvent(28) && SpawnedObject__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 28;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SpawnedObject, nameof(SpawnedObject), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SpawnedObject__Changed);
            }

            if (NeedFireEvent(29) && Destroyable__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 29;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Destroyable, nameof(Destroyable), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Destroyable__Changed);
            }

            if (NeedFireEvent(30) && ReactionsOwner__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 30;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ReactionsOwner, nameof(ReactionsOwner), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ReactionsOwner__Changed);
            }

            if (NeedFireEvent(31) && AnimationDoerOwner__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 31;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AnimationDoerOwner, nameof(AnimationDoerOwner), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AnimationDoerOwner__Changed);
            }

            if (NeedFireEvent(32) && Doll__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 32;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Doll, nameof(Doll), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Doll__Changed);
            }

            if (NeedFireEvent(33) && ContainerApi__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 33;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ContainerApi, nameof(ContainerApi), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ContainerApi__Changed);
            }

            if (NeedFireEvent(34) && Bank__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 34;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Bank, nameof(Bank), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Bank__Changed);
            }

            if (NeedFireEvent(35) && Buffs__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 35;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Buffs, nameof(Buffs), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Buffs__Changed);
            }

            if (NeedFireEvent(36) && InputActionHandlers__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 36;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_InputActionHandlers, nameof(InputActionHandlers), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, InputActionHandlers__Changed);
            }

            if (NeedFireEvent(37) && AttackEngine__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 37;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AttackEngine, nameof(AttackEngine), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AttackEngine__Changed);
            }

            if (NeedFireEvent(38) && LocomotionOwner__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 38;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LocomotionOwner, nameof(LocomotionOwner), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LocomotionOwner__Changed);
            }

            if (NeedFireEvent(39) && AiTargetRecipient__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 39;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AiTargetRecipient, nameof(AiTargetRecipient), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AiTargetRecipient__Changed);
            }

            if (NeedFireEvent(40) && Faction__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 40;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Faction, nameof(Faction), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Faction__Changed);
            }

            if (NeedFireEvent(41) && SquadId__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 41;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SquadId, nameof(SquadId), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SquadId__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Wizard = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                SlaveWizardHolder = default;
            if (_SlaveWizardHolder != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SlaveWizardHolder).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Health = default;
            if (_Health != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Health).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Mortal = default;
            if (_Mortal != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Mortal).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                CorpseSpawner = default;
            if (_CorpseSpawner != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CorpseSpawner).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                Brute = default;
            if (_Brute != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Brute).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                MapOwner = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Name = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Prefab = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                SomeUnknownResourceThatMayBeUseful = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                OnSceneObjectNetId = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                AutoAddToWorldSpace = default;
            if (_AutoAddToWorldSpace != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AutoAddToWorldSpace).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                WorldSpaced = default;
            if (_WorldSpaced != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_WorldSpaced).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Stats = default;
            if (_Stats != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Stats).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                MovementSync = default;
            if (_MovementSync != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_MovementSync).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                LogableEntity = default;
            if (_LogableEntity != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LogableEntity).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                SpawnedObject = default;
            if (_SpawnedObject != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SpawnedObject).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                Destroyable = default;
            if (_Destroyable != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Destroyable).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                ReactionsOwner = default;
            if (_ReactionsOwner != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ReactionsOwner).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                AnimationDoerOwner = default;
            if (_AnimationDoerOwner != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AnimationDoerOwner).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Doll = default;
            if (_Doll != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Doll).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                ContainerApi = default;
            if (_ContainerApi != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ContainerApi).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Bank = default;
            if (_Bank != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Bank).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Buffs = default;
            if (_Buffs != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Buffs).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                InputActionHandlers = default;
            if (_InputActionHandlers != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_InputActionHandlers).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                AttackEngine = default;
            if (_AttackEngine != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AttackEngine).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                LocomotionOwner = default;
            if (_LocomotionOwner != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LocomotionOwner).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                AiTargetRecipient = default;
            if (_AiTargetRecipient != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AiTargetRecipient).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Faction = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                SquadId = default;
        }
    }
}