// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class Container
    {
        public Task<float> GetMaxWeigth()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return GetMaxWeigthRunMaster().AsTask();
            else
                return GetMaxWeigthRun().AsTask();
        }

        private Func<Task<float>> GetMaxWeigthCreateDeferredDelegate() => () =>
        {
            return GetMaxWeigth();
        }

        ;
        public async ValueTask<float> GetMaxWeigthRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetMaxWeigthCreateDeferredDelegate(), nameof(GetMaxWeigth));
            }

            return await GetMaxWeigthRun();
        }

        public async Task<float> GetMaxWeigthRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 0);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetMaxWeigthImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<float> GetTotalWeight()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.NeedDeferredRpcOnMigrating())
                return GetTotalWeightRunMaster().AsTask();
            else
                return GetTotalWeightRun().AsTask();
        }

        private Func<Task<float>> GetTotalWeightCreateDeferredDelegate() => () =>
        {
            return GetTotalWeight();
        }

        ;
        public async ValueTask<float> GetTotalWeightRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetTotalWeightCreateDeferredDelegate(), nameof(GetTotalWeight));
            }

            return await GetTotalWeightRun();
        }

        public async Task<float> GetTotalWeightRun()
        {
            this.CheckValidateEntityInAsyncContext();
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 1);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetTotalWeightImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            if (this.NeedDeferredRpcOnMigrating())
                return GetMaxStackForSlotRunMaster(destinationSlot).AsTask();
            else
                return GetMaxStackForSlotRun(destinationSlot).AsTask();
        }

        private Func<Task<int>> GetMaxStackForSlotCreateDeferredDelegate(int destinationSlot) => () =>
        {
            return GetMaxStackForSlot(destinationSlot);
        }

        ;
        public async ValueTask<int> GetMaxStackForSlotRunMaster(int destinationSlot)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetMaxStackForSlotCreateDeferredDelegate(destinationSlot), nameof(GetMaxStackForSlot));
            }

            return await GetMaxStackForSlotRun(destinationSlot);
        }

        public async Task<int> GetMaxStackForSlotRun(int destinationSlot)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 2);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetMaxStackForSlotImpl(destinationSlot);
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> IgnoreMaxStack()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return IgnoreMaxStackRunMaster().AsTask();
            else
                return IgnoreMaxStackRun().AsTask();
        }

        private Func<Task<bool>> IgnoreMaxStackCreateDeferredDelegate() => () =>
        {
            return IgnoreMaxStack();
        }

        ;
        public async ValueTask<bool> IgnoreMaxStackRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(IgnoreMaxStackCreateDeferredDelegate(), nameof(IgnoreMaxStack));
            }

            return await IgnoreMaxStackRun();
        }

        public async Task<bool> IgnoreMaxStackRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 3);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await IgnoreMaxStackImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return CanAutoselectEmptySlotsForAddStacksRunMaster().AsTask();
            else
                return CanAutoselectEmptySlotsForAddStacksRun().AsTask();
        }

        private Func<Task<bool>> CanAutoselectEmptySlotsForAddStacksCreateDeferredDelegate() => () =>
        {
            return CanAutoselectEmptySlotsForAddStacks();
        }

        ;
        public async ValueTask<bool> CanAutoselectEmptySlotsForAddStacksRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanAutoselectEmptySlotsForAddStacksCreateDeferredDelegate(), nameof(CanAutoselectEmptySlotsForAddStacks));
            }

            return await CanAutoselectEmptySlotsForAddStacksRun();
        }

        public async Task<bool> CanAutoselectEmptySlotsForAddStacksRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 4);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await CanAutoselectEmptySlotsForAddStacksImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanAdd(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CanAddRunMaster(item, index, count, manual).AsTask();
                else
                    return CanAddRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.CanAdd(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CanAddCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return CanAdd(item, index, count, manual);
        }

        ;
        public async ValueTask<bool> CanAddRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanAddCreateDeferredDelegate(item, index, count, manual), nameof(CanAdd));
            }

            return await CanAddRun(item, index, count, manual);
        }

        public async ValueTask<bool> CanAddRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 5);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CanAddImpl(item, index, count, manual);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanRemove(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CanRemoveRunMaster(item, index, count, manual).AsTask();
                else
                    return CanRemoveRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.CanRemove(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CanRemoveCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return CanRemove(item, index, count, manual);
        }

        ;
        public async ValueTask<bool> CanRemoveRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanRemoveCreateDeferredDelegate(item, index, count, manual), nameof(CanRemove));
            }

            return await CanRemoveRun(item, index, count, manual);
        }

        public async ValueTask<bool> CanRemoveRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 6);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CanRemoveImpl(item, index, count, manual);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task OnItemAdded(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnItemAddedRunMaster(item, index, count, manual).AsTask();
                else
                    return OnItemAddedRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.OnItemAdded(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> OnItemAddedCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return OnItemAdded(item, index, count, manual);
        }

        ;
        public async ValueTask OnItemAddedRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnItemAddedCreateDeferredDelegate(item, index, count, manual), nameof(OnItemAdded));
            }

            await OnItemAddedRun(item, index, count, manual);
        }

        public async ValueTask OnItemAddedRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 7);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnItemAdded)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnItemAddedImpl(item, index, count, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnBeforeItemRemovedRunMaster(item, index, count, manual).AsTask();
                else
                    return OnBeforeItemRemovedRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.OnBeforeItemRemoved(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.EntitySystem.PropertyAddress>> OnBeforeItemRemovedCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return OnBeforeItemRemoved(item, index, count, manual);
        }

        ;
        public async ValueTask<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemovedRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnBeforeItemRemovedCreateDeferredDelegate(item, index, count, manual), nameof(OnBeforeItemRemoved));
            }

            return await OnBeforeItemRemovedRun(item, index, count, manual);
        }

        public async ValueTask<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemovedRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 8);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnBeforeItemRemoved)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnBeforeItemRemovedImpl(item, index, count, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer;
        public async Task OnItemAddedToContainerInvoke(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (ItemAddedToContainer == null)
                return;
            foreach (var subscriber in ItemAddedToContainer.GetInvocationList().Cast<System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task>>())
            {
                try
                {
                    using (var cts = new CancellationTokenSource())
                    {
                        var __timeoutTask__ = Task.Delay(TimeSpan.FromSeconds(ServerCoreRuntimeParameters.EntityEventTimeoutSeconds), cts.Token);
                        var __subscriberTask__ = subscriber(arg1, arg2, arg3, arg4);
                        await Task.WhenAny(__subscriberTask__, __timeoutTask__);
                        if (!__subscriberTask__.IsCompleted)
                        {
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} timeout: {3}", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds).Write();
                            var __sw__ = new System.Diagnostics.Stopwatch();
                            __sw__.Start();
                            await __subscriberTask__;
                            __sw__.Stop();
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} executing too long: {3} seconds", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds + __sw__.Elapsed.TotalSeconds).Write();
                        }
                        else
                        {
                            cts.Cancel();
                            if (__subscriberTask__.IsFaulted)
                                Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(__subscriberTask__.Exception, "Exception in {0} process event obj {1} method {2}", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                        }
                    }
                }
                catch (Exception e)
                {
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(e, "Exception in {0} event obj {1} method {2}", nameof(ItemAddedToContainer), subscriber?.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                }
                finally
                {
                    GeneratedCode.Manual.Repositories.AsyncStackHolder.AssertNoChildren();
                }
            }
        }

        public async Task OnItemAddedToContainer(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (this.IsMaster())
            {
                GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 9);
                INetworkProxy[] __networkProxies__ = this.GatherMessageTargets(SharedCode.EntitySystem.ReplicationLevel.ClientFull, typeof(SharedCode.DeltaObjects.IContainer), 9).ToArray();
                if (__networkProxies__.Length > 0)
                    await SendFuncs.OnItemAddedToContainer(arg1, arg2, arg3, arg4, this, __networkProxies__, this.EntitiesRepository, GetActualMigratingId());
            }

            await OnItemAddedToContainerInvoke(arg1, arg2, arg3, arg4);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer;
        public async Task OnItemRemovedToContainerInvoke(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (ItemRemovedToContainer == null)
                return;
            foreach (var subscriber in ItemRemovedToContainer.GetInvocationList().Cast<System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task>>())
            {
                try
                {
                    using (var cts = new CancellationTokenSource())
                    {
                        var __timeoutTask__ = Task.Delay(TimeSpan.FromSeconds(ServerCoreRuntimeParameters.EntityEventTimeoutSeconds), cts.Token);
                        var __subscriberTask__ = subscriber(arg1, arg2, arg3, arg4);
                        await Task.WhenAny(__subscriberTask__, __timeoutTask__);
                        if (!__subscriberTask__.IsCompleted)
                        {
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} timeout: {3}", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds).Write();
                            var __sw__ = new System.Diagnostics.Stopwatch();
                            __sw__.Start();
                            await __subscriberTask__;
                            __sw__.Stop();
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} executing too long: {3} seconds", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds + __sw__.Elapsed.TotalSeconds).Write();
                        }
                        else
                        {
                            cts.Cancel();
                            if (__subscriberTask__.IsFaulted)
                                Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(__subscriberTask__.Exception, "Exception in {0} process event obj {1} method {2}", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                        }
                    }
                }
                catch (Exception e)
                {
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(e, "Exception in {0} event obj {1} method {2}", nameof(ItemRemovedToContainer), subscriber?.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                }
                finally
                {
                    GeneratedCode.Manual.Repositories.AsyncStackHolder.AssertNoChildren();
                }
            }
        }

        public async Task OnItemRemovedToContainer(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (this.IsMaster())
            {
                GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IContainer), 10);
                INetworkProxy[] __networkProxies__ = this.GatherMessageTargets(SharedCode.EntitySystem.ReplicationLevel.ClientFull, typeof(SharedCode.DeltaObjects.IContainer), 10).ToArray();
                if (__networkProxies__.Length > 0)
                    await SendFuncs.OnItemRemovedToContainer(arg1, arg2, arg3, arg4, this, __networkProxies__, this.EntitiesRepository, GetActualMigratingId());
            }

            await OnItemRemovedToContainerInvoke(arg1, arg2, arg3, arg4);
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class BuildingContainer
    {
        public Task<float> GetMaxWeigth()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return GetMaxWeigthRunMaster().AsTask();
            else
                return GetMaxWeigthRun().AsTask();
        }

        private Func<Task<float>> GetMaxWeigthCreateDeferredDelegate() => () =>
        {
            return GetMaxWeigth();
        }

        ;
        public async ValueTask<float> GetMaxWeigthRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetMaxWeigthCreateDeferredDelegate(), nameof(GetMaxWeigth));
            }

            return await GetMaxWeigthRun();
        }

        public async Task<float> GetMaxWeigthRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 0);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetMaxWeigthImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<float> GetTotalWeight()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.NeedDeferredRpcOnMigrating())
                return GetTotalWeightRunMaster().AsTask();
            else
                return GetTotalWeightRun().AsTask();
        }

        private Func<Task<float>> GetTotalWeightCreateDeferredDelegate() => () =>
        {
            return GetTotalWeight();
        }

        ;
        public async ValueTask<float> GetTotalWeightRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetTotalWeightCreateDeferredDelegate(), nameof(GetTotalWeight));
            }

            return await GetTotalWeightRun();
        }

        public async Task<float> GetTotalWeightRun()
        {
            this.CheckValidateEntityInAsyncContext();
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 1);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetTotalWeightImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            if (this.NeedDeferredRpcOnMigrating())
                return GetMaxStackForSlotRunMaster(destinationSlot).AsTask();
            else
                return GetMaxStackForSlotRun(destinationSlot).AsTask();
        }

        private Func<Task<int>> GetMaxStackForSlotCreateDeferredDelegate(int destinationSlot) => () =>
        {
            return GetMaxStackForSlot(destinationSlot);
        }

        ;
        public async ValueTask<int> GetMaxStackForSlotRunMaster(int destinationSlot)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetMaxStackForSlotCreateDeferredDelegate(destinationSlot), nameof(GetMaxStackForSlot));
            }

            return await GetMaxStackForSlotRun(destinationSlot);
        }

        public async Task<int> GetMaxStackForSlotRun(int destinationSlot)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 2);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetMaxStackForSlotImpl(destinationSlot);
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> IgnoreMaxStack()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return IgnoreMaxStackRunMaster().AsTask();
            else
                return IgnoreMaxStackRun().AsTask();
        }

        private Func<Task<bool>> IgnoreMaxStackCreateDeferredDelegate() => () =>
        {
            return IgnoreMaxStack();
        }

        ;
        public async ValueTask<bool> IgnoreMaxStackRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(IgnoreMaxStackCreateDeferredDelegate(), nameof(IgnoreMaxStack));
            }

            return await IgnoreMaxStackRun();
        }

        public async Task<bool> IgnoreMaxStackRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 3);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await IgnoreMaxStackImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return CanAutoselectEmptySlotsForAddStacksRunMaster().AsTask();
            else
                return CanAutoselectEmptySlotsForAddStacksRun().AsTask();
        }

        private Func<Task<bool>> CanAutoselectEmptySlotsForAddStacksCreateDeferredDelegate() => () =>
        {
            return CanAutoselectEmptySlotsForAddStacks();
        }

        ;
        public async ValueTask<bool> CanAutoselectEmptySlotsForAddStacksRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanAutoselectEmptySlotsForAddStacksCreateDeferredDelegate(), nameof(CanAutoselectEmptySlotsForAddStacks));
            }

            return await CanAutoselectEmptySlotsForAddStacksRun();
        }

        public async Task<bool> CanAutoselectEmptySlotsForAddStacksRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 4);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await CanAutoselectEmptySlotsForAddStacksImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanAdd(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CanAddRunMaster(item, index, count, manual).AsTask();
                else
                    return CanAddRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.CanAdd(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CanAddCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return CanAdd(item, index, count, manual);
        }

        ;
        public async ValueTask<bool> CanAddRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanAddCreateDeferredDelegate(item, index, count, manual), nameof(CanAdd));
            }

            return await CanAddRun(item, index, count, manual);
        }

        public async ValueTask<bool> CanAddRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 5);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CanAddImpl(item, index, count, manual);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanRemove(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CanRemoveRunMaster(item, index, count, manual).AsTask();
                else
                    return CanRemoveRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.CanRemove(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CanRemoveCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return CanRemove(item, index, count, manual);
        }

        ;
        public async ValueTask<bool> CanRemoveRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanRemoveCreateDeferredDelegate(item, index, count, manual), nameof(CanRemove));
            }

            return await CanRemoveRun(item, index, count, manual);
        }

        public async ValueTask<bool> CanRemoveRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 6);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CanRemoveImpl(item, index, count, manual);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task OnItemAdded(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnItemAddedRunMaster(item, index, count, manual).AsTask();
                else
                    return OnItemAddedRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.OnItemAdded(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> OnItemAddedCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return OnItemAdded(item, index, count, manual);
        }

        ;
        public async ValueTask OnItemAddedRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnItemAddedCreateDeferredDelegate(item, index, count, manual), nameof(OnItemAdded));
            }

            await OnItemAddedRun(item, index, count, manual);
        }

        public async ValueTask OnItemAddedRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 7);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnItemAdded)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnItemAddedImpl(item, index, count, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnBeforeItemRemovedRunMaster(item, index, count, manual).AsTask();
                else
                    return OnBeforeItemRemovedRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.OnBeforeItemRemoved(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.EntitySystem.PropertyAddress>> OnBeforeItemRemovedCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return OnBeforeItemRemoved(item, index, count, manual);
        }

        ;
        public async ValueTask<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemovedRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnBeforeItemRemovedCreateDeferredDelegate(item, index, count, manual), nameof(OnBeforeItemRemoved));
            }

            return await OnBeforeItemRemovedRun(item, index, count, manual);
        }

        public async ValueTask<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemovedRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 8);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnBeforeItemRemoved)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnBeforeItemRemovedImpl(item, index, count, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer;
        public async Task OnItemAddedToContainerInvoke(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (ItemAddedToContainer == null)
                return;
            foreach (var subscriber in ItemAddedToContainer.GetInvocationList().Cast<System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task>>())
            {
                try
                {
                    using (var cts = new CancellationTokenSource())
                    {
                        var __timeoutTask__ = Task.Delay(TimeSpan.FromSeconds(ServerCoreRuntimeParameters.EntityEventTimeoutSeconds), cts.Token);
                        var __subscriberTask__ = subscriber(arg1, arg2, arg3, arg4);
                        await Task.WhenAny(__subscriberTask__, __timeoutTask__);
                        if (!__subscriberTask__.IsCompleted)
                        {
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} timeout: {3}", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds).Write();
                            var __sw__ = new System.Diagnostics.Stopwatch();
                            __sw__.Start();
                            await __subscriberTask__;
                            __sw__.Stop();
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} executing too long: {3} seconds", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds + __sw__.Elapsed.TotalSeconds).Write();
                        }
                        else
                        {
                            cts.Cancel();
                            if (__subscriberTask__.IsFaulted)
                                Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(__subscriberTask__.Exception, "Exception in {0} process event obj {1} method {2}", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                        }
                    }
                }
                catch (Exception e)
                {
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(e, "Exception in {0} event obj {1} method {2}", nameof(ItemAddedToContainer), subscriber?.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                }
                finally
                {
                    GeneratedCode.Manual.Repositories.AsyncStackHolder.AssertNoChildren();
                }
            }
        }

        public async Task OnItemAddedToContainer(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (this.IsMaster())
            {
                GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 9);
                INetworkProxy[] __networkProxies__ = this.GatherMessageTargets(SharedCode.EntitySystem.ReplicationLevel.ClientFull, typeof(SharedCode.DeltaObjects.IBuildingContainer), 9).ToArray();
                if (__networkProxies__.Length > 0)
                    await SendFuncs.OnItemAddedToContainer(arg1, arg2, arg3, arg4, this, __networkProxies__, this.EntitiesRepository, GetActualMigratingId());
            }

            await OnItemAddedToContainerInvoke(arg1, arg2, arg3, arg4);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer;
        public async Task OnItemRemovedToContainerInvoke(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (ItemRemovedToContainer == null)
                return;
            foreach (var subscriber in ItemRemovedToContainer.GetInvocationList().Cast<System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task>>())
            {
                try
                {
                    using (var cts = new CancellationTokenSource())
                    {
                        var __timeoutTask__ = Task.Delay(TimeSpan.FromSeconds(ServerCoreRuntimeParameters.EntityEventTimeoutSeconds), cts.Token);
                        var __subscriberTask__ = subscriber(arg1, arg2, arg3, arg4);
                        await Task.WhenAny(__subscriberTask__, __timeoutTask__);
                        if (!__subscriberTask__.IsCompleted)
                        {
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} timeout: {3}", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds).Write();
                            var __sw__ = new System.Diagnostics.Stopwatch();
                            __sw__.Start();
                            await __subscriberTask__;
                            __sw__.Stop();
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} executing too long: {3} seconds", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds + __sw__.Elapsed.TotalSeconds).Write();
                        }
                        else
                        {
                            cts.Cancel();
                            if (__subscriberTask__.IsFaulted)
                                Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(__subscriberTask__.Exception, "Exception in {0} process event obj {1} method {2}", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                        }
                    }
                }
                catch (Exception e)
                {
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(e, "Exception in {0} event obj {1} method {2}", nameof(ItemRemovedToContainer), subscriber?.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                }
                finally
                {
                    GeneratedCode.Manual.Repositories.AsyncStackHolder.AssertNoChildren();
                }
            }
        }

        public async Task OnItemRemovedToContainer(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (this.IsMaster())
            {
                GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IBuildingContainer), 10);
                INetworkProxy[] __networkProxies__ = this.GatherMessageTargets(SharedCode.EntitySystem.ReplicationLevel.ClientFull, typeof(SharedCode.DeltaObjects.IBuildingContainer), 10).ToArray();
                if (__networkProxies__.Length > 0)
                    await SendFuncs.OnItemRemovedToContainer(arg1, arg2, arg3, arg4, this, __networkProxies__, this.EntitiesRepository, GetActualMigratingId());
            }

            await OnItemRemovedToContainerInvoke(arg1, arg2, arg3, arg4);
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class MachineOutputContainer
    {
        public Task<float> GetMaxWeigth()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return GetMaxWeigthRunMaster().AsTask();
            else
                return GetMaxWeigthRun().AsTask();
        }

        private Func<Task<float>> GetMaxWeigthCreateDeferredDelegate() => () =>
        {
            return GetMaxWeigth();
        }

        ;
        public async ValueTask<float> GetMaxWeigthRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetMaxWeigthCreateDeferredDelegate(), nameof(GetMaxWeigth));
            }

            return await GetMaxWeigthRun();
        }

        public async Task<float> GetMaxWeigthRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 0);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetMaxWeigthImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<float> GetTotalWeight()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.NeedDeferredRpcOnMigrating())
                return GetTotalWeightRunMaster().AsTask();
            else
                return GetTotalWeightRun().AsTask();
        }

        private Func<Task<float>> GetTotalWeightCreateDeferredDelegate() => () =>
        {
            return GetTotalWeight();
        }

        ;
        public async ValueTask<float> GetTotalWeightRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetTotalWeightCreateDeferredDelegate(), nameof(GetTotalWeight));
            }

            return await GetTotalWeightRun();
        }

        public async Task<float> GetTotalWeightRun()
        {
            this.CheckValidateEntityInAsyncContext();
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 1);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetTotalWeightImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            if (this.NeedDeferredRpcOnMigrating())
                return GetMaxStackForSlotRunMaster(destinationSlot).AsTask();
            else
                return GetMaxStackForSlotRun(destinationSlot).AsTask();
        }

        private Func<Task<int>> GetMaxStackForSlotCreateDeferredDelegate(int destinationSlot) => () =>
        {
            return GetMaxStackForSlot(destinationSlot);
        }

        ;
        public async ValueTask<int> GetMaxStackForSlotRunMaster(int destinationSlot)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetMaxStackForSlotCreateDeferredDelegate(destinationSlot), nameof(GetMaxStackForSlot));
            }

            return await GetMaxStackForSlotRun(destinationSlot);
        }

        public async Task<int> GetMaxStackForSlotRun(int destinationSlot)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 2);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetMaxStackForSlotImpl(destinationSlot);
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> IgnoreMaxStack()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return IgnoreMaxStackRunMaster().AsTask();
            else
                return IgnoreMaxStackRun().AsTask();
        }

        private Func<Task<bool>> IgnoreMaxStackCreateDeferredDelegate() => () =>
        {
            return IgnoreMaxStack();
        }

        ;
        public async ValueTask<bool> IgnoreMaxStackRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(IgnoreMaxStackCreateDeferredDelegate(), nameof(IgnoreMaxStack));
            }

            return await IgnoreMaxStackRun();
        }

        public async Task<bool> IgnoreMaxStackRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 3);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await IgnoreMaxStackImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return CanAutoselectEmptySlotsForAddStacksRunMaster().AsTask();
            else
                return CanAutoselectEmptySlotsForAddStacksRun().AsTask();
        }

        private Func<Task<bool>> CanAutoselectEmptySlotsForAddStacksCreateDeferredDelegate() => () =>
        {
            return CanAutoselectEmptySlotsForAddStacks();
        }

        ;
        public async ValueTask<bool> CanAutoselectEmptySlotsForAddStacksRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanAutoselectEmptySlotsForAddStacksCreateDeferredDelegate(), nameof(CanAutoselectEmptySlotsForAddStacks));
            }

            return await CanAutoselectEmptySlotsForAddStacksRun();
        }

        public async Task<bool> CanAutoselectEmptySlotsForAddStacksRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 4);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await CanAutoselectEmptySlotsForAddStacksImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanAdd(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CanAddRunMaster(item, index, count, manual).AsTask();
                else
                    return CanAddRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.CanAdd(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CanAddCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return CanAdd(item, index, count, manual);
        }

        ;
        public async ValueTask<bool> CanAddRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanAddCreateDeferredDelegate(item, index, count, manual), nameof(CanAdd));
            }

            return await CanAddRun(item, index, count, manual);
        }

        public async ValueTask<bool> CanAddRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 5);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CanAddImpl(item, index, count, manual);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanRemove(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CanRemoveRunMaster(item, index, count, manual).AsTask();
                else
                    return CanRemoveRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.CanRemove(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CanRemoveCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return CanRemove(item, index, count, manual);
        }

        ;
        public async ValueTask<bool> CanRemoveRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanRemoveCreateDeferredDelegate(item, index, count, manual), nameof(CanRemove));
            }

            return await CanRemoveRun(item, index, count, manual);
        }

        public async ValueTask<bool> CanRemoveRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 6);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CanRemoveImpl(item, index, count, manual);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task OnItemAdded(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnItemAddedRunMaster(item, index, count, manual).AsTask();
                else
                    return OnItemAddedRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.OnItemAdded(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> OnItemAddedCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return OnItemAdded(item, index, count, manual);
        }

        ;
        public async ValueTask OnItemAddedRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnItemAddedCreateDeferredDelegate(item, index, count, manual), nameof(OnItemAdded));
            }

            await OnItemAddedRun(item, index, count, manual);
        }

        public async ValueTask OnItemAddedRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 7);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnItemAdded)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnItemAddedImpl(item, index, count, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnBeforeItemRemovedRunMaster(item, index, count, manual).AsTask();
                else
                    return OnBeforeItemRemovedRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.OnBeforeItemRemoved(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.EntitySystem.PropertyAddress>> OnBeforeItemRemovedCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return OnBeforeItemRemoved(item, index, count, manual);
        }

        ;
        public async ValueTask<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemovedRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnBeforeItemRemovedCreateDeferredDelegate(item, index, count, manual), nameof(OnBeforeItemRemoved));
            }

            return await OnBeforeItemRemovedRun(item, index, count, manual);
        }

        public async ValueTask<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemovedRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 8);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnBeforeItemRemoved)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnBeforeItemRemovedImpl(item, index, count, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer;
        public async Task OnItemAddedToContainerInvoke(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (ItemAddedToContainer == null)
                return;
            foreach (var subscriber in ItemAddedToContainer.GetInvocationList().Cast<System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task>>())
            {
                try
                {
                    using (var cts = new CancellationTokenSource())
                    {
                        var __timeoutTask__ = Task.Delay(TimeSpan.FromSeconds(ServerCoreRuntimeParameters.EntityEventTimeoutSeconds), cts.Token);
                        var __subscriberTask__ = subscriber(arg1, arg2, arg3, arg4);
                        await Task.WhenAny(__subscriberTask__, __timeoutTask__);
                        if (!__subscriberTask__.IsCompleted)
                        {
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} timeout: {3}", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds).Write();
                            var __sw__ = new System.Diagnostics.Stopwatch();
                            __sw__.Start();
                            await __subscriberTask__;
                            __sw__.Stop();
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} executing too long: {3} seconds", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds + __sw__.Elapsed.TotalSeconds).Write();
                        }
                        else
                        {
                            cts.Cancel();
                            if (__subscriberTask__.IsFaulted)
                                Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(__subscriberTask__.Exception, "Exception in {0} process event obj {1} method {2}", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                        }
                    }
                }
                catch (Exception e)
                {
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(e, "Exception in {0} event obj {1} method {2}", nameof(ItemAddedToContainer), subscriber?.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                }
                finally
                {
                    GeneratedCode.Manual.Repositories.AsyncStackHolder.AssertNoChildren();
                }
            }
        }

        public async Task OnItemAddedToContainer(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (this.IsMaster())
            {
                GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 9);
                INetworkProxy[] __networkProxies__ = this.GatherMessageTargets(SharedCode.EntitySystem.ReplicationLevel.ClientFull, typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 9).ToArray();
                if (__networkProxies__.Length > 0)
                    await SendFuncs.OnItemAddedToContainer(arg1, arg2, arg3, arg4, this, __networkProxies__, this.EntitiesRepository, GetActualMigratingId());
            }

            await OnItemAddedToContainerInvoke(arg1, arg2, arg3, arg4);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer;
        public async Task OnItemRemovedToContainerInvoke(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (ItemRemovedToContainer == null)
                return;
            foreach (var subscriber in ItemRemovedToContainer.GetInvocationList().Cast<System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task>>())
            {
                try
                {
                    using (var cts = new CancellationTokenSource())
                    {
                        var __timeoutTask__ = Task.Delay(TimeSpan.FromSeconds(ServerCoreRuntimeParameters.EntityEventTimeoutSeconds), cts.Token);
                        var __subscriberTask__ = subscriber(arg1, arg2, arg3, arg4);
                        await Task.WhenAny(__subscriberTask__, __timeoutTask__);
                        if (!__subscriberTask__.IsCompleted)
                        {
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} timeout: {3}", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds).Write();
                            var __sw__ = new System.Diagnostics.Stopwatch();
                            __sw__.Start();
                            await __subscriberTask__;
                            __sw__.Stop();
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} executing too long: {3} seconds", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds + __sw__.Elapsed.TotalSeconds).Write();
                        }
                        else
                        {
                            cts.Cancel();
                            if (__subscriberTask__.IsFaulted)
                                Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(__subscriberTask__.Exception, "Exception in {0} process event obj {1} method {2}", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                        }
                    }
                }
                catch (Exception e)
                {
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(e, "Exception in {0} event obj {1} method {2}", nameof(ItemRemovedToContainer), subscriber?.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                }
                finally
                {
                    GeneratedCode.Manual.Repositories.AsyncStackHolder.AssertNoChildren();
                }
            }
        }

        public async Task OnItemRemovedToContainer(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (this.IsMaster())
            {
                GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 10);
                INetworkProxy[] __networkProxies__ = this.GatherMessageTargets(SharedCode.EntitySystem.ReplicationLevel.ClientFull, typeof(SharedCode.DeltaObjects.IMachineOutputContainer), 10).ToArray();
                if (__networkProxies__.Length > 0)
                    await SendFuncs.OnItemRemovedToContainer(arg1, arg2, arg3, arg4, this, __networkProxies__, this.EntitiesRepository, GetActualMigratingId());
            }

            await OnItemRemovedToContainerInvoke(arg1, arg2, arg3, arg4);
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class MachineFuelContainer
    {
        public Task<float> GetMaxWeigth()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return GetMaxWeigthRunMaster().AsTask();
            else
                return GetMaxWeigthRun().AsTask();
        }

        private Func<Task<float>> GetMaxWeigthCreateDeferredDelegate() => () =>
        {
            return GetMaxWeigth();
        }

        ;
        public async ValueTask<float> GetMaxWeigthRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetMaxWeigthCreateDeferredDelegate(), nameof(GetMaxWeigth));
            }

            return await GetMaxWeigthRun();
        }

        public async Task<float> GetMaxWeigthRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 0);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetMaxWeigthImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<float> GetTotalWeight()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.NeedDeferredRpcOnMigrating())
                return GetTotalWeightRunMaster().AsTask();
            else
                return GetTotalWeightRun().AsTask();
        }

        private Func<Task<float>> GetTotalWeightCreateDeferredDelegate() => () =>
        {
            return GetTotalWeight();
        }

        ;
        public async ValueTask<float> GetTotalWeightRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetTotalWeightCreateDeferredDelegate(), nameof(GetTotalWeight));
            }

            return await GetTotalWeightRun();
        }

        public async Task<float> GetTotalWeightRun()
        {
            this.CheckValidateEntityInAsyncContext();
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 1);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetTotalWeightImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<int> GetMaxStackForSlot(int destinationSlot)
        {
            if (this.NeedDeferredRpcOnMigrating())
                return GetMaxStackForSlotRunMaster(destinationSlot).AsTask();
            else
                return GetMaxStackForSlotRun(destinationSlot).AsTask();
        }

        private Func<Task<int>> GetMaxStackForSlotCreateDeferredDelegate(int destinationSlot) => () =>
        {
            return GetMaxStackForSlot(destinationSlot);
        }

        ;
        public async ValueTask<int> GetMaxStackForSlotRunMaster(int destinationSlot)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetMaxStackForSlotCreateDeferredDelegate(destinationSlot), nameof(GetMaxStackForSlot));
            }

            return await GetMaxStackForSlotRun(destinationSlot);
        }

        public async Task<int> GetMaxStackForSlotRun(int destinationSlot)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 2);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await GetMaxStackForSlotImpl(destinationSlot);
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> IgnoreMaxStack()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return IgnoreMaxStackRunMaster().AsTask();
            else
                return IgnoreMaxStackRun().AsTask();
        }

        private Func<Task<bool>> IgnoreMaxStackCreateDeferredDelegate() => () =>
        {
            return IgnoreMaxStack();
        }

        ;
        public async ValueTask<bool> IgnoreMaxStackRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(IgnoreMaxStackCreateDeferredDelegate(), nameof(IgnoreMaxStack));
            }

            return await IgnoreMaxStackRun();
        }

        public async Task<bool> IgnoreMaxStackRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 3);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await IgnoreMaxStackImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanAutoselectEmptySlotsForAddStacks()
        {
            if (this.NeedDeferredRpcOnMigrating())
                return CanAutoselectEmptySlotsForAddStacksRunMaster().AsTask();
            else
                return CanAutoselectEmptySlotsForAddStacksRun().AsTask();
        }

        private Func<Task<bool>> CanAutoselectEmptySlotsForAddStacksCreateDeferredDelegate() => () =>
        {
            return CanAutoselectEmptySlotsForAddStacks();
        }

        ;
        public async ValueTask<bool> CanAutoselectEmptySlotsForAddStacksRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanAutoselectEmptySlotsForAddStacksCreateDeferredDelegate(), nameof(CanAutoselectEmptySlotsForAddStacks));
            }

            return await CanAutoselectEmptySlotsForAddStacksRun();
        }

        public async Task<bool> CanAutoselectEmptySlotsForAddStacksRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 4);
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                try
                {
                    return await CanAutoselectEmptySlotsForAddStacksImpl();
                }
                finally
                {
                    ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanAdd(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CanAddRunMaster(item, index, count, manual).AsTask();
                else
                    return CanAddRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.CanAdd(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CanAddCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return CanAdd(item, index, count, manual);
        }

        ;
        public async ValueTask<bool> CanAddRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanAddCreateDeferredDelegate(item, index, count, manual), nameof(CanAdd));
            }

            return await CanAddRun(item, index, count, manual);
        }

        public async ValueTask<bool> CanAddRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 5);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CanAddImpl(item, index, count, manual);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CanRemove(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CanRemoveRunMaster(item, index, count, manual).AsTask();
                else
                    return CanRemoveRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.CanRemove(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CanRemoveCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return CanRemove(item, index, count, manual);
        }

        ;
        public async ValueTask<bool> CanRemoveRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CanRemoveCreateDeferredDelegate(item, index, count, manual), nameof(CanRemove));
            }

            return await CanRemoveRun(item, index, count, manual);
        }

        public async ValueTask<bool> CanRemoveRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 6);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CanRemoveImpl(item, index, count, manual);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task OnItemAdded(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnItemAddedRunMaster(item, index, count, manual).AsTask();
                else
                    return OnItemAddedRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.OnItemAdded(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> OnItemAddedCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return OnItemAdded(item, index, count, manual);
        }

        ;
        public async ValueTask OnItemAddedRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnItemAddedCreateDeferredDelegate(item, index, count, manual), nameof(OnItemAdded));
            }

            await OnItemAddedRun(item, index, count, manual);
        }

        public async ValueTask OnItemAddedRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 7);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnItemAdded)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnItemAddedImpl(item, index, count, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnBeforeItemRemovedRunMaster(item, index, count, manual).AsTask();
                else
                    return OnBeforeItemRemovedRun(item, index, count, manual).AsTask();
            else
                return SendFuncs.OnBeforeItemRemoved(item, index, count, manual, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.EntitySystem.PropertyAddress>> OnBeforeItemRemovedCreateDeferredDelegate(SharedCode.Entities.IItem item, int index, int count, bool manual) => () =>
        {
            return OnBeforeItemRemoved(item, index, count, manual);
        }

        ;
        public async ValueTask<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemovedRunMaster(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnBeforeItemRemovedCreateDeferredDelegate(item, index, count, manual), nameof(OnBeforeItemRemoved));
            }

            return await OnBeforeItemRemovedRun(item, index, count, manual);
        }

        public async ValueTask<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemovedRun(SharedCode.Entities.IItem item, int index, int count, bool manual)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 8);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnBeforeItemRemoved)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnBeforeItemRemovedImpl(item, index, count, manual);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer;
        public async Task OnItemAddedToContainerInvoke(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (ItemAddedToContainer == null)
                return;
            foreach (var subscriber in ItemAddedToContainer.GetInvocationList().Cast<System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task>>())
            {
                try
                {
                    using (var cts = new CancellationTokenSource())
                    {
                        var __timeoutTask__ = Task.Delay(TimeSpan.FromSeconds(ServerCoreRuntimeParameters.EntityEventTimeoutSeconds), cts.Token);
                        var __subscriberTask__ = subscriber(arg1, arg2, arg3, arg4);
                        await Task.WhenAny(__subscriberTask__, __timeoutTask__);
                        if (!__subscriberTask__.IsCompleted)
                        {
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} timeout: {3}", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds).Write();
                            var __sw__ = new System.Diagnostics.Stopwatch();
                            __sw__.Start();
                            await __subscriberTask__;
                            __sw__.Stop();
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} executing too long: {3} seconds", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds + __sw__.Elapsed.TotalSeconds).Write();
                        }
                        else
                        {
                            cts.Cancel();
                            if (__subscriberTask__.IsFaulted)
                                Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(__subscriberTask__.Exception, "Exception in {0} process event obj {1} method {2}", nameof(ItemAddedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                        }
                    }
                }
                catch (Exception e)
                {
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(e, "Exception in {0} event obj {1} method {2}", nameof(ItemAddedToContainer), subscriber?.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                }
                finally
                {
                    GeneratedCode.Manual.Repositories.AsyncStackHolder.AssertNoChildren();
                }
            }
        }

        public async Task OnItemAddedToContainer(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (this.IsMaster())
            {
                GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 9);
                INetworkProxy[] __networkProxies__ = this.GatherMessageTargets(SharedCode.EntitySystem.ReplicationLevel.ClientFull, typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 9).ToArray();
                if (__networkProxies__.Length > 0)
                    await SendFuncs.OnItemAddedToContainer(arg1, arg2, arg3, arg4, this, __networkProxies__, this.EntitiesRepository, GetActualMigratingId());
            }

            await OnItemAddedToContainerInvoke(arg1, arg2, arg3, arg4);
        }

        public event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer;
        public async Task OnItemRemovedToContainerInvoke(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (ItemRemovedToContainer == null)
                return;
            foreach (var subscriber in ItemRemovedToContainer.GetInvocationList().Cast<System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task>>())
            {
                try
                {
                    using (var cts = new CancellationTokenSource())
                    {
                        var __timeoutTask__ = Task.Delay(TimeSpan.FromSeconds(ServerCoreRuntimeParameters.EntityEventTimeoutSeconds), cts.Token);
                        var __subscriberTask__ = subscriber(arg1, arg2, arg3, arg4);
                        await Task.WhenAny(__subscriberTask__, __timeoutTask__);
                        if (!__subscriberTask__.IsCompleted)
                        {
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} timeout: {3}", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds).Write();
                            var __sw__ = new System.Diagnostics.Stopwatch();
                            __sw__.Start();
                            await __subscriberTask__;
                            __sw__.Stop();
                            Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("{0} process event obj {1} method {2} executing too long: {3} seconds", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown", ServerCoreRuntimeParameters.EntityEventTimeoutSeconds + __sw__.Elapsed.TotalSeconds).Write();
                        }
                        else
                        {
                            cts.Cancel();
                            if (__subscriberTask__.IsFaulted)
                                Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(__subscriberTask__.Exception, "Exception in {0} process event obj {1} method {2}", nameof(ItemRemovedToContainer), subscriber.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                        }
                    }
                }
                catch (Exception e)
                {
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message(e, "Exception in {0} event obj {1} method {2}", nameof(ItemRemovedToContainer), subscriber?.Target?.GetType().Name ?? "unknown", subscriber?.Method.Name ?? "unknown").Write();
                }
                finally
                {
                    GeneratedCode.Manual.Repositories.AsyncStackHolder.AssertNoChildren();
                }
            }
        }

        public async Task OnItemRemovedToContainer(SharedCode.Aspects.Item.Templates.BaseItemResource arg1, int arg2, int arg3, bool arg4)
        {
            if (this.IsMaster())
            {
                GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 10);
                INetworkProxy[] __networkProxies__ = this.GatherMessageTargets(SharedCode.EntitySystem.ReplicationLevel.ClientFull, typeof(SharedCode.DeltaObjects.IMachineFuelContainer), 10).ToArray();
                if (__networkProxies__.Length > 0)
                    await SendFuncs.OnItemRemovedToContainer(arg1, arg2, arg3, arg4, this, __networkProxies__, this.EntitiesRepository, GetActualMigratingId());
            }

            await OnItemRemovedToContainerInvoke(arg1, arg2, arg3, arg4);
        }
    }
}