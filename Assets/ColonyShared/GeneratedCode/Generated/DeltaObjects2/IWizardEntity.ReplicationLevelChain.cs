// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Entities.Service;
using SharedCode.EntitySystem.ChainCalls;
using SharedCode.Logging;
using SharedCode.OurSimpleIoC;
using SharedCode.Serializers;
using SharedCode.Utils;
using System.Linq;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using GeneratedCode.DeltaObjects.Chain;

[GeneratedCode("CodeGen", "1.0")]
public class WizardEntityAlwaysChainProxy : IChainedEntity
{
    private WizardEntityChainProxy __chain__;
    public WizardEntityAlwaysChainProxy(WizardEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WizardEntityAlwaysChainProxy LocalUpdateTimeLineData()
    {
        __chain__.LocalUpdateTimeLineData();
        return this;
    }

    public WizardEntityAlwaysChainProxy CheckSpellCastPredicates(ChainArgument<long> currentTime, ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef>> failedPredicates, ChainArgument<Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef> predicateIgnoreGroupDef)
    {
        __chain__.CheckSpellCastPredicates(currentTime, spell, failedPredicates, predicateIgnoreGroupDef);
        return this;
    }

    public WizardEntityAlwaysChainProxy HasSpellsPreventingThisFromStart(ChainArgument<SharedCode.Wizardry.SpellCast> spell)
    {
        __chain__.HasSpellsPreventingThisFromStart(spell);
        return this;
    }

    public WizardEntityAlwaysChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell)
    {
        __chain__.CastSpell(spell);
        return this;
    }

    public WizardEntityAlwaysChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<SharedCode.Wizardry.SpellId> clientSpellId)
    {
        __chain__.CastSpell(spell, clientSpellId);
        return this;
    }

    public WizardEntityAlwaysChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<SharedCode.Wizardry.SpellId> clientSpellId, ChainArgument<SharedCode.Wizardry.SpellId> prevSpell)
    {
        __chain__.CastSpell(spell, clientSpellId, prevSpell);
        return this;
    }

    public WizardEntityAlwaysChainProxy Update()
    {
        __chain__.Update();
        return this;
    }

    public WizardEntityAlwaysChainProxy Update(ChainArgument<SharedCode.Wizardry.SpellId> spellId)
    {
        __chain__.Update(spellId);
        return this;
    }

    public WizardEntityAlwaysChainProxy GetDebugData()
    {
        __chain__.GetDebugData();
        return this;
    }

    public WizardEntityAlwaysChainProxy WizardHasDied()
    {
        __chain__.WizardHasDied();
        return this;
    }

    public WizardEntityAlwaysChainProxy WizardHasRisen()
    {
        __chain__.WizardHasRisen();
        return this;
    }

    public WizardEntityAlwaysChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WizardEntityAlwaysChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WizardEntityAlwaysChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WizardEntityAlwaysChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityAlways entity)
    {
        return new WizardEntityAlwaysChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject()));
    }

    public static WizardEntityAlwaysChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityAlways entity, IChainedEntity fromChain)
    {
        return new WizardEntityAlwaysChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class WizardEntityClientBroadcastChainProxy : IChainedEntity
{
    private WizardEntityChainProxy __chain__;
    public WizardEntityClientBroadcastChainProxy(WizardEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WizardEntityClientBroadcastChainProxy HasActiveSpell(ChainArgument<SharedCode.Wizardry.SpellDef> spell)
    {
        __chain__.HasActiveSpell(spell);
        return this;
    }

    public WizardEntityClientBroadcastChainProxy HasActiveSpellGroup(ChainArgument<SharedCode.Wizardry.SpellGroupDef> group)
    {
        __chain__.HasActiveSpellGroup(group);
        return this;
    }

    public WizardEntityClientBroadcastChainProxy LocalUpdateTimeLineData()
    {
        __chain__.LocalUpdateTimeLineData();
        return this;
    }

    public WizardEntityClientBroadcastChainProxy CheckSpellCastPredicates(ChainArgument<long> currentTime, ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef>> failedPredicates, ChainArgument<Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef> predicateIgnoreGroupDef)
    {
        __chain__.CheckSpellCastPredicates(currentTime, spell, failedPredicates, predicateIgnoreGroupDef);
        return this;
    }

    public WizardEntityClientBroadcastChainProxy HasSpellsPreventingThisFromStart(ChainArgument<SharedCode.Wizardry.SpellCast> spell)
    {
        __chain__.HasSpellsPreventingThisFromStart(spell);
        return this;
    }

    public WizardEntityClientBroadcastChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell)
    {
        __chain__.CastSpell(spell);
        return this;
    }

    public WizardEntityClientBroadcastChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<SharedCode.Wizardry.SpellId> clientSpellId)
    {
        __chain__.CastSpell(spell, clientSpellId);
        return this;
    }

    public WizardEntityClientBroadcastChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<SharedCode.Wizardry.SpellId> clientSpellId, ChainArgument<SharedCode.Wizardry.SpellId> prevSpell)
    {
        __chain__.CastSpell(spell, clientSpellId, prevSpell);
        return this;
    }

    public WizardEntityClientBroadcastChainProxy Update()
    {
        __chain__.Update();
        return this;
    }

    public WizardEntityClientBroadcastChainProxy Update(ChainArgument<SharedCode.Wizardry.SpellId> spellId)
    {
        __chain__.Update(spellId);
        return this;
    }

    public WizardEntityClientBroadcastChainProxy GetDebugData()
    {
        __chain__.GetDebugData();
        return this;
    }

    public WizardEntityClientBroadcastChainProxy WizardHasDied()
    {
        __chain__.WizardHasDied();
        return this;
    }

    public WizardEntityClientBroadcastChainProxy WizardHasRisen()
    {
        __chain__.WizardHasRisen();
        return this;
    }

    public WizardEntityClientBroadcastChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WizardEntityClientBroadcastChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WizardEntityClientBroadcastChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WizardEntityClientBroadcastChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityClientBroadcast entity)
    {
        return new WizardEntityClientBroadcastChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject()));
    }

    public static WizardEntityClientBroadcastChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityClientBroadcast entity, IChainedEntity fromChain)
    {
        return new WizardEntityClientBroadcastChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class WizardEntityClientFullApiChainProxy : IChainedEntity
{
    private WizardEntityChainProxy __chain__;
    public WizardEntityClientFullApiChainProxy(WizardEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WizardEntityClientFullApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WizardEntityClientFullApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WizardEntityClientFullApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WizardEntityClientFullApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityClientFullApi entity)
    {
        return new WizardEntityClientFullApiChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject()));
    }

    public static WizardEntityClientFullApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityClientFullApi entity, IChainedEntity fromChain)
    {
        return new WizardEntityClientFullApiChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class WizardEntityClientFullChainProxy : IChainedEntity
{
    private WizardEntityChainProxy __chain__;
    public WizardEntityClientFullChainProxy(WizardEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WizardEntityClientFullChainProxy StopAllSpellsOfGroup(ChainArgument<SharedCode.Wizardry.SpellGroupDef> group, ChainArgument<SharedCode.Wizardry.SpellId> except, ChainArgument<SharedCode.Wizardry.SpellFinishReason> reason)
    {
        __chain__.StopAllSpellsOfGroup(group, except, reason);
        return this;
    }

    public WizardEntityClientFullChainProxy StopSpellByDef(ChainArgument<SharedCode.Wizardry.SpellDef> spellDef, ChainArgument<SharedCode.Wizardry.SpellId> except, ChainArgument<SharedCode.Wizardry.SpellFinishReason> reason)
    {
        __chain__.StopSpellByDef(spellDef, except, reason);
        return this;
    }

    public WizardEntityClientFullChainProxy StopSpellByCauser(ChainArgument<GeneratedCode.DeltaObjects.SpellPartCastId> causer, ChainArgument<SharedCode.Wizardry.SpellFinishReason> reason)
    {
        __chain__.StopSpellByCauser(causer, reason);
        return this;
    }

    public WizardEntityClientFullChainProxy HasActiveSpell(ChainArgument<SharedCode.Wizardry.SpellDef> spell)
    {
        __chain__.HasActiveSpell(spell);
        return this;
    }

    public WizardEntityClientFullChainProxy HasActiveSpellGroup(ChainArgument<SharedCode.Wizardry.SpellGroupDef> group)
    {
        __chain__.HasActiveSpellGroup(group);
        return this;
    }

    public WizardEntityClientFullChainProxy DumpEvents()
    {
        __chain__.DumpEvents();
        return this;
    }

    public WizardEntityClientFullChainProxy LocalUpdateTimeLineData()
    {
        __chain__.LocalUpdateTimeLineData();
        return this;
    }

    public WizardEntityClientFullChainProxy CheckSpellCastPredicates(ChainArgument<long> currentTime, ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef>> failedPredicates, ChainArgument<Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef> predicateIgnoreGroupDef)
    {
        __chain__.CheckSpellCastPredicates(currentTime, spell, failedPredicates, predicateIgnoreGroupDef);
        return this;
    }

    public WizardEntityClientFullChainProxy HasSpellsPreventingThisFromStart(ChainArgument<SharedCode.Wizardry.SpellCast> spell)
    {
        __chain__.HasSpellsPreventingThisFromStart(spell);
        return this;
    }

    public WizardEntityClientFullChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell)
    {
        __chain__.CastSpell(spell);
        return this;
    }

    public WizardEntityClientFullChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<SharedCode.Wizardry.SpellId> clientSpellId)
    {
        __chain__.CastSpell(spell, clientSpellId);
        return this;
    }

    public WizardEntityClientFullChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<SharedCode.Wizardry.SpellId> clientSpellId, ChainArgument<SharedCode.Wizardry.SpellId> prevSpell)
    {
        __chain__.CastSpell(spell, clientSpellId, prevSpell);
        return this;
    }

    public WizardEntityClientFullChainProxy StopCastSpell(ChainArgument<SharedCode.Wizardry.SpellId> spell, ChainArgument<SharedCode.Wizardry.SpellFinishReason> reason)
    {
        __chain__.StopCastSpell(spell, reason);
        return this;
    }

    public WizardEntityClientFullChainProxy StopCastSpell(ChainArgument<SharedCode.Wizardry.SpellId> spell)
    {
        __chain__.StopCastSpell(spell);
        return this;
    }

    public WizardEntityClientFullChainProxy Update()
    {
        __chain__.Update();
        return this;
    }

    public WizardEntityClientFullChainProxy Update(ChainArgument<SharedCode.Wizardry.SpellId> spellId)
    {
        __chain__.Update(spellId);
        return this;
    }

    public WizardEntityClientFullChainProxy GetDebugData()
    {
        __chain__.GetDebugData();
        return this;
    }

    public WizardEntityClientFullChainProxy WizardHasDied()
    {
        __chain__.WizardHasDied();
        return this;
    }

    public WizardEntityClientFullChainProxy WizardHasRisen()
    {
        __chain__.WizardHasRisen();
        return this;
    }

    public WizardEntityClientFullChainProxy CancelSpell(ChainArgument<SharedCode.Wizardry.SpellId> spellId)
    {
        __chain__.CancelSpell(spellId);
        return this;
    }

    public WizardEntityClientFullChainProxy SetIsInterestingEnoughToLog(ChainArgument<bool> enable)
    {
        __chain__.SetIsInterestingEnoughToLog(enable);
        return this;
    }

    public WizardEntityClientFullChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WizardEntityClientFullChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WizardEntityClientFullChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WizardEntityClientFullChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityClientFull entity)
    {
        return new WizardEntityClientFullChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject()));
    }

    public static WizardEntityClientFullChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityClientFull entity, IChainedEntity fromChain)
    {
        return new WizardEntityClientFullChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class WizardEntityServerApiChainProxy : IChainedEntity
{
    private WizardEntityChainProxy __chain__;
    public WizardEntityServerApiChainProxy(WizardEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WizardEntityServerApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WizardEntityServerApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WizardEntityServerApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WizardEntityServerApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityServerApi entity)
    {
        return new WizardEntityServerApiChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject()));
    }

    public static WizardEntityServerApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityServerApi entity, IChainedEntity fromChain)
    {
        return new WizardEntityServerApiChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class WizardEntityServerChainProxy : IChainedEntity
{
    private WizardEntityChainProxy __chain__;
    public WizardEntityServerChainProxy(WizardEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public WizardEntityServerChainProxy StopAllSpellsOfGroup(ChainArgument<SharedCode.Wizardry.SpellGroupDef> group, ChainArgument<SharedCode.Wizardry.SpellId> except, ChainArgument<SharedCode.Wizardry.SpellFinishReason> reason)
    {
        __chain__.StopAllSpellsOfGroup(group, except, reason);
        return this;
    }

    public WizardEntityServerChainProxy StopSpellByDef(ChainArgument<SharedCode.Wizardry.SpellDef> spellDef, ChainArgument<SharedCode.Wizardry.SpellId> except, ChainArgument<SharedCode.Wizardry.SpellFinishReason> reason)
    {
        __chain__.StopSpellByDef(spellDef, except, reason);
        return this;
    }

    public WizardEntityServerChainProxy StopSpellByCauser(ChainArgument<GeneratedCode.DeltaObjects.SpellPartCastId> causer, ChainArgument<SharedCode.Wizardry.SpellFinishReason> reason)
    {
        __chain__.StopSpellByCauser(causer, reason);
        return this;
    }

    public WizardEntityServerChainProxy HasActiveSpell(ChainArgument<SharedCode.Wizardry.SpellDef> spell)
    {
        __chain__.HasActiveSpell(spell);
        return this;
    }

    public WizardEntityServerChainProxy HasActiveSpellGroup(ChainArgument<SharedCode.Wizardry.SpellGroupDef> group)
    {
        __chain__.HasActiveSpellGroup(group);
        return this;
    }

    public WizardEntityServerChainProxy DumpEvents()
    {
        __chain__.DumpEvents();
        return this;
    }

    public WizardEntityServerChainProxy LocalUpdateTimeLineData()
    {
        __chain__.LocalUpdateTimeLineData();
        return this;
    }

    public WizardEntityServerChainProxy CheckSpellCastPredicates(ChainArgument<long> currentTime, ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef>> failedPredicates, ChainArgument<Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef> predicateIgnoreGroupDef)
    {
        __chain__.CheckSpellCastPredicates(currentTime, spell, failedPredicates, predicateIgnoreGroupDef);
        return this;
    }

    public WizardEntityServerChainProxy HasSpellsPreventingThisFromStart(ChainArgument<SharedCode.Wizardry.SpellCast> spell)
    {
        __chain__.HasSpellsPreventingThisFromStart(spell);
        return this;
    }

    public WizardEntityServerChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell)
    {
        __chain__.CastSpell(spell);
        return this;
    }

    public WizardEntityServerChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<SharedCode.Wizardry.SpellId> clientSpellId)
    {
        __chain__.CastSpell(spell, clientSpellId);
        return this;
    }

    public WizardEntityServerChainProxy CastSpell(ChainArgument<SharedCode.Wizardry.SpellCast> spell, ChainArgument<SharedCode.Wizardry.SpellId> clientSpellId, ChainArgument<SharedCode.Wizardry.SpellId> prevSpell)
    {
        __chain__.CastSpell(spell, clientSpellId, prevSpell);
        return this;
    }

    public WizardEntityServerChainProxy StopCastSpell(ChainArgument<SharedCode.Wizardry.SpellId> spell, ChainArgument<SharedCode.Wizardry.SpellFinishReason> reason)
    {
        __chain__.StopCastSpell(spell, reason);
        return this;
    }

    public WizardEntityServerChainProxy StopCastSpell(ChainArgument<SharedCode.Wizardry.SpellId> spell)
    {
        __chain__.StopCastSpell(spell);
        return this;
    }

    public WizardEntityServerChainProxy Update()
    {
        __chain__.Update();
        return this;
    }

    public WizardEntityServerChainProxy Update(ChainArgument<SharedCode.Wizardry.SpellId> spellId)
    {
        __chain__.Update(spellId);
        return this;
    }

    public WizardEntityServerChainProxy GetDebugData()
    {
        __chain__.GetDebugData();
        return this;
    }

    public WizardEntityServerChainProxy WizardHasDied()
    {
        __chain__.WizardHasDied();
        return this;
    }

    public WizardEntityServerChainProxy WizardHasRisen()
    {
        __chain__.WizardHasRisen();
        return this;
    }

    public WizardEntityServerChainProxy CancelSpell(ChainArgument<SharedCode.Wizardry.SpellId> spellId)
    {
        __chain__.CancelSpell(spellId);
        return this;
    }

    public WizardEntityServerChainProxy SetIsInterestingEnoughToLog(ChainArgument<bool> enable)
    {
        __chain__.SetIsInterestingEnoughToLog(enable);
        return this;
    }

    public WizardEntityServerChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public WizardEntityServerChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public WizardEntityServerChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static WizardEntityServerChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityServer entity)
    {
        return new WizardEntityServerChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject()));
    }

    public static WizardEntityServerChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.IWizardEntityServer entity, IChainedEntity fromChain)
    {
        return new WizardEntityServerChainProxy(new WizardEntityChainProxy((SharedCode.Wizardry.IWizardEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}