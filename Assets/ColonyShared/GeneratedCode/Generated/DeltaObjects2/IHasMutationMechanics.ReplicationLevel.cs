// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class MutationMechanicsAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsAlways
    {
        public MutationMechanicsAlways(SharedCode.Entities.IMutationMechanics deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IMutationMechanics __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IMutationMechanics)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1488479401;
    }

    public class MutationMechanicsClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsClientBroadcast
    {
        public MutationMechanicsClientBroadcast(SharedCode.Entities.IMutationMechanics deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IMutationMechanics __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IMutationMechanics)__deltaObjectBase__;
            }
        }

        public Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef Stage => __deltaObject__.Stage;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 13:
                    currProperty = Stage;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1427596474;
    }

    public class MutationMechanicsClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsClientFullApi
    {
        public MutationMechanicsClientFullApi(SharedCode.Entities.IMutationMechanics deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IMutationMechanics __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IMutationMechanics)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1582650394;
    }

    public class MutationMechanicsClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsClientFull
    {
        public MutationMechanicsClientFull(SharedCode.Entities.IMutationMechanics deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IMutationMechanics __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IMutationMechanics)__deltaObjectBase__;
            }
        }

        public Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionsDef FactionsDef => __deltaObject__.FactionsDef;
        public Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef Faction => __deltaObject__.Faction;
        public Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef NewFaction => __deltaObject__.NewFaction;
        public Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef Stage => __deltaObject__.Stage;
        public Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef NewStage => __deltaObject__.NewStage;
        public float Mutation => __deltaObject__.Mutation;
        public long AllowedTimeMutationChange => __deltaObject__.AllowedTimeMutationChange;
        public System.Threading.Tasks.Task<bool> CanChangeMutation(float value, Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef toFaction)
        {
            return __deltaObject__.CanChangeMutation(value, toFaction);
        }

        public System.Threading.Tasks.Task<bool> ChangeMutation(float value, Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef toFaction, float coolDownTime, bool forceChange)
        {
            return __deltaObject__.ChangeMutation(value, toFaction, coolDownTime, forceChange);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = FactionsDef;
                    break;
                case 11:
                    currProperty = Faction;
                    break;
                case 12:
                    currProperty = NewFaction;
                    break;
                case 13:
                    currProperty = Stage;
                    break;
                case 14:
                    currProperty = NewStage;
                    break;
                case 15:
                    currProperty = Mutation;
                    break;
                case 16:
                    currProperty = AllowedTimeMutationChange;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 375062289;
    }

    public class MutationMechanicsServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsServerApi
    {
        public MutationMechanicsServerApi(SharedCode.Entities.IMutationMechanics deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IMutationMechanics __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IMutationMechanics)__deltaObjectBase__;
            }
        }

        public override int TypeId => 994017414;
    }

    public class MutationMechanicsServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMutationMechanicsServer
    {
        public MutationMechanicsServer(SharedCode.Entities.IMutationMechanics deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IMutationMechanics __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IMutationMechanics)__deltaObjectBase__;
            }
        }

        public Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionsDef FactionsDef => __deltaObject__.FactionsDef;
        public Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef Faction => __deltaObject__.Faction;
        public Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef NewFaction => __deltaObject__.NewFaction;
        public Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef Stage => __deltaObject__.Stage;
        public Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef NewStage => __deltaObject__.NewStage;
        public float Mutation => __deltaObject__.Mutation;
        public long AllowedTimeMutationChange => __deltaObject__.AllowedTimeMutationChange;
        public System.Threading.Tasks.Task<bool> CanChangeMutation(float value, Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef toFaction)
        {
            return __deltaObject__.CanChangeMutation(value, toFaction);
        }

        public System.Threading.Tasks.Task<bool> ChangeMutation(float value, Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef toFaction, float coolDownTime, bool forceChange)
        {
            return __deltaObject__.ChangeMutation(value, toFaction, coolDownTime, forceChange);
        }

        public System.Threading.Tasks.Task<bool> ApplyMutationChangeForced(Assets.Src.Aspects.Impl.Factions.Template.MutationStageDef newStage, Assets.Src.Aspects.Impl.Factions.Template.MutatingFactionDef newFaction)
        {
            return __deltaObject__.ApplyMutationChangeForced(newStage, newFaction);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = FactionsDef;
                    break;
                case 11:
                    currProperty = Faction;
                    break;
                case 12:
                    currProperty = NewFaction;
                    break;
                case 13:
                    currProperty = Stage;
                    break;
                case 14:
                    currProperty = NewStage;
                    break;
                case 15:
                    currProperty = Mutation;
                    break;
                case 16:
                    currProperty = AllowedTimeMutationChange;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1744424982;
    }
}