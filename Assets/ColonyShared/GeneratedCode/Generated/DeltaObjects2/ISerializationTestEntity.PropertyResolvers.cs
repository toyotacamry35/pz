// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using SharedCode.Logging;
using System.Collections.Generic;
using System.Linq;
using SharedCode.EntitySystem;

namespace GeneratedCode.DeltaObjects
{
    public partial class SerializationTestEntity
    {
        public override bool TryGetProperty<T>(int address, out T property)
        {
            switch (address)
            {
                case 10:
                    property = (T)(object)Value;
                    return true;
                case 11:
                    property = (T)(object)TestProperty;
                    return true;
                case 12:
                    property = (T)(object)TestPropertyClientFull;
                    return true;
                case 13:
                    property = (T)(object)TestProperty2;
                    return true;
                case 14:
                    property = (T)(object)TestProperty3;
                    return true;
                case 15:
                    property = (T)(object)List1;
                    return true;
                case 16:
                    property = (T)(object)Dictionary1;
                    return true;
                case 17:
                    property = (T)(object)SimpleList1;
                    return true;
                case 18:
                    property = (T)(object)SimpleDictionary1;
                    return true;
                case 19:
                    property = (T)(object)LinkedEntityServer;
                    return true;
                case 20:
                    property = (T)(object)LinkedEntityClientFull;
                    return true;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    property = default;
                    return false;
            }
        }

        public override int GetIdOfChildNonDeltaObj(string childName)
        {
            if (childName == nameof(Value))
                return 10;
            if (childName == nameof(TestProperty))
                return 11;
            if (childName == nameof(TestPropertyClientFull))
                return 12;
            if (childName == nameof(TestProperty2))
                return 13;
            if (childName == nameof(TestProperty3))
                return 14;
            if (childName == nameof(List1))
                return 15;
            if (childName == nameof(Dictionary1))
                return 16;
            if (childName == nameof(SimpleList1))
                return 17;
            if (childName == nameof(SimpleDictionary1))
                return 18;
            if (childName == nameof(LinkedEntityServer))
                return 19;
            if (childName == nameof(LinkedEntityClientFull))
                return 20;
            throw new System.InvalidOperationException($"Field {childName} is not a child of {this}");
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class SerializationTestEntity2
    {
        public override bool TryGetProperty<T>(int address, out T property)
        {
            switch (address)
            {
                case 10:
                    property = (T)(object)TestProperty;
                    return true;
                case 11:
                    property = (T)(object)Value;
                    return true;
                case 12:
                    property = (T)(object)LinkedEntityServer;
                    return true;
                case 13:
                    property = (T)(object)LinkedEntityClientFull;
                    return true;
                case 14:
                    property = (T)(object)OwnerInformation;
                    return true;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    property = default;
                    return false;
            }
        }

        public override int GetIdOfChildNonDeltaObj(string childName)
        {
            if (childName == nameof(TestProperty))
                return 10;
            if (childName == nameof(Value))
                return 11;
            if (childName == nameof(LinkedEntityServer))
                return 12;
            if (childName == nameof(LinkedEntityClientFull))
                return 13;
            if (childName == nameof(OwnerInformation))
                return 14;
            throw new System.InvalidOperationException($"Field {childName} is not a child of {this}");
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class SerializationTestEntity3
    {
        public override bool TryGetProperty<T>(int address, out T property)
        {
            switch (address)
            {
                case 10:
                    property = (T)(object)TestProperty;
                    return true;
                case 11:
                    property = (T)(object)OwnerInformation;
                    return true;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    property = default;
                    return false;
            }
        }

        public override int GetIdOfChildNonDeltaObj(string childName)
        {
            if (childName == nameof(TestProperty))
                return 10;
            if (childName == nameof(OwnerInformation))
                return 11;
            throw new System.InvalidOperationException($"Field {childName} is not a child of {this}");
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class TestDeltaObject2
    {
        public override bool TryGetProperty<T>(int address, out T property)
        {
            switch (address)
            {
                case 10:
                    property = (T)(object)Test;
                    return true;
                case 11:
                    property = (T)(object)TestClientFull;
                    return true;
                case 12:
                    property = (T)(object)Test2;
                    return true;
                case 13:
                    property = (T)(object)EntityTestServer;
                    return true;
                case 14:
                    property = (T)(object)EntityTestClientFull;
                    return true;
                case 15:
                    property = (T)(object)EntityDictionaryTest;
                    return true;
                case 16:
                    property = (T)(object)EntityListTest;
                    return true;
                case 17:
                    property = (T)(object)List1;
                    return true;
                case 18:
                    property = (T)(object)Dictionary1;
                    return true;
                case 19:
                    property = (T)(object)ClientBroadcastValue;
                    return true;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    property = default;
                    return false;
            }
        }

        public override int GetIdOfChildNonDeltaObj(string childName)
        {
            if (childName == nameof(Test))
                return 10;
            if (childName == nameof(TestClientFull))
                return 11;
            if (childName == nameof(Test2))
                return 12;
            if (childName == nameof(EntityTestServer))
                return 13;
            if (childName == nameof(EntityTestClientFull))
                return 14;
            if (childName == nameof(EntityDictionaryTest))
                return 15;
            if (childName == nameof(EntityListTest))
                return 16;
            if (childName == nameof(List1))
                return 17;
            if (childName == nameof(Dictionary1))
                return 18;
            if (childName == nameof(ClientBroadcastValue))
                return 19;
            throw new System.InvalidOperationException($"Field {childName} is not a child of {this}");
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class TestDeltaObject3
    {
        public override bool TryGetProperty<T>(int address, out T property)
        {
            switch (address)
            {
                case 10:
                    property = (T)(object)Test;
                    return true;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    property = default;
                    return false;
            }
        }

        public override int GetIdOfChildNonDeltaObj(string childName)
        {
            if (childName == nameof(Test))
                return 10;
            throw new System.InvalidOperationException($"Field {childName} is not a child of {this}");
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class SaveToDbEntityTest
    {
        public override bool TryGetProperty<T>(int address, out T property)
        {
            switch (address)
            {
                case 10:
                    property = (T)(object)TestProperty;
                    return true;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    property = default;
                    return false;
            }
        }

        public override int GetIdOfChildNonDeltaObj(string childName)
        {
            if (childName == nameof(TestProperty))
                return 10;
            throw new System.InvalidOperationException($"Field {childName} is not a child of {this}");
        }
    }
}