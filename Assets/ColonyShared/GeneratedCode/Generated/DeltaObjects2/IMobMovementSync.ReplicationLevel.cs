// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class MobMovementSyncAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncAlways
    {
        public MobMovementSyncAlways(SharedCode.MovementSync.IMobMovementSync deltaObject): base(deltaObject)
        {
        }

        SharedCode.MovementSync.IMobMovementSync __deltaObject__
        {
            get
            {
                return (SharedCode.MovementSync.IMobMovementSync)__deltaObjectBase__;
            }
        }

        public SharedCode.MovementSync.IMobMovementStateEvent OnMovementStateChanged => __deltaObject__.OnMovementStateChanged;
        public SharedCode.MovementSync.MobMovementStatePacked __SyncMovementReliable => __deltaObject__.__SyncMovementReliable;
        public SharedCode.Wizardry.SpellEffectDef def => __deltaObject__.def;
        public SharedCode.MovementSync.MovementData MovementData => __deltaObject__.MovementData;
        public System.Guid PathFindingOwnerRepositoryId => __deltaObject__.PathFindingOwnerRepositoryId;
        public System.Guid PathFindingOwnerRepositoryIdRuntime => __deltaObject__.PathFindingOwnerRepositoryIdRuntime;
        public SharedCode.Entities.Transform Transform => __deltaObject__.Transform;
        public SharedCode.Utils.Vector3 Position => __deltaObject__.Position;
        public SharedCode.Utils.Quaternion Rotation => __deltaObject__.Rotation;
        public SharedCode.Utils.Vector3 Scale => __deltaObject__.Scale;
        public System.Threading.Tasks.Task SetMovementData(SharedCode.MovementSync.MovementData data)
        {
            return __deltaObject__.SetMovementData(data);
        }

        public System.Threading.Tasks.Task<bool> SetPathFindingOwnerRepositoryId(System.Guid repositoryId)
        {
            return __deltaObject__.SetPathFindingOwnerRepositoryId(repositoryId);
        }

        public System.Threading.Tasks.Task UpdateMovement(SharedCode.MovementSync.MobMovementStatePacked state, long counter, bool important)
        {
            return __deltaObject__.UpdateMovement(state, counter, important);
        }

        public System.Threading.Tasks.Task StopMovement(SharedCode.Wizardry.SpellId spellId, GeneratedDefsForSpells.MoveEffectDef moveEffectDef, bool success)
        {
            return __deltaObject__.StopMovement(spellId, moveEffectDef, success);
        }

        public event System.Func<SharedCode.MovementSync.MobMovementStatePacked, System.Threading.Tasks.Task> __SyncMovementUnreliable
        {
            add
            {
                __deltaObject__.__SyncMovementUnreliable += value;
            }

            remove
            {
                __deltaObject__.__SyncMovementUnreliable -= value;
            }
        }

        public event System.Func<bool, bool, System.Threading.Tasks.Task> SetDebugMobPositionLoggingEvent
        {
            add
            {
                __deltaObject__.SetDebugMobPositionLoggingEvent += value;
            }

            remove
            {
                __deltaObject__.SetDebugMobPositionLoggingEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = __SyncMovementReliable;
                    break;
                case 11:
                    currProperty = def;
                    break;
                case 12:
                    currProperty = MovementData;
                    break;
                case 13:
                    currProperty = PathFindingOwnerRepositoryId;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1039873750;
    }

    public class MobMovementSyncClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncClientBroadcast
    {
        public MobMovementSyncClientBroadcast(SharedCode.MovementSync.IMobMovementSync deltaObject): base(deltaObject)
        {
        }

        SharedCode.MovementSync.IMobMovementSync __deltaObject__
        {
            get
            {
                return (SharedCode.MovementSync.IMobMovementSync)__deltaObjectBase__;
            }
        }

        public SharedCode.MovementSync.IMobMovementStateEvent OnMovementStateChanged => __deltaObject__.OnMovementStateChanged;
        public SharedCode.MovementSync.MobMovementStatePacked __SyncMovementReliable => __deltaObject__.__SyncMovementReliable;
        public SharedCode.Wizardry.SpellEffectDef def => __deltaObject__.def;
        public SharedCode.MovementSync.MovementData MovementData => __deltaObject__.MovementData;
        public System.Guid PathFindingOwnerRepositoryId => __deltaObject__.PathFindingOwnerRepositoryId;
        public System.Guid PathFindingOwnerRepositoryIdRuntime => __deltaObject__.PathFindingOwnerRepositoryIdRuntime;
        public SharedCode.Entities.Transform Transform => __deltaObject__.Transform;
        public SharedCode.Utils.Vector3 Position => __deltaObject__.Position;
        public SharedCode.Utils.Quaternion Rotation => __deltaObject__.Rotation;
        public SharedCode.Utils.Vector3 Scale => __deltaObject__.Scale;
        public System.Threading.Tasks.Task SetMovementData(SharedCode.MovementSync.MovementData data)
        {
            return __deltaObject__.SetMovementData(data);
        }

        public System.Threading.Tasks.Task<bool> SetPathFindingOwnerRepositoryId(System.Guid repositoryId)
        {
            return __deltaObject__.SetPathFindingOwnerRepositoryId(repositoryId);
        }

        public System.Threading.Tasks.Task UpdateMovement(SharedCode.MovementSync.MobMovementStatePacked state, long counter, bool important)
        {
            return __deltaObject__.UpdateMovement(state, counter, important);
        }

        public System.Threading.Tasks.Task StopMovement(SharedCode.Wizardry.SpellId spellId, GeneratedDefsForSpells.MoveEffectDef moveEffectDef, bool success)
        {
            return __deltaObject__.StopMovement(spellId, moveEffectDef, success);
        }

        public event System.Func<SharedCode.MovementSync.MobMovementStatePacked, System.Threading.Tasks.Task> __SyncMovementUnreliable
        {
            add
            {
                __deltaObject__.__SyncMovementUnreliable += value;
            }

            remove
            {
                __deltaObject__.__SyncMovementUnreliable -= value;
            }
        }

        public event System.Func<bool, bool, System.Threading.Tasks.Task> SetDebugMobPositionLoggingEvent
        {
            add
            {
                __deltaObject__.SetDebugMobPositionLoggingEvent += value;
            }

            remove
            {
                __deltaObject__.SetDebugMobPositionLoggingEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = __SyncMovementReliable;
                    break;
                case 11:
                    currProperty = def;
                    break;
                case 12:
                    currProperty = MovementData;
                    break;
                case 13:
                    currProperty = PathFindingOwnerRepositoryId;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -944841568;
    }

    public class MobMovementSyncClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncClientFullApi
    {
        public MobMovementSyncClientFullApi(SharedCode.MovementSync.IMobMovementSync deltaObject): base(deltaObject)
        {
        }

        SharedCode.MovementSync.IMobMovementSync __deltaObject__
        {
            get
            {
                return (SharedCode.MovementSync.IMobMovementSync)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1751078181;
    }

    public class MobMovementSyncClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncClientFull
    {
        public MobMovementSyncClientFull(SharedCode.MovementSync.IMobMovementSync deltaObject): base(deltaObject)
        {
        }

        SharedCode.MovementSync.IMobMovementSync __deltaObject__
        {
            get
            {
                return (SharedCode.MovementSync.IMobMovementSync)__deltaObjectBase__;
            }
        }

        public SharedCode.MovementSync.IMobMovementStateEvent OnMovementStateChanged => __deltaObject__.OnMovementStateChanged;
        public SharedCode.MovementSync.MobMovementStatePacked __SyncMovementReliable => __deltaObject__.__SyncMovementReliable;
        public SharedCode.Wizardry.SpellEffectDef def => __deltaObject__.def;
        public SharedCode.MovementSync.MovementData MovementData => __deltaObject__.MovementData;
        public System.Guid PathFindingOwnerRepositoryId => __deltaObject__.PathFindingOwnerRepositoryId;
        public System.Guid PathFindingOwnerRepositoryIdRuntime => __deltaObject__.PathFindingOwnerRepositoryIdRuntime;
        public SharedCode.Entities.Transform Transform => __deltaObject__.Transform;
        public SharedCode.Utils.Vector3 Position => __deltaObject__.Position;
        public SharedCode.Utils.Quaternion Rotation => __deltaObject__.Rotation;
        public SharedCode.Utils.Vector3 Scale => __deltaObject__.Scale;
        public System.Threading.Tasks.Task SetMovementData(SharedCode.MovementSync.MovementData data)
        {
            return __deltaObject__.SetMovementData(data);
        }

        public System.Threading.Tasks.Task<bool> SetPathFindingOwnerRepositoryId(System.Guid repositoryId)
        {
            return __deltaObject__.SetPathFindingOwnerRepositoryId(repositoryId);
        }

        public System.Threading.Tasks.Task UpdateMovement(SharedCode.MovementSync.MobMovementStatePacked state, long counter, bool important)
        {
            return __deltaObject__.UpdateMovement(state, counter, important);
        }

        public System.Threading.Tasks.Task StopMovement(SharedCode.Wizardry.SpellId spellId, GeneratedDefsForSpells.MoveEffectDef moveEffectDef, bool success)
        {
            return __deltaObject__.StopMovement(spellId, moveEffectDef, success);
        }

        public event System.Func<SharedCode.MovementSync.MobMovementStatePacked, System.Threading.Tasks.Task> __SyncMovementUnreliable
        {
            add
            {
                __deltaObject__.__SyncMovementUnreliable += value;
            }

            remove
            {
                __deltaObject__.__SyncMovementUnreliable -= value;
            }
        }

        public event System.Func<bool, bool, System.Threading.Tasks.Task> SetDebugMobPositionLoggingEvent
        {
            add
            {
                __deltaObject__.SetDebugMobPositionLoggingEvent += value;
            }

            remove
            {
                __deltaObject__.SetDebugMobPositionLoggingEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = __SyncMovementReliable;
                    break;
                case 11:
                    currProperty = def;
                    break;
                case 12:
                    currProperty = MovementData;
                    break;
                case 13:
                    currProperty = PathFindingOwnerRepositoryId;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1708609001;
    }

    public class MobMovementSyncServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncServerApi
    {
        public MobMovementSyncServerApi(SharedCode.MovementSync.IMobMovementSync deltaObject): base(deltaObject)
        {
        }

        SharedCode.MovementSync.IMobMovementSync __deltaObject__
        {
            get
            {
                return (SharedCode.MovementSync.IMobMovementSync)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1643890971;
    }

    public class MobMovementSyncServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IMobMovementSyncServer
    {
        public MobMovementSyncServer(SharedCode.MovementSync.IMobMovementSync deltaObject): base(deltaObject)
        {
        }

        SharedCode.MovementSync.IMobMovementSync __deltaObject__
        {
            get
            {
                return (SharedCode.MovementSync.IMobMovementSync)__deltaObjectBase__;
            }
        }

        public SharedCode.MovementSync.IMobMovementStateEvent OnMovementStateChanged => __deltaObject__.OnMovementStateChanged;
        public SharedCode.MovementSync.MobMovementStatePacked __SyncMovementReliable => __deltaObject__.__SyncMovementReliable;
        public SharedCode.Wizardry.SpellEffectDef def => __deltaObject__.def;
        public SharedCode.MovementSync.MovementData MovementData => __deltaObject__.MovementData;
        public System.Guid PathFindingOwnerRepositoryId => __deltaObject__.PathFindingOwnerRepositoryId;
        public System.Guid PathFindingOwnerRepositoryIdRuntime => __deltaObject__.PathFindingOwnerRepositoryIdRuntime;
        public SharedCode.Entities.Transform Transform => __deltaObject__.Transform;
        public SharedCode.Utils.Vector3 Position => __deltaObject__.Position;
        public SharedCode.Utils.Quaternion Rotation => __deltaObject__.Rotation;
        public SharedCode.Utils.Vector3 Scale => __deltaObject__.Scale;
        public System.Threading.Tasks.Task SetMovementData(SharedCode.MovementSync.MovementData data)
        {
            return __deltaObject__.SetMovementData(data);
        }

        public System.Threading.Tasks.Task<bool> SetPathFindingOwnerRepositoryId(System.Guid repositoryId)
        {
            return __deltaObject__.SetPathFindingOwnerRepositoryId(repositoryId);
        }

        public System.Threading.Tasks.Task UpdateMovement(SharedCode.MovementSync.MobMovementStatePacked state, long counter, bool important)
        {
            return __deltaObject__.UpdateMovement(state, counter, important);
        }

        public System.Threading.Tasks.Task StopMovement(SharedCode.Wizardry.SpellId spellId, GeneratedDefsForSpells.MoveEffectDef moveEffectDef, bool success)
        {
            return __deltaObject__.StopMovement(spellId, moveEffectDef, success);
        }

        public System.Threading.Tasks.Task InvokeSetDebugMobPositionLoggingEvent(bool enabledStatus, bool dump)
        {
            return __deltaObject__.InvokeSetDebugMobPositionLoggingEvent(enabledStatus, dump);
        }

        public event System.Func<SharedCode.MovementSync.MobMovementStatePacked, System.Threading.Tasks.Task> __SyncMovementUnreliable
        {
            add
            {
                __deltaObject__.__SyncMovementUnreliable += value;
            }

            remove
            {
                __deltaObject__.__SyncMovementUnreliable -= value;
            }
        }

        public event System.Func<bool, bool, System.Threading.Tasks.Task> SetDebugMobPositionLoggingEvent
        {
            add
            {
                __deltaObject__.SetDebugMobPositionLoggingEvent += value;
            }

            remove
            {
                __deltaObject__.SetDebugMobPositionLoggingEvent -= value;
            }
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = __SyncMovementReliable;
                    break;
                case 11:
                    currProperty = def;
                    break;
                case 12:
                    currProperty = MovementData;
                    break;
                case 13:
                    currProperty = PathFindingOwnerRepositoryId;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -59226027;
    }
}