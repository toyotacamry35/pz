// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class WorldSpaced
    {
        public Task<bool> AssignToWorldSpace(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Service.IWorldSpaceServiceEntity> ownWorldSpace)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AssignToWorldSpaceRunMaster(ownWorldSpace).AsTask();
                else
                    return AssignToWorldSpaceRun(ownWorldSpace).AsTask();
            else
                return SendFuncs.AssignToWorldSpace(ownWorldSpace, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> AssignToWorldSpaceCreateDeferredDelegate(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Service.IWorldSpaceServiceEntity> ownWorldSpace) => () =>
        {
            return AssignToWorldSpace(ownWorldSpace);
        }

        ;
        public async ValueTask<bool> AssignToWorldSpaceRunMaster(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Service.IWorldSpaceServiceEntity> ownWorldSpace)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AssignToWorldSpaceCreateDeferredDelegate(ownWorldSpace), nameof(AssignToWorldSpace));
            }

            return await AssignToWorldSpaceRun(ownWorldSpace);
        }

        public async ValueTask<bool> AssignToWorldSpaceRun(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Service.IWorldSpaceServiceEntity> ownWorldSpace)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaced), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(AssignToWorldSpace)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = AssignToWorldSpaceImpl(ownWorldSpace);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    public partial class WorldSpaceServiceEntity
    {
        public Task<System.Guid?> GetWorldNodeId(ResourceSystem.Utils.OuterRef entityRef)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetWorldNodeIdRunMaster(entityRef).AsTask();
                else
                    return GetWorldNodeIdRun(entityRef).AsTask();
            else
                return SendFuncs.GetWorldNodeId(entityRef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<System.Guid?>> GetWorldNodeIdCreateDeferredDelegate(ResourceSystem.Utils.OuterRef entityRef) => () =>
        {
            return GetWorldNodeId(entityRef);
        }

        ;
        public async ValueTask<System.Guid?> GetWorldNodeIdRunMaster(ResourceSystem.Utils.OuterRef entityRef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetWorldNodeIdCreateDeferredDelegate(entityRef), nameof(GetWorldNodeId));
            }

            return await GetWorldNodeIdRun(entityRef);
        }

        public async ValueTask<System.Guid?> GetWorldNodeIdRun(ResourceSystem.Utils.OuterRef entityRef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 0);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetWorldNodeIdImpl(entityRef);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> AddWorldObject(int typeId, System.Guid entityId)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddWorldObjectRunMaster(typeId, entityId).AsTask();
                else
                    return AddWorldObjectRun(typeId, entityId).AsTask();
            else
                return SendFuncs.AddWorldObject(typeId, entityId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> AddWorldObjectCreateDeferredDelegate(int typeId, System.Guid entityId) => () =>
        {
            return AddWorldObject(typeId, entityId);
        }

        ;
        public async ValueTask<bool> AddWorldObjectRunMaster(int typeId, System.Guid entityId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddWorldObjectCreateDeferredDelegate(typeId, entityId), nameof(AddWorldObject));
            }

            return await AddWorldObjectRun(typeId, entityId);
        }

        public async ValueTask<bool> AddWorldObjectRun(int typeId, System.Guid entityId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 1);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = AddWorldObjectImpl(typeId, entityId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> RemoveWorldObject(int typeId, System.Guid entityId)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveWorldObjectRunMaster(typeId, entityId).AsTask();
                else
                    return RemoveWorldObjectRun(typeId, entityId).AsTask();
            else
                return SendFuncs.RemoveWorldObject(typeId, entityId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> RemoveWorldObjectCreateDeferredDelegate(int typeId, System.Guid entityId) => () =>
        {
            return RemoveWorldObject(typeId, entityId);
        }

        ;
        public async ValueTask<bool> RemoveWorldObjectRunMaster(int typeId, System.Guid entityId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveWorldObjectCreateDeferredDelegate(typeId, entityId), nameof(RemoveWorldObject));
            }

            return await RemoveWorldObjectRun(typeId, entityId);
        }

        public async ValueTask<bool> RemoveWorldObjectRun(int typeId, System.Guid entityId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 2);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = RemoveWorldObjectImpl(typeId, entityId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> UpdateTransform(int typeId, System.Guid entityId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UpdateTransformRunMaster(typeId, entityId).AsTask();
                else
                    return UpdateTransformRun(typeId, entityId).AsTask();
            else
                return SendFuncs.UpdateTransform(typeId, entityId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> UpdateTransformCreateDeferredDelegate(int typeId, System.Guid entityId) => () =>
        {
            return UpdateTransform(typeId, entityId);
        }

        ;
        public async ValueTask<bool> UpdateTransformRunMaster(int typeId, System.Guid entityId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UpdateTransformCreateDeferredDelegate(typeId, entityId), nameof(UpdateTransform));
            }

            return await UpdateTransformRun(typeId, entityId);
        }

        public async ValueTask<bool> UpdateTransformRun(int typeId, System.Guid entityId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 3);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = UpdateTransformImpl(typeId, entityId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.Entities.Service.AddClientResult> AddClient(System.Guid characterId, System.Guid repositoryId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddClientRunMaster(characterId, repositoryId).AsTask();
                else
                    return AddClientRun(characterId, repositoryId).AsTask();
            else
                return SendFuncs.AddClient(characterId, repositoryId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Service.AddClientResult>> AddClientCreateDeferredDelegate(System.Guid characterId, System.Guid repositoryId) => () =>
        {
            return AddClient(characterId, repositoryId);
        }

        ;
        public async ValueTask<SharedCode.Entities.Service.AddClientResult> AddClientRunMaster(System.Guid characterId, System.Guid repositoryId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddClientCreateDeferredDelegate(characterId, repositoryId), nameof(AddClient));
            }

            return await AddClientRun(characterId, repositoryId);
        }

        public async ValueTask<SharedCode.Entities.Service.AddClientResult> AddClientRun(System.Guid characterId, System.Guid repositoryId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 4);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(AddClient)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = AddClientImpl(characterId, repositoryId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> RemoveClient(System.Guid repositoryId, bool immediate)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveClientRunMaster(repositoryId, immediate).AsTask();
                else
                    return RemoveClientRun(repositoryId, immediate).AsTask();
            else
                return SendFuncs.RemoveClient(repositoryId, immediate, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> RemoveClientCreateDeferredDelegate(System.Guid repositoryId, bool immediate) => () =>
        {
            return RemoveClient(repositoryId, immediate);
        }

        ;
        public async ValueTask<bool> RemoveClientRunMaster(System.Guid repositoryId, bool immediate)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveClientCreateDeferredDelegate(repositoryId, immediate), nameof(RemoveClient));
            }

            return await RemoveClientRun(repositoryId, immediate);
        }

        public async ValueTask<bool> RemoveClientRun(System.Guid repositoryId, bool immediate)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 5);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = RemoveClientImpl(repositoryId, immediate);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<System.Guid> GetWorldBoxIdToDrop(SharedCode.Utils.Vector3 position, System.Guid characterOwnerId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetWorldBoxIdToDropRunMaster(position, characterOwnerId).AsTask();
                else
                    return GetWorldBoxIdToDropRun(position, characterOwnerId).AsTask();
            else
                return SendFuncs.GetWorldBoxIdToDrop(position, characterOwnerId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<System.Guid>> GetWorldBoxIdToDropCreateDeferredDelegate(SharedCode.Utils.Vector3 position, System.Guid characterOwnerId) => () =>
        {
            return GetWorldBoxIdToDrop(position, characterOwnerId);
        }

        ;
        public async ValueTask<System.Guid> GetWorldBoxIdToDropRunMaster(SharedCode.Utils.Vector3 position, System.Guid characterOwnerId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetWorldBoxIdToDropCreateDeferredDelegate(position, characterOwnerId), nameof(GetWorldBoxIdToDrop));
            }

            return await GetWorldBoxIdToDropRun(position, characterOwnerId);
        }

        public async ValueTask<System.Guid> GetWorldBoxIdToDropRun(SharedCode.Utils.Vector3 position, System.Guid characterOwnerId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 6);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetWorldBoxIdToDropImpl(position, characterOwnerId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> RegisterFencePlace(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Building.IFencePlace> fencePlace)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RegisterFencePlaceRunMaster(fencePlace).AsTask();
                else
                    return RegisterFencePlaceRun(fencePlace).AsTask();
            else
                return SendFuncs.RegisterFencePlace(fencePlace, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> RegisterFencePlaceCreateDeferredDelegate(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Building.IFencePlace> fencePlace) => () =>
        {
            return RegisterFencePlace(fencePlace);
        }

        ;
        public async ValueTask<bool> RegisterFencePlaceRunMaster(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Building.IFencePlace> fencePlace)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RegisterFencePlaceCreateDeferredDelegate(fencePlace), nameof(RegisterFencePlace));
            }

            return await RegisterFencePlaceRun(fencePlace);
        }

        public async ValueTask<bool> RegisterFencePlaceRun(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Building.IFencePlace> fencePlace)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 7);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RegisterFencePlace)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RegisterFencePlaceImpl(fencePlace);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> UnregisterFencePlace(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Building.IFencePlace> fencePlace)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UnregisterFencePlaceRunMaster(fencePlace).AsTask();
                else
                    return UnregisterFencePlaceRun(fencePlace).AsTask();
            else
                return SendFuncs.UnregisterFencePlace(fencePlace, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> UnregisterFencePlaceCreateDeferredDelegate(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Building.IFencePlace> fencePlace) => () =>
        {
            return UnregisterFencePlace(fencePlace);
        }

        ;
        public async ValueTask<bool> UnregisterFencePlaceRunMaster(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Building.IFencePlace> fencePlace)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UnregisterFencePlaceCreateDeferredDelegate(fencePlace), nameof(UnregisterFencePlace));
            }

            return await UnregisterFencePlaceRun(fencePlace);
        }

        public async ValueTask<bool> UnregisterFencePlaceRun(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Building.IFencePlace> fencePlace)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 8);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(UnregisterFencePlace)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = UnregisterFencePlaceImpl(fencePlace);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<System.Guid> CreateFencePlaceId(SharedCode.Utils.Vector3 position)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CreateFencePlaceIdRunMaster(position).AsTask();
                else
                    return CreateFencePlaceIdRun(position).AsTask();
            else
                return SendFuncs.CreateFencePlaceId(position, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<System.Guid>> CreateFencePlaceIdCreateDeferredDelegate(SharedCode.Utils.Vector3 position) => () =>
        {
            return CreateFencePlaceId(position);
        }

        ;
        public async ValueTask<System.Guid> CreateFencePlaceIdRunMaster(SharedCode.Utils.Vector3 position)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CreateFencePlaceIdCreateDeferredDelegate(position), nameof(CreateFencePlaceId));
            }

            return await CreateFencePlaceIdRun(position);
        }

        public async ValueTask<System.Guid> CreateFencePlaceIdRun(SharedCode.Utils.Vector3 position)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 9);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(CreateFencePlaceId)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = CreateFencePlaceIdImpl(position);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<System.Guid> GetFencePlaceId(SharedCode.Utils.Vector3 position, bool onlyExisted)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetFencePlaceIdRunMaster(position, onlyExisted).AsTask();
                else
                    return GetFencePlaceIdRun(position, onlyExisted).AsTask();
            else
                return SendFuncs.GetFencePlaceId(position, onlyExisted, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<System.Guid>> GetFencePlaceIdCreateDeferredDelegate(SharedCode.Utils.Vector3 position, bool onlyExisted) => () =>
        {
            return GetFencePlaceId(position, onlyExisted);
        }

        ;
        public async ValueTask<System.Guid> GetFencePlaceIdRunMaster(SharedCode.Utils.Vector3 position, bool onlyExisted)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetFencePlaceIdCreateDeferredDelegate(position, onlyExisted), nameof(GetFencePlaceId));
            }

            return await GetFencePlaceIdRun(position, onlyExisted);
        }

        public async ValueTask<System.Guid> GetFencePlaceIdRun(SharedCode.Utils.Vector3 position, bool onlyExisted)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 10);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetFencePlaceIdImpl(position, onlyExisted);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task OnVisibilityChanged(int subjectTypeId, System.Guid subjectEntityId, System.Collections.Generic.List<(int, System.Guid)> addedObjects, System.Collections.Generic.List<(int, System.Guid)> removedObjects)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnVisibilityChangedRunMaster(subjectTypeId, subjectEntityId, addedObjects, removedObjects).AsTask();
                else
                    return OnVisibilityChangedRun(subjectTypeId, subjectEntityId, addedObjects, removedObjects).AsTask();
            else
                return SendFuncs.OnVisibilityChanged(subjectTypeId, subjectEntityId, addedObjects, removedObjects, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> OnVisibilityChangedCreateDeferredDelegate(int subjectTypeId, System.Guid subjectEntityId, System.Collections.Generic.List<(int, System.Guid)> addedObjects, System.Collections.Generic.List<(int, System.Guid)> removedObjects) => () =>
        {
            return OnVisibilityChanged(subjectTypeId, subjectEntityId, addedObjects, removedObjects);
        }

        ;
        public async ValueTask OnVisibilityChangedRunMaster(int subjectTypeId, System.Guid subjectEntityId, System.Collections.Generic.List<(int, System.Guid)> addedObjects, System.Collections.Generic.List<(int, System.Guid)> removedObjects)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnVisibilityChangedCreateDeferredDelegate(subjectTypeId, subjectEntityId, addedObjects, removedObjects), nameof(OnVisibilityChanged));
            }

            await OnVisibilityChangedRun(subjectTypeId, subjectEntityId, addedObjects, removedObjects);
        }

        public async ValueTask OnVisibilityChangedRun(int subjectTypeId, System.Guid subjectEntityId, System.Collections.Generic.List<(int, System.Guid)> addedObjects, System.Collections.Generic.List<(int, System.Guid)> removedObjects)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 11);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = OnVisibilityChangedImpl(subjectTypeId, subjectEntityId, addedObjects, removedObjects);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task EnableReplications(int subjectTypeId, System.Guid subjectEntityId, bool enable)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return EnableReplicationsRunMaster(subjectTypeId, subjectEntityId, enable).AsTask();
                else
                    return EnableReplicationsRun(subjectTypeId, subjectEntityId, enable).AsTask();
            else
                return SendFuncs.EnableReplications(subjectTypeId, subjectEntityId, enable, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> EnableReplicationsCreateDeferredDelegate(int subjectTypeId, System.Guid subjectEntityId, bool enable) => () =>
        {
            return EnableReplications(subjectTypeId, subjectEntityId, enable);
        }

        ;
        public async ValueTask EnableReplicationsRunMaster(int subjectTypeId, System.Guid subjectEntityId, bool enable)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(EnableReplicationsCreateDeferredDelegate(subjectTypeId, subjectEntityId, enable), nameof(EnableReplications));
            }

            await EnableReplicationsRun(subjectTypeId, subjectEntityId, enable);
        }

        public async ValueTask EnableReplicationsRun(int subjectTypeId, System.Guid subjectEntityId, bool enable)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 12);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = EnableReplicationsImpl(subjectTypeId, subjectEntityId, enable);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<int> GetCCU()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetCCURunMaster().AsTask();
                else
                    return GetCCURun().AsTask();
            else
                return SendFuncs.GetCCU(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<int>> GetCCUCreateDeferredDelegate() => () =>
        {
            return GetCCU();
        }

        ;
        public async ValueTask<int> GetCCURunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetCCUCreateDeferredDelegate(), nameof(GetCCU));
            }

            return await GetCCURun();
        }

        public async ValueTask<int> GetCCURun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 13);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetCCUImpl();
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task SpawnNewBot(string spawnPointTypePath, System.Collections.Generic.List<System.Guid> botIds, System.Guid userId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SpawnNewBotRunMaster(spawnPointTypePath, botIds, userId).AsTask();
                else
                    return SpawnNewBotRun(spawnPointTypePath, botIds, userId).AsTask();
            else
                return SendFuncs.SpawnNewBot(spawnPointTypePath, botIds, userId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> SpawnNewBotCreateDeferredDelegate(string spawnPointTypePath, System.Collections.Generic.List<System.Guid> botIds, System.Guid userId) => () =>
        {
            return SpawnNewBot(spawnPointTypePath, botIds, userId);
        }

        ;
        public async ValueTask SpawnNewBotRunMaster(string spawnPointTypePath, System.Collections.Generic.List<System.Guid> botIds, System.Guid userId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SpawnNewBotCreateDeferredDelegate(spawnPointTypePath, botIds, userId), nameof(SpawnNewBot));
            }

            await SpawnNewBotRun(spawnPointTypePath, botIds, userId);
        }

        public async ValueTask SpawnNewBotRun(string spawnPointTypePath, System.Collections.Generic.List<System.Guid> botIds, System.Guid userId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 14);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = SpawnNewBotImpl(spawnPointTypePath, botIds, userId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> Respawn(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RespawnRunMaster(charId, checkBakens, anyCommonBaken, commonBakenId).AsTask();
                else
                    return RespawnRun(charId, checkBakens, anyCommonBaken, commonBakenId).AsTask();
            else
                return SendFuncs.Respawn(charId, checkBakens, anyCommonBaken, commonBakenId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> RespawnCreateDeferredDelegate(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId) => () =>
        {
            return Respawn(charId, checkBakens, anyCommonBaken, commonBakenId);
        }

        ;
        public async ValueTask<bool> RespawnRunMaster(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RespawnCreateDeferredDelegate(charId, checkBakens, anyCommonBaken, commonBakenId), nameof(Respawn));
            }

            return await RespawnRun(charId, checkBakens, anyCommonBaken, commonBakenId);
        }

        public async ValueTask<bool> RespawnRun(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 15);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = RespawnImpl(charId, checkBakens, anyCommonBaken, commonBakenId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.Entities.Service.AddClientResult> Login(Assets.Src.Aspects.Doings.BotActionDef botDef, string spawnPointPath, System.Guid userRepository, GeneratedCode.MapSystem.MapOwner mapOwner)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return LoginRunMaster(botDef, spawnPointPath, userRepository, mapOwner).AsTask();
                else
                    return LoginRun(botDef, spawnPointPath, userRepository, mapOwner).AsTask();
            else
                return SendFuncs.Login(botDef, spawnPointPath, userRepository, mapOwner, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Service.AddClientResult>> LoginCreateDeferredDelegate(Assets.Src.Aspects.Doings.BotActionDef botDef, string spawnPointPath, System.Guid userRepository, GeneratedCode.MapSystem.MapOwner mapOwner) => () =>
        {
            return Login(botDef, spawnPointPath, userRepository, mapOwner);
        }

        ;
        public async ValueTask<SharedCode.Entities.Service.AddClientResult> LoginRunMaster(Assets.Src.Aspects.Doings.BotActionDef botDef, string spawnPointPath, System.Guid userRepository, GeneratedCode.MapSystem.MapOwner mapOwner)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(LoginCreateDeferredDelegate(botDef, spawnPointPath, userRepository, mapOwner), nameof(Login));
            }

            return await LoginRun(botDef, spawnPointPath, userRepository, mapOwner);
        }

        public async ValueTask<SharedCode.Entities.Service.AddClientResult> LoginRun(Assets.Src.Aspects.Doings.BotActionDef botDef, string spawnPointPath, System.Guid userRepository, GeneratedCode.MapSystem.MapOwner mapOwner)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 16);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = LoginImpl(botDef, spawnPointPath, userRepository, mapOwner);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> Logout(System.Guid userId, bool terminal)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return LogoutRunMaster(userId, terminal).AsTask();
                else
                    return LogoutRun(userId, terminal).AsTask();
            else
                return SendFuncs.Logout(userId, terminal, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> LogoutCreateDeferredDelegate(System.Guid userId, bool terminal) => () =>
        {
            return Logout(userId, terminal);
        }

        ;
        public async ValueTask<bool> LogoutRunMaster(System.Guid userId, bool terminal)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(LogoutCreateDeferredDelegate(userId, terminal), nameof(Logout));
            }

            return await LogoutRun(userId, terminal);
        }

        public async ValueTask<bool> LogoutRun(System.Guid userId, bool terminal)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 17);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = LogoutImpl(userId, terminal);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> LogoutAll()
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return LogoutAllRunMaster().AsTask();
                else
                    return LogoutAllRun().AsTask();
            else
                return SendFuncs.LogoutAll(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> LogoutAllCreateDeferredDelegate() => () =>
        {
            return LogoutAll();
        }

        ;
        public async ValueTask<bool> LogoutAllRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(LogoutAllCreateDeferredDelegate(), nameof(LogoutAll));
            }

            return await LogoutAllRun();
        }

        public async ValueTask<bool> LogoutAllRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 18);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = LogoutAllImpl();
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> ConnectStreamingRepo(System.Guid repo)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ConnectStreamingRepoRunMaster(repo).AsTask();
                else
                    return ConnectStreamingRepoRun(repo).AsTask();
            else
                return SendFuncs.ConnectStreamingRepo(repo, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ConnectStreamingRepoCreateDeferredDelegate(System.Guid repo) => () =>
        {
            return ConnectStreamingRepo(repo);
        }

        ;
        public async ValueTask<bool> ConnectStreamingRepoRunMaster(System.Guid repo)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ConnectStreamingRepoCreateDeferredDelegate(repo), nameof(ConnectStreamingRepo));
            }

            return await ConnectStreamingRepoRun(repo);
        }

        public async ValueTask<bool> ConnectStreamingRepoRun(System.Guid repo)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 19);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = ConnectStreamingRepoImpl(repo);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> DisconnectStreamingRepo(System.Guid repo)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return DisconnectStreamingRepoRunMaster(repo).AsTask();
                else
                    return DisconnectStreamingRepoRun(repo).AsTask();
            else
                return SendFuncs.DisconnectStreamingRepo(repo, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> DisconnectStreamingRepoCreateDeferredDelegate(System.Guid repo) => () =>
        {
            return DisconnectStreamingRepo(repo);
        }

        ;
        public async ValueTask<bool> DisconnectStreamingRepoRunMaster(System.Guid repo)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(DisconnectStreamingRepoCreateDeferredDelegate(repo), nameof(DisconnectStreamingRepo));
            }

            return await DisconnectStreamingRepoRun(repo);
        }

        public async ValueTask<bool> DisconnectStreamingRepoRun(System.Guid repo)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 20);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = DisconnectStreamingRepoImpl(repo);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> Teleport(System.Guid oldRepositoryGuid)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return TeleportRunMaster(oldRepositoryGuid).AsTask();
                else
                    return TeleportRun(oldRepositoryGuid).AsTask();
            else
                return SendFuncs.Teleport(oldRepositoryGuid, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> TeleportCreateDeferredDelegate(System.Guid oldRepositoryGuid) => () =>
        {
            return Teleport(oldRepositoryGuid);
        }

        ;
        public async ValueTask<bool> TeleportRunMaster(System.Guid oldRepositoryGuid)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(TeleportCreateDeferredDelegate(oldRepositoryGuid), nameof(Teleport));
            }

            return await TeleportRun(oldRepositoryGuid);
        }

        public async ValueTask<bool> TeleportRun(System.Guid oldRepositoryGuid)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 21);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(Teleport)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = TeleportImpl(oldRepositoryGuid);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> PrepareStaticsFor(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> sceneEntity)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return PrepareStaticsForRunMaster(sceneEntity).AsTask();
                else
                    return PrepareStaticsForRun(sceneEntity).AsTask();
            else
                return SendFuncs.PrepareStaticsFor(sceneEntity, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> PrepareStaticsForCreateDeferredDelegate(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> sceneEntity) => () =>
        {
            return PrepareStaticsFor(sceneEntity);
        }

        ;
        public async ValueTask<bool> PrepareStaticsForRunMaster(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> sceneEntity)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(PrepareStaticsForCreateDeferredDelegate(sceneEntity), nameof(PrepareStaticsFor));
            }

            return await PrepareStaticsForRun(sceneEntity);
        }

        public async ValueTask<bool> PrepareStaticsForRun(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> sceneEntity)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 22);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(PrepareStaticsFor)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = PrepareStaticsForImpl(sceneEntity);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> SpawnEntity(System.Guid staticIdFromExport, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent, SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, GeneratedCode.MapSystem.MapOwner mapOwner, System.Guid spawner, SharedCode.Entities.GameObjectEntities.IEntityObjectDef def, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, SharedCode.Entities.GameObjectEntities.ScenicEntityDef scenicEntityDef, Scripting.ScriptingContext ctx)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SpawnEntityRunMaster(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx).AsTask();
                else
                    return SpawnEntityRun(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx).AsTask();
            else
                return SendFuncs.SpawnEntity(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> SpawnEntityCreateDeferredDelegate(System.Guid staticIdFromExport, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent, SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, GeneratedCode.MapSystem.MapOwner mapOwner, System.Guid spawner, SharedCode.Entities.GameObjectEntities.IEntityObjectDef def, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, SharedCode.Entities.GameObjectEntities.ScenicEntityDef scenicEntityDef, Scripting.ScriptingContext ctx) => () =>
        {
            return SpawnEntity(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx);
        }

        ;
        public async ValueTask<bool> SpawnEntityRunMaster(System.Guid staticIdFromExport, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent, SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, GeneratedCode.MapSystem.MapOwner mapOwner, System.Guid spawner, SharedCode.Entities.GameObjectEntities.IEntityObjectDef def, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, SharedCode.Entities.GameObjectEntities.ScenicEntityDef scenicEntityDef, Scripting.ScriptingContext ctx)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SpawnEntityCreateDeferredDelegate(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx), nameof(SpawnEntity));
            }

            return await SpawnEntityRun(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx);
        }

        public async ValueTask<bool> SpawnEntityRun(System.Guid staticIdFromExport, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent, SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, GeneratedCode.MapSystem.MapOwner mapOwner, System.Guid spawner, SharedCode.Entities.GameObjectEntities.IEntityObjectDef def, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, SharedCode.Entities.GameObjectEntities.ScenicEntityDef scenicEntityDef, Scripting.ScriptingContext ctx)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 23);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = SpawnEntityImpl(staticIdFromExport, ent, pos, rot, mapOwner, spawner, def, point, scenicEntityDef, ctx);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> DespawnEntity(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return DespawnEntityRunMaster(ent).AsTask();
                else
                    return DespawnEntityRun(ent).AsTask();
            else
                return SendFuncs.DespawnEntity(ent, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> DespawnEntityCreateDeferredDelegate(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent) => () =>
        {
            return DespawnEntity(ent);
        }

        ;
        public async ValueTask<bool> DespawnEntityRunMaster(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(DespawnEntityCreateDeferredDelegate(ent), nameof(DespawnEntity));
            }

            return await DespawnEntityRun(ent);
        }

        public async ValueTask<bool> DespawnEntityRun(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 24);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = DespawnEntityImpl(ent);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.Entities.GameObjectEntities.PositionRotation> GetPositionToSpawnAt(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef overrideAllowedPointType)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetPositionToSpawnAtRunMaster(charId, checkBakens, anyCommonBaken, commonBakenId, overrideAllowedPointType).AsTask();
                else
                    return GetPositionToSpawnAtRun(charId, checkBakens, anyCommonBaken, commonBakenId, overrideAllowedPointType).AsTask();
            else
                return SendFuncs.GetPositionToSpawnAt(charId, checkBakens, anyCommonBaken, commonBakenId, overrideAllowedPointType, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.GameObjectEntities.PositionRotation>> GetPositionToSpawnAtCreateDeferredDelegate(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef overrideAllowedPointType) => () =>
        {
            return GetPositionToSpawnAt(charId, checkBakens, anyCommonBaken, commonBakenId, overrideAllowedPointType);
        }

        ;
        public async ValueTask<SharedCode.Entities.GameObjectEntities.PositionRotation> GetPositionToSpawnAtRunMaster(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef overrideAllowedPointType)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetPositionToSpawnAtCreateDeferredDelegate(charId, checkBakens, anyCommonBaken, commonBakenId, overrideAllowedPointType), nameof(GetPositionToSpawnAt));
            }

            return await GetPositionToSpawnAtRun(charId, checkBakens, anyCommonBaken, commonBakenId, overrideAllowedPointType);
        }

        public async ValueTask<SharedCode.Entities.GameObjectEntities.PositionRotation> GetPositionToSpawnAtRun(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef overrideAllowedPointType)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 25);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetPositionToSpawnAtImpl(charId, checkBakens, anyCommonBaken, commonBakenId, overrideAllowedPointType);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> RegisterWorldObjectsInNewInformationSet(ResourceSystem.Utils.OuterRef worldObjectSetRef)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RegisterWorldObjectsInNewInformationSetRunMaster(worldObjectSetRef).AsTask();
                else
                    return RegisterWorldObjectsInNewInformationSetRun(worldObjectSetRef).AsTask();
            else
                return SendFuncs.RegisterWorldObjectsInNewInformationSet(worldObjectSetRef, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> RegisterWorldObjectsInNewInformationSetCreateDeferredDelegate(ResourceSystem.Utils.OuterRef worldObjectSetRef) => () =>
        {
            return RegisterWorldObjectsInNewInformationSet(worldObjectSetRef);
        }

        ;
        public async ValueTask<bool> RegisterWorldObjectsInNewInformationSetRunMaster(ResourceSystem.Utils.OuterRef worldObjectSetRef)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RegisterWorldObjectsInNewInformationSetCreateDeferredDelegate(worldObjectSetRef), nameof(RegisterWorldObjectsInNewInformationSet));
            }

            return await RegisterWorldObjectsInNewInformationSetRun(worldObjectSetRef);
        }

        public async ValueTask<bool> RegisterWorldObjectsInNewInformationSetRun(ResourceSystem.Utils.OuterRef worldObjectSetRef)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IWorldSpaceServiceEntity), 26);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = RegisterWorldObjectsInNewInformationSetImpl(worldObjectSetRef);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}