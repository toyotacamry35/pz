// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Entities.Service;
using SharedCode.EntitySystem.ChainCalls;
using SharedCode.Logging;
using SharedCode.OurSimpleIoC;
using SharedCode.Serializers;
using SharedCode.Utils;
using System.Linq;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using GeneratedCode.DeltaObjects.Chain;

[GeneratedCode("CodeGen", "1.0")]
public class CraftEngineAlwaysChainProxy : IChainedEntity
{
    private CraftEngineChainProxy __chain__;
    public CraftEngineAlwaysChainProxy(CraftEngineChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CraftEngineAlwaysChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CraftEngineAlwaysChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CraftEngineAlwaysChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CraftEngineAlwaysChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineAlways entity)
    {
        return new CraftEngineAlwaysChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject()));
    }

    public static CraftEngineAlwaysChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineAlways entity, IChainedEntity fromChain)
    {
        return new CraftEngineAlwaysChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CraftEngineClientBroadcastChainProxy : IChainedEntity
{
    private CraftEngineChainProxy __chain__;
    public CraftEngineClientBroadcastChainProxy(CraftEngineChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CraftEngineClientBroadcastChainProxy UpdateFuelTime()
    {
        __chain__.UpdateFuelTime();
        return this;
    }

    public CraftEngineClientBroadcastChainProxy UpdateCraftingTime()
    {
        __chain__.UpdateCraftingTime();
        return this;
    }

    public CraftEngineClientBroadcastChainProxy UpdateRepairTime(ChainArgument<SharedCode.EntitySystem.PropertyAddress> itemAddress, ChainArgument<int> itemIndex)
    {
        __chain__.UpdateRepairTime(itemAddress, itemIndex);
        return this;
    }

    public CraftEngineClientBroadcastChainProxy CanRun()
    {
        __chain__.CanRun();
        return this;
    }

    public CraftEngineClientBroadcastChainProxy RunCraft()
    {
        __chain__.RunCraft();
        return this;
    }

    public CraftEngineClientBroadcastChainProxy StopCraft()
    {
        __chain__.StopCraft();
        return this;
    }

    public CraftEngineClientBroadcastChainProxy Craft(ChainArgument<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef> recipe, ChainArgument<int> variantIdx, ChainArgument<int> count, ChainArgument<int[]> mandatorySlotPermutation, ChainArgument<int[]> optionalSlotPermutation, ChainArgument<SharedCode.EntitySystem.PropertyAddress> inventoryAddress, ChainArgument<SharedCode.EntitySystem.PropertyAddress> inventoryAddress2)
    {
        __chain__.Craft(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2);
        return this;
    }

    public CraftEngineClientBroadcastChainProxy Repair(ChainArgument<SharedCode.EntitySystem.PropertyAddress> itemAddress, ChainArgument<int> itemIndex, ChainArgument<int> recipeIndex, ChainArgument<int> variantIdx, ChainArgument<int[]> mandatorySlotPermutation, ChainArgument<int[]> optionalSlotPermutation, ChainArgument<SharedCode.EntitySystem.PropertyAddress> fromInventoryAddress, ChainArgument<SharedCode.EntitySystem.PropertyAddress> fromInventoryAddress2)
    {
        __chain__.Repair(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2);
        return this;
    }

    public CraftEngineClientBroadcastChainProxy RemoveCraft(ChainArgument<int> recipeIndex)
    {
        __chain__.RemoveCraft(recipeIndex);
        return this;
    }

    public CraftEngineClientBroadcastChainProxy SwapCraft(ChainArgument<int> index1, ChainArgument<int> index2)
    {
        __chain__.SwapCraft(index1, index2);
        return this;
    }

    public CraftEngineClientBroadcastChainProxy StopCraftWithWorkbench(ChainArgument<SharedCode.Aspects.Item.Templates.WorkbenchTypeDef> workbenchType)
    {
        __chain__.StopCraftWithWorkbench(workbenchType);
        return this;
    }

    public CraftEngineClientBroadcastChainProxy ContinueCraftWithWorkbench(ChainArgument<SharedCode.Aspects.Item.Templates.WorkbenchTypeDef> workbenchType)
    {
        __chain__.ContinueCraftWithWorkbench(workbenchType);
        return this;
    }

    public CraftEngineClientBroadcastChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CraftEngineClientBroadcastChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CraftEngineClientBroadcastChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CraftEngineClientBroadcastChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineClientBroadcast entity)
    {
        return new CraftEngineClientBroadcastChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject()));
    }

    public static CraftEngineClientBroadcastChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineClientBroadcast entity, IChainedEntity fromChain)
    {
        return new CraftEngineClientBroadcastChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CraftEngineClientFullApiChainProxy : IChainedEntity
{
    private CraftEngineChainProxy __chain__;
    public CraftEngineClientFullApiChainProxy(CraftEngineChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CraftEngineClientFullApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CraftEngineClientFullApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CraftEngineClientFullApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CraftEngineClientFullApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineClientFullApi entity)
    {
        return new CraftEngineClientFullApiChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject()));
    }

    public static CraftEngineClientFullApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineClientFullApi entity, IChainedEntity fromChain)
    {
        return new CraftEngineClientFullApiChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CraftEngineClientFullChainProxy : IChainedEntity
{
    private CraftEngineChainProxy __chain__;
    public CraftEngineClientFullChainProxy(CraftEngineChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CraftEngineClientFullChainProxy UpdateFuelTime()
    {
        __chain__.UpdateFuelTime();
        return this;
    }

    public CraftEngineClientFullChainProxy UpdateCraftingTime()
    {
        __chain__.UpdateCraftingTime();
        return this;
    }

    public CraftEngineClientFullChainProxy UpdateRepairTime(ChainArgument<SharedCode.EntitySystem.PropertyAddress> itemAddress, ChainArgument<int> itemIndex)
    {
        __chain__.UpdateRepairTime(itemAddress, itemIndex);
        return this;
    }

    public CraftEngineClientFullChainProxy CanRun()
    {
        __chain__.CanRun();
        return this;
    }

    public CraftEngineClientFullChainProxy RunCraft()
    {
        __chain__.RunCraft();
        return this;
    }

    public CraftEngineClientFullChainProxy StopCraft()
    {
        __chain__.StopCraft();
        return this;
    }

    public CraftEngineClientFullChainProxy Craft(ChainArgument<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef> recipe, ChainArgument<int> variantIdx, ChainArgument<int> count, ChainArgument<int[]> mandatorySlotPermutation, ChainArgument<int[]> optionalSlotPermutation, ChainArgument<SharedCode.EntitySystem.PropertyAddress> inventoryAddress, ChainArgument<SharedCode.EntitySystem.PropertyAddress> inventoryAddress2)
    {
        __chain__.Craft(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2);
        return this;
    }

    public CraftEngineClientFullChainProxy Repair(ChainArgument<SharedCode.EntitySystem.PropertyAddress> itemAddress, ChainArgument<int> itemIndex, ChainArgument<int> recipeIndex, ChainArgument<int> variantIdx, ChainArgument<int[]> mandatorySlotPermutation, ChainArgument<int[]> optionalSlotPermutation, ChainArgument<SharedCode.EntitySystem.PropertyAddress> fromInventoryAddress, ChainArgument<SharedCode.EntitySystem.PropertyAddress> fromInventoryAddress2)
    {
        __chain__.Repair(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2);
        return this;
    }

    public CraftEngineClientFullChainProxy RemoveCraft(ChainArgument<int> recipeIndex)
    {
        __chain__.RemoveCraft(recipeIndex);
        return this;
    }

    public CraftEngineClientFullChainProxy SwapCraft(ChainArgument<int> index1, ChainArgument<int> index2)
    {
        __chain__.SwapCraft(index1, index2);
        return this;
    }

    public CraftEngineClientFullChainProxy StopCraftWithWorkbench(ChainArgument<SharedCode.Aspects.Item.Templates.WorkbenchTypeDef> workbenchType)
    {
        __chain__.StopCraftWithWorkbench(workbenchType);
        return this;
    }

    public CraftEngineClientFullChainProxy ContinueCraftWithWorkbench(ChainArgument<SharedCode.Aspects.Item.Templates.WorkbenchTypeDef> workbenchType)
    {
        __chain__.ContinueCraftWithWorkbench(workbenchType);
        return this;
    }

    public CraftEngineClientFullChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CraftEngineClientFullChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CraftEngineClientFullChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CraftEngineClientFullChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineClientFull entity)
    {
        return new CraftEngineClientFullChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject()));
    }

    public static CraftEngineClientFullChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineClientFull entity, IChainedEntity fromChain)
    {
        return new CraftEngineClientFullChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CraftEngineServerApiChainProxy : IChainedEntity
{
    private CraftEngineChainProxy __chain__;
    public CraftEngineServerApiChainProxy(CraftEngineChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CraftEngineServerApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CraftEngineServerApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CraftEngineServerApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CraftEngineServerApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineServerApi entity)
    {
        return new CraftEngineServerApiChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject()));
    }

    public static CraftEngineServerApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineServerApi entity, IChainedEntity fromChain)
    {
        return new CraftEngineServerApiChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class CraftEngineServerChainProxy : IChainedEntity
{
    private CraftEngineChainProxy __chain__;
    public CraftEngineServerChainProxy(CraftEngineChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public CraftEngineServerChainProxy SetResultContainerAddress(ChainArgument<SharedCode.EntitySystem.PropertyAddress> resultContainerAddress)
    {
        __chain__.SetResultContainerAddress(resultContainerAddress);
        return this;
    }

    public CraftEngineServerChainProxy UpdateFuelTime()
    {
        __chain__.UpdateFuelTime();
        return this;
    }

    public CraftEngineServerChainProxy UpdateCraftingTime()
    {
        __chain__.UpdateCraftingTime();
        return this;
    }

    public CraftEngineServerChainProxy UpdateRepairTime(ChainArgument<SharedCode.EntitySystem.PropertyAddress> itemAddress, ChainArgument<int> itemIndex)
    {
        __chain__.UpdateRepairTime(itemAddress, itemIndex);
        return this;
    }

    public CraftEngineServerChainProxy CanRun()
    {
        __chain__.CanRun();
        return this;
    }

    public CraftEngineServerChainProxy RunCraft()
    {
        __chain__.RunCraft();
        return this;
    }

    public CraftEngineServerChainProxy StopCraft()
    {
        __chain__.StopCraft();
        return this;
    }

    public CraftEngineServerChainProxy Craft(ChainArgument<Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef> recipe, ChainArgument<int> variantIdx, ChainArgument<int> count, ChainArgument<int[]> mandatorySlotPermutation, ChainArgument<int[]> optionalSlotPermutation, ChainArgument<SharedCode.EntitySystem.PropertyAddress> inventoryAddress, ChainArgument<SharedCode.EntitySystem.PropertyAddress> inventoryAddress2)
    {
        __chain__.Craft(recipe, variantIdx, count, mandatorySlotPermutation, optionalSlotPermutation, inventoryAddress, inventoryAddress2);
        return this;
    }

    public CraftEngineServerChainProxy Repair(ChainArgument<SharedCode.EntitySystem.PropertyAddress> itemAddress, ChainArgument<int> itemIndex, ChainArgument<int> recipeIndex, ChainArgument<int> variantIdx, ChainArgument<int[]> mandatorySlotPermutation, ChainArgument<int[]> optionalSlotPermutation, ChainArgument<SharedCode.EntitySystem.PropertyAddress> fromInventoryAddress, ChainArgument<SharedCode.EntitySystem.PropertyAddress> fromInventoryAddress2)
    {
        __chain__.Repair(itemAddress, itemIndex, recipeIndex, variantIdx, mandatorySlotPermutation, optionalSlotPermutation, fromInventoryAddress, fromInventoryAddress2);
        return this;
    }

    public CraftEngineServerChainProxy RemoveCraft(ChainArgument<int> recipeIndex)
    {
        __chain__.RemoveCraft(recipeIndex);
        return this;
    }

    public CraftEngineServerChainProxy SwapCraft(ChainArgument<int> index1, ChainArgument<int> index2)
    {
        __chain__.SwapCraft(index1, index2);
        return this;
    }

    public CraftEngineServerChainProxy StopCraftWithWorkbench(ChainArgument<SharedCode.Aspects.Item.Templates.WorkbenchTypeDef> workbenchType)
    {
        __chain__.StopCraftWithWorkbench(workbenchType);
        return this;
    }

    public CraftEngineServerChainProxy ContinueCraftWithWorkbench(ChainArgument<SharedCode.Aspects.Item.Templates.WorkbenchTypeDef> workbenchType)
    {
        __chain__.ContinueCraftWithWorkbench(workbenchType);
        return this;
    }

    public CraftEngineServerChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public CraftEngineServerChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public CraftEngineServerChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static CraftEngineServerChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineServer entity)
    {
        return new CraftEngineServerChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject()));
    }

    public static CraftEngineServerChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftEngineServer entity, IChainedEntity fromChain)
    {
        return new CraftEngineServerChainProxy(new CraftEngineChainProxy((SharedCode.Entities.Engine.ICraftEngine)entity.GetBaseDeltaObject(), fromChain));
    }
}