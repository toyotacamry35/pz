// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("TimeoutTestEntity")]
    public partial class TimeoutTestEntity : SharedCode.EntitySystem.BaseEntity, GeneratedCode.EntityModel.Test.ITimeoutTestEntity, ITimeoutTestEntityImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public TimeoutTestEntity()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                TestDeltaListInt = new SharedCode.EntitySystem.Delta.DeltaList<int>();
                TestDeltaListDeltaObject = new SharedCode.EntitySystem.Delta.DeltaList<GeneratedCode.EntityModel.Test.ITestDeltaObject>();
                TestDeltaDictionaryInt = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, int>();
                TestDeltaDictionaryIntDeltaObject = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, GeneratedCode.EntityModel.Test.ITestDeltaObject>();
                TestProperty = default(int);
            }

            constructor();
        }

        public TimeoutTestEntity(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                TestDeltaListInt = new SharedCode.EntitySystem.Delta.DeltaList<int>();
                TestDeltaListDeltaObject = new SharedCode.EntitySystem.Delta.DeltaList<GeneratedCode.EntityModel.Test.ITestDeltaObject>();
                TestDeltaDictionaryInt = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, int>();
                TestDeltaDictionaryIntDeltaObject = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, GeneratedCode.EntityModel.Test.ITestDeltaObject>();
                TestProperty = default(int);
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_TestDeltaListInt != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestDeltaListInt).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_TestDeltaListDeltaObject != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestDeltaListDeltaObject).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_TestDeltaDictionaryInt != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestDeltaDictionaryInt).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_TestDeltaDictionaryIntDeltaObject != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestDeltaDictionaryIntDeltaObject).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestDeltaListInt, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestDeltaListDeltaObject, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestDeltaDictionaryInt, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestDeltaDictionaryIntDeltaObject, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestDeltaListInt, 10, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestDeltaListDeltaObject, 11, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestDeltaDictionaryInt, 12, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestDeltaDictionaryIntDeltaObject, 13, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListInt)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListDeltaObject)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryInt)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryIntDeltaObject)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestDeltaListInt, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestDeltaListDeltaObject, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestDeltaDictionaryInt, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestDeltaDictionaryIntDeltaObject, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListInt)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListDeltaObject)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryInt)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryIntDeltaObject)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "TestDeltaListInt":
                    TestDeltaListInt__Changed += callback;
                    break;
                case "TestDeltaListDeltaObject":
                    TestDeltaListDeltaObject__Changed += callback;
                    break;
                case "TestDeltaDictionaryInt":
                    TestDeltaDictionaryInt__Changed += callback;
                    break;
                case "TestDeltaDictionaryIntDeltaObject":
                    TestDeltaDictionaryIntDeltaObject__Changed += callback;
                    break;
                case "TestProperty":
                    TestProperty__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "TestDeltaListInt":
                    TestDeltaListInt__Changed -= callback;
                    break;
                case "TestDeltaListDeltaObject":
                    TestDeltaListDeltaObject__Changed -= callback;
                    break;
                case "TestDeltaDictionaryInt":
                    TestDeltaDictionaryInt__Changed -= callback;
                    break;
                case "TestDeltaDictionaryIntDeltaObject":
                    TestDeltaDictionaryIntDeltaObject__Changed -= callback;
                    break;
                case "TestProperty":
                    TestProperty__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "TestDeltaListInt":
                    TestDeltaListInt__Changed = null;
                    break;
                case "TestDeltaListDeltaObject":
                    TestDeltaListDeltaObject__Changed = null;
                    break;
                case "TestDeltaDictionaryInt":
                    TestDeltaDictionaryInt__Changed = null;
                    break;
                case "TestDeltaDictionaryIntDeltaObject":
                    TestDeltaDictionaryIntDeltaObject__Changed = null;
                    break;
                case "TestProperty":
                    TestProperty__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            TestDeltaListInt__Changed = null;
            TestDeltaListDeltaObject__Changed = null;
            TestDeltaDictionaryInt__Changed = null;
            TestDeltaDictionaryIntDeltaObject__Changed = null;
            TestProperty__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && TestDeltaListInt__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestDeltaListInt, nameof(TestDeltaListInt), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestDeltaListInt__Changed);
            }

            if (NeedFireEvent(11) && TestDeltaListDeltaObject__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestDeltaListDeltaObject, nameof(TestDeltaListDeltaObject), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestDeltaListDeltaObject__Changed);
            }

            if (NeedFireEvent(12) && TestDeltaDictionaryInt__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestDeltaDictionaryInt, nameof(TestDeltaDictionaryInt), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestDeltaDictionaryInt__Changed);
            }

            if (NeedFireEvent(13) && TestDeltaDictionaryIntDeltaObject__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestDeltaDictionaryIntDeltaObject, nameof(TestDeltaDictionaryIntDeltaObject), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestDeltaDictionaryIntDeltaObject__Changed);
            }

            if (NeedFireEvent(14) && TestProperty__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestProperty, nameof(TestProperty), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestProperty__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                TestDeltaListInt = default;
            if (_TestDeltaListInt != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListInt).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                TestDeltaListDeltaObject = default;
            if (_TestDeltaListDeltaObject != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListDeltaObject).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                TestDeltaDictionaryInt = default;
            if (_TestDeltaDictionaryInt != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryInt).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                TestDeltaDictionaryIntDeltaObject = default;
            if (_TestDeltaDictionaryIntDeltaObject != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryIntDeltaObject).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                TestProperty = default;
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("TestDeltaObject")]
    public partial class TestDeltaObject : SharedCode.EntitySystem.BaseDeltaObject, GeneratedCode.EntityModel.Test.ITestDeltaObject
    {
        public TestDeltaObject()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                Value = default(int);
            }

            constructor();
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Value":
                    Value__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Value":
                    Value__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "Value":
                    Value__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            Value__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && Value__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Value, nameof(Value), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Value__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Value = default;
        }
    }
}

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("TimeoutSubTestEntity")]
    public partial class TimeoutSubTestEntity : SharedCode.EntitySystem.BaseEntity, GeneratedCode.EntityModel.Test.ITimeoutSubTestEntity, ITimeoutSubTestEntityImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public TimeoutSubTestEntity()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                TestDeltaListInt = new SharedCode.EntitySystem.Delta.DeltaList<int>();
                TestDeltaListDeltaObject = new SharedCode.EntitySystem.Delta.DeltaList<GeneratedCode.EntityModel.Test.ITestDeltaObject>();
                TestDeltaDictionaryInt = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, int>();
                TestDeltaDictionaryIntDeltaObject = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, GeneratedCode.EntityModel.Test.ITestDeltaObject>();
                TestProperty = default(int);
            }

            constructor();
        }

        public TimeoutSubTestEntity(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                TestDeltaListInt = new SharedCode.EntitySystem.Delta.DeltaList<int>();
                TestDeltaListDeltaObject = new SharedCode.EntitySystem.Delta.DeltaList<GeneratedCode.EntityModel.Test.ITestDeltaObject>();
                TestDeltaDictionaryInt = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, int>();
                TestDeltaDictionaryIntDeltaObject = new SharedCode.EntitySystem.Delta.DeltaDictionary<int, GeneratedCode.EntityModel.Test.ITestDeltaObject>();
                TestProperty = default(int);
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_TestDeltaListInt != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestDeltaListInt).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_TestDeltaListDeltaObject != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestDeltaListDeltaObject).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_TestDeltaDictionaryInt != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestDeltaDictionaryInt).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_TestDeltaDictionaryIntDeltaObject != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_TestDeltaDictionaryIntDeltaObject).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestDeltaListInt, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestDeltaListDeltaObject, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestDeltaDictionaryInt, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _TestDeltaDictionaryIntDeltaObject, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestDeltaListInt, 10, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestDeltaListDeltaObject, 11, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestDeltaDictionaryInt, 12, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _TestDeltaDictionaryIntDeltaObject, 13, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListInt)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListDeltaObject)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryInt)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryIntDeltaObject)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestDeltaListInt, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestDeltaListDeltaObject, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestDeltaDictionaryInt, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _TestDeltaDictionaryIntDeltaObject, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListInt)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListDeltaObject)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryInt)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryIntDeltaObject)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "TestDeltaListInt":
                    TestDeltaListInt__Changed += callback;
                    break;
                case "TestDeltaListDeltaObject":
                    TestDeltaListDeltaObject__Changed += callback;
                    break;
                case "TestDeltaDictionaryInt":
                    TestDeltaDictionaryInt__Changed += callback;
                    break;
                case "TestDeltaDictionaryIntDeltaObject":
                    TestDeltaDictionaryIntDeltaObject__Changed += callback;
                    break;
                case "TestProperty":
                    TestProperty__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "TestDeltaListInt":
                    TestDeltaListInt__Changed -= callback;
                    break;
                case "TestDeltaListDeltaObject":
                    TestDeltaListDeltaObject__Changed -= callback;
                    break;
                case "TestDeltaDictionaryInt":
                    TestDeltaDictionaryInt__Changed -= callback;
                    break;
                case "TestDeltaDictionaryIntDeltaObject":
                    TestDeltaDictionaryIntDeltaObject__Changed -= callback;
                    break;
                case "TestProperty":
                    TestProperty__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "TestDeltaListInt":
                    TestDeltaListInt__Changed = null;
                    break;
                case "TestDeltaListDeltaObject":
                    TestDeltaListDeltaObject__Changed = null;
                    break;
                case "TestDeltaDictionaryInt":
                    TestDeltaDictionaryInt__Changed = null;
                    break;
                case "TestDeltaDictionaryIntDeltaObject":
                    TestDeltaDictionaryIntDeltaObject__Changed = null;
                    break;
                case "TestProperty":
                    TestProperty__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            TestDeltaListInt__Changed = null;
            TestDeltaListDeltaObject__Changed = null;
            TestDeltaDictionaryInt__Changed = null;
            TestDeltaDictionaryIntDeltaObject__Changed = null;
            TestProperty__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && TestDeltaListInt__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestDeltaListInt, nameof(TestDeltaListInt), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestDeltaListInt__Changed);
            }

            if (NeedFireEvent(11) && TestDeltaListDeltaObject__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestDeltaListDeltaObject, nameof(TestDeltaListDeltaObject), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestDeltaListDeltaObject__Changed);
            }

            if (NeedFireEvent(12) && TestDeltaDictionaryInt__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestDeltaDictionaryInt, nameof(TestDeltaDictionaryInt), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestDeltaDictionaryInt__Changed);
            }

            if (NeedFireEvent(13) && TestDeltaDictionaryIntDeltaObject__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestDeltaDictionaryIntDeltaObject, nameof(TestDeltaDictionaryIntDeltaObject), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestDeltaDictionaryIntDeltaObject__Changed);
            }

            if (NeedFireEvent(14) && TestProperty__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_TestProperty, nameof(TestProperty), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, TestProperty__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                TestDeltaListInt = default;
            if (_TestDeltaListInt != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListInt).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                TestDeltaListDeltaObject = default;
            if (_TestDeltaListDeltaObject != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaListDeltaObject).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                TestDeltaDictionaryInt = default;
            if (_TestDeltaDictionaryInt != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryInt).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                TestDeltaDictionaryIntDeltaObject = default;
            if (_TestDeltaDictionaryIntDeltaObject != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_TestDeltaDictionaryIntDeltaObject).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                TestProperty = default;
        }
    }
}