// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Entities.Service;
using SharedCode.EntitySystem.ChainCalls;
using SharedCode.Logging;
using SharedCode.OurSimpleIoC;
using SharedCode.Utils;
using System.Linq;
using System.Collections.Generic;
using System.CodeDom.Compiler;

namespace GeneratedCode.DeltaObjects.Chain
{
    [GeneratedCode("CodeGen", "1.0")]
    public class ToucherTestEntityChainProxy : BaseChainEntity
    {
        public ToucherTestEntityChainProxy(GeneratedCode.EntityModel.Test.IToucherTestEntity entity): base(entity)
        {
        }

        public ToucherTestEntityChainProxy(GeneratedCode.EntityModel.Test.IToucherTestEntity entity, IChainedEntity fromChain): base(entity, fromChain)
        {
        }

        public ToucherTestEntityChainProxy ChangeDeltaObjProperty(ChainArgument<int> childsIntProperty)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (childsIntProperty is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)childsIntProperty).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)childsIntProperty);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 0, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy AddDictionaryChild(ChainArgument<int> key, ChainArgument<int> childsIntProperty)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (key is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)key).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)key);
                if (childsIntProperty is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)childsIntProperty).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)childsIntProperty);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 1, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy SetDictionaryChild(ChainArgument<int> key, ChainArgument<int> childsIntProperty)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (key is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)key).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)key);
                if (childsIntProperty is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)childsIntProperty).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)childsIntProperty);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 2, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy RemoveDictionaryChild(ChainArgument<int> key)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (key is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)key).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)key);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 3, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy ClearDictionaryChild()
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 4, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy AddFlatDictionary(ChainArgument<int> key, ChainArgument<decimal> value)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (key is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)key).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)key);
                if (value is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)value).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (decimal)value);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 5, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy RemoveFlatDictionary(ChainArgument<int> key)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (key is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)key).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)key);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 6, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy InsertFlatList(ChainArgument<int> index, ChainArgument<decimal> value)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (index is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)index).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)index);
                if (value is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)value).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (decimal)value);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 7, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy SetFlatList(ChainArgument<int> index, ChainArgument<decimal> value)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (index is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)index).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)index);
                if (value is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)value).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (decimal)value);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 8, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy RemoveFlatList(ChainArgument<int> index)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (index is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)index).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)index);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 9, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy InsertListOfChildren(ChainArgument<int> index, ChainArgument<int> childsIntProperty)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (index is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)index).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)index);
                if (childsIntProperty is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)childsIntProperty).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)childsIntProperty);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 10, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy SetListOfChildren(ChainArgument<int> index, ChainArgument<int> childsIntProperty)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (index is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)index).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)index);
                if (childsIntProperty is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)childsIntProperty).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)childsIntProperty);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 11, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy RemoveListOfChildren(ChainArgument<int> index)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (index is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)index).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)index);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 12, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy SetListOfChildren(ChainArgument<int> index, ChainArgument<GeneratedCode.EntityModel.Test.IToucherTestDeltaObject> child)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (index is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)index).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)index);
                if (child is IChainResult)
                    argumetRefs.Add(1, ((IChainResult)child).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (GeneratedCode.EntityModel.Test.IToucherTestDeltaObject)child);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 13, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy SetIntProperty(ChainArgument<int> i)
        {
            var argumetRefs = new Dictionary<int, string>();
            var __id__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(__entity__);
            int offset = 0;
            var __buffer__ = EntitySystem.RpcHelper.BufferPool.Take();
            try
            {
                var serializer = ServicesPool.Services.Get<SharedCode.Serializers.ISerializer>();
                if (i is IChainResult)
                    argumetRefs.Add(0, ((IChainResult)i).Key);
                else
                    __buffer__ = serializer.Serialize(__buffer__, ref offset, (int)i);
                byte[] buffer = new byte[offset];
                Buffer.BlockCopy(__buffer__, 0, buffer, 0, offset);
                var __newBlock__ = new ChainBlockCall(__id__, 14, buffer, argumetRefs);
                validateCallBlock(__newBlock__);
                chainBatch.Chain.Add(__newBlock__);
            }
            finally
            {
                EntitySystem.RpcHelper.BufferPool.Return(__buffer__);
            }

            return this;
        }

        public ToucherTestEntityChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
        {
            chainBatch.Chain.Add(new ChainBlockPeriod(duration, repeat ? -1 : 0, fromUtcNow));
            return this;
        }

        public ToucherTestEntityChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
        {
            chainBatch.Chain.Add(new ChainBlockPeriod(duration, count, fromUtcNow));
            return this;
        }

        public ToucherTestEntityChainProxy StoreResult(string name)
        {
            ((ChainBlockCall)chainBatch.Chain.Last()).SetStoreResultKey(name);
            return this;
        }
    }

    public static partial class ChainProxyExtensions
    {
        public static ToucherTestEntityChainProxy Chain(this GeneratedCode.EntityModel.Test.IToucherTestEntity entity)
        {
            return new ToucherTestEntityChainProxy(entity);
        }

        public static ToucherTestEntityChainProxy ContinueChain(this GeneratedCode.EntityModel.Test.IToucherTestEntity entity, IChainedEntity fromChain)
        {
            return new ToucherTestEntityChainProxy(entity, fromChain);
        }
    }
}