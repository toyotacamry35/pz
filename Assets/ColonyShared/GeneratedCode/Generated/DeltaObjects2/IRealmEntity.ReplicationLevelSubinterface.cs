// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, 1668943516, typeof(SharedCode.Entities.IRealmEntity))]
    public interface IRealmEntityAlways : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Aspects.Sessions.RealmRulesDef Def
        {
            get;
        }

        bool Dead
        {
            get;
        }

        bool AllowsToJoin
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<System.Guid, SharedCode.MapSystem.MapMeta> Maps
        {
            get;
        }

        System.Threading.Tasks.Task<bool> AddMap(System.Guid mapId, SharedCode.MapSystem.MapMeta mapMeta);
        System.Threading.Tasks.Task<bool> RemoveMap(System.Guid mapId);
        System.Threading.Tasks.Task<bool> SetActive(bool active);
        System.Threading.Tasks.Task<bool> SetMapDead(System.Guid mapId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, 1702309002, typeof(SharedCode.Entities.IRealmEntity))]
    public interface IRealmEntityClientBroadcast : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Aspects.Sessions.RealmRulesDef Def
        {
            get;
        }

        long StartTime
        {
            get;
        }

        bool Active
        {
            get;
        }

        bool Dead
        {
            get;
        }

        bool AllowsToJoin
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<System.Guid, SharedCode.MapSystem.MapMeta> Maps
        {
            get;
        }

        System.Threading.Tasks.Task<bool> AddMap(System.Guid mapId, SharedCode.MapSystem.MapMeta mapMeta);
        System.Threading.Tasks.Task<bool> RemoveMap(System.Guid mapId);
        System.Threading.Tasks.Task<bool> SetActive(bool active);
        System.Threading.Tasks.Task<bool> SetMapDead(System.Guid mapId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, 1910632707, typeof(SharedCode.Entities.IRealmEntity))]
    public interface IRealmEntityClientFullApi : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, 452813783, typeof(SharedCode.Entities.IRealmEntity))]
    public interface IRealmEntityClientFull : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Aspects.Sessions.RealmRulesDef Def
        {
            get;
        }

        long StartTime
        {
            get;
        }

        bool Active
        {
            get;
        }

        bool Dead
        {
            get;
        }

        bool AllowsToJoin
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<System.Guid, SharedCode.MapSystem.MapMeta> Maps
        {
            get;
        }

        System.Threading.Tasks.Task<bool> AddMap(System.Guid mapId, SharedCode.MapSystem.MapMeta mapMeta);
        System.Threading.Tasks.Task<bool> RemoveMap(System.Guid mapId);
        System.Threading.Tasks.Task<bool> SetActive(bool active);
        System.Threading.Tasks.Task<bool> SetMapDead(System.Guid mapId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, -1385393529, typeof(SharedCode.Entities.IRealmEntity))]
    public interface IRealmEntityServerApi : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, 1434477928, typeof(SharedCode.Entities.IRealmEntity))]
    public interface IRealmEntityServer : SharedCode.EntitySystem.IEntity, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Aspects.Sessions.RealmRulesDef Def
        {
            get;
        }

        long StartTime
        {
            get;
        }

        bool Active
        {
            get;
        }

        bool Dead
        {
            get;
        }

        bool AllowsToJoin
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<System.Guid, bool> AttachedAccounts
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<System.Guid, SharedCode.MapSystem.MapMeta> Maps
        {
            get;
        }

        System.Threading.Tasks.Task<bool> TryAttach(System.Guid account);
        System.Threading.Tasks.Task<bool> Enter(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> account);
        System.Threading.Tasks.Task<bool> Leave(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> account);
        System.Threading.Tasks.Task<bool> AddMap(System.Guid mapId, SharedCode.MapSystem.MapMeta mapMeta);
        System.Threading.Tasks.Task<bool> RemoveMap(System.Guid mapId);
        System.Threading.Tasks.Task<bool> SetActive(bool active);
        System.Threading.Tasks.Task<bool> SetMapDead(System.Guid mapId);
    }
}