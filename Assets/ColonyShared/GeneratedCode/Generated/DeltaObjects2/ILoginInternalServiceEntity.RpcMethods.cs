// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class LoginInternalServiceEntity
    {
        public Task<System.Guid> GetUserIdByAccountId(System.Guid accountId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetUserIdByAccountIdRunMaster(accountId).AsTask();
                else
                    return GetUserIdByAccountIdRun(accountId).AsTask();
            else
                return SendFuncs.GetUserIdByAccountId(accountId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<System.Guid>> GetUserIdByAccountIdCreateDeferredDelegate(System.Guid accountId) => () =>
        {
            return GetUserIdByAccountId(accountId);
        }

        ;
        public async ValueTask<System.Guid> GetUserIdByAccountIdRunMaster(System.Guid accountId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetUserIdByAccountIdCreateDeferredDelegate(accountId), nameof(GetUserIdByAccountId));
            }

            return await GetUserIdByAccountIdRun(accountId);
        }

        public async ValueTask<System.Guid> GetUserIdByAccountIdRun(System.Guid accountId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 0);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetUserIdByAccountIdImpl(accountId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<System.Guid> GetUserIdByCharacterId(System.Guid characterId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetUserIdByCharacterIdRunMaster(characterId).AsTask();
                else
                    return GetUserIdByCharacterIdRun(characterId).AsTask();
            else
                return SendFuncs.GetUserIdByCharacterId(characterId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<System.Guid>> GetUserIdByCharacterIdCreateDeferredDelegate(System.Guid characterId) => () =>
        {
            return GetUserIdByCharacterId(characterId);
        }

        ;
        public async ValueTask<System.Guid> GetUserIdByCharacterIdRunMaster(System.Guid characterId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetUserIdByCharacterIdCreateDeferredDelegate(characterId), nameof(GetUserIdByCharacterId));
            }

            return await GetUserIdByCharacterIdRun(characterId);
        }

        public async ValueTask<System.Guid> GetUserIdByCharacterIdRun(System.Guid characterId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 1);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetUserIdByCharacterIdImpl(characterId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<System.Guid> GetUserIdByAccountName(string accountName)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetUserIdByAccountNameRunMaster(accountName).AsTask();
                else
                    return GetUserIdByAccountNameRun(accountName).AsTask();
            else
                return SendFuncs.GetUserIdByAccountName(accountName, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<System.Guid>> GetUserIdByAccountNameCreateDeferredDelegate(string accountName) => () =>
        {
            return GetUserIdByAccountName(accountName);
        }

        ;
        public async ValueTask<System.Guid> GetUserIdByAccountNameRunMaster(string accountName)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetUserIdByAccountNameCreateDeferredDelegate(accountName), nameof(GetUserIdByAccountName));
            }

            return await GetUserIdByAccountNameRun(accountName);
        }

        public async ValueTask<System.Guid> GetUserIdByAccountNameRun(string accountName)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 2);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetUserIdByAccountNameImpl(accountName);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.Entities.Service.AccountData> GetAccountDataByUserId(System.Guid userId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetAccountDataByUserIdRunMaster(userId).AsTask();
                else
                    return GetAccountDataByUserIdRun(userId).AsTask();
            else
                return SendFuncs.GetAccountDataByUserId(userId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Service.AccountData>> GetAccountDataByUserIdCreateDeferredDelegate(System.Guid userId) => () =>
        {
            return GetAccountDataByUserId(userId);
        }

        ;
        public async ValueTask<SharedCode.Entities.Service.AccountData> GetAccountDataByUserIdRunMaster(System.Guid userId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetAccountDataByUserIdCreateDeferredDelegate(userId), nameof(GetAccountDataByUserId));
            }

            return await GetAccountDataByUserIdRun(userId);
        }

        public async ValueTask<SharedCode.Entities.Service.AccountData> GetAccountDataByUserIdRun(System.Guid userId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 3);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetAccountDataByUserIdImpl(userId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.Entities.Service.AccountData> GetAccountDataByAccountName(string accountName)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetAccountDataByAccountNameRunMaster(accountName).AsTask();
                else
                    return GetAccountDataByAccountNameRun(accountName).AsTask();
            else
                return SendFuncs.GetAccountDataByAccountName(accountName, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Service.AccountData>> GetAccountDataByAccountNameCreateDeferredDelegate(string accountName) => () =>
        {
            return GetAccountDataByAccountName(accountName);
        }

        ;
        public async ValueTask<SharedCode.Entities.Service.AccountData> GetAccountDataByAccountNameRunMaster(string accountName)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetAccountDataByAccountNameCreateDeferredDelegate(accountName), nameof(GetAccountDataByAccountName));
            }

            return await GetAccountDataByAccountNameRun(accountName);
        }

        public async ValueTask<SharedCode.Entities.Service.AccountData> GetAccountDataByAccountNameRun(string accountName)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 4);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetAccountDataByAccountNameImpl(accountName);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.Entities.Service.CharacterData> GetCharacterDataByUserId(System.Guid userId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetCharacterDataByUserIdRunMaster(userId).AsTask();
                else
                    return GetCharacterDataByUserIdRun(userId).AsTask();
            else
                return SendFuncs.GetCharacterDataByUserId(userId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Service.CharacterData>> GetCharacterDataByUserIdCreateDeferredDelegate(System.Guid userId) => () =>
        {
            return GetCharacterDataByUserId(userId);
        }

        ;
        public async ValueTask<SharedCode.Entities.Service.CharacterData> GetCharacterDataByUserIdRunMaster(System.Guid userId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetCharacterDataByUserIdCreateDeferredDelegate(userId), nameof(GetCharacterDataByUserId));
            }

            return await GetCharacterDataByUserIdRun(userId);
        }

        public async ValueTask<SharedCode.Entities.Service.CharacterData> GetCharacterDataByUserIdRun(System.Guid userId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 5);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetCharacterDataByUserIdImpl(userId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public ValueTask<bool> AddAccount(System.Guid userId, SharedCode.Entities.Service.AccountData data)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddAccountRunMaster(userId, data);
                else
                    return AddAccountRun(userId, data);
            else
                return SendFuncs.AddAccount(userId, data, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<bool>> AddAccountCreateDeferredDelegate(System.Guid userId, SharedCode.Entities.Service.AccountData data) => () =>
        {
            return AddAccount(userId, data).AsTask();
        }

        ;
        public async ValueTask<bool> AddAccountRunMaster(System.Guid userId, SharedCode.Entities.Service.AccountData data)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddAccountCreateDeferredDelegate(userId, data), nameof(AddAccount));
            }

            return await AddAccountRun(userId, data);
        }

        public async ValueTask<bool> AddAccountRun(System.Guid userId, SharedCode.Entities.Service.AccountData data)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 6);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = AddAccountImpl(userId, data);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public ValueTask<bool> RemoveAccount(System.Guid userId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveAccountRunMaster(userId);
                else
                    return RemoveAccountRun(userId);
            else
                return SendFuncs.RemoveAccount(userId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<bool>> RemoveAccountCreateDeferredDelegate(System.Guid userId) => () =>
        {
            return RemoveAccount(userId).AsTask();
        }

        ;
        public async ValueTask<bool> RemoveAccountRunMaster(System.Guid userId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveAccountCreateDeferredDelegate(userId), nameof(RemoveAccount));
            }

            return await RemoveAccountRun(userId);
        }

        public async ValueTask<bool> RemoveAccountRun(System.Guid userId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 7);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = RemoveAccountImpl(userId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public ValueTask<bool> AddCharacter(System.Guid userId, SharedCode.Entities.Service.CharacterData data)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddCharacterRunMaster(userId, data);
                else
                    return AddCharacterRun(userId, data);
            else
                return SendFuncs.AddCharacter(userId, data, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<bool>> AddCharacterCreateDeferredDelegate(System.Guid userId, SharedCode.Entities.Service.CharacterData data) => () =>
        {
            return AddCharacter(userId, data).AsTask();
        }

        ;
        public async ValueTask<bool> AddCharacterRunMaster(System.Guid userId, SharedCode.Entities.Service.CharacterData data)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddCharacterCreateDeferredDelegate(userId, data), nameof(AddCharacter));
            }

            return await AddCharacterRun(userId, data);
        }

        public async ValueTask<bool> AddCharacterRun(System.Guid userId, SharedCode.Entities.Service.CharacterData data)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 8);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = AddCharacterImpl(userId, data);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public ValueTask<bool> UpdateCharacter(System.Guid userId, System.Guid newCharId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UpdateCharacterRunMaster(userId, newCharId);
                else
                    return UpdateCharacterRun(userId, newCharId);
            else
                return SendFuncs.UpdateCharacter(userId, newCharId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<bool>> UpdateCharacterCreateDeferredDelegate(System.Guid userId, System.Guid newCharId) => () =>
        {
            return UpdateCharacter(userId, newCharId).AsTask();
        }

        ;
        public async ValueTask<bool> UpdateCharacterRunMaster(System.Guid userId, System.Guid newCharId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UpdateCharacterCreateDeferredDelegate(userId, newCharId), nameof(UpdateCharacter));
            }

            return await UpdateCharacterRun(userId, newCharId);
        }

        public async ValueTask<bool> UpdateCharacterRun(System.Guid userId, System.Guid newCharId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 9);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = UpdateCharacterImpl(userId, newCharId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public ValueTask<bool> UpdateAccountData(System.Guid userId, string[] newPacks)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UpdateAccountDataRunMaster(userId, newPacks);
                else
                    return UpdateAccountDataRun(userId, newPacks);
            else
                return SendFuncs.UpdateAccountData(userId, newPacks, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<bool>> UpdateAccountDataCreateDeferredDelegate(System.Guid userId, string[] newPacks) => () =>
        {
            return UpdateAccountData(userId, newPacks).AsTask();
        }

        ;
        public async ValueTask<bool> UpdateAccountDataRunMaster(System.Guid userId, string[] newPacks)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UpdateAccountDataCreateDeferredDelegate(userId, newPacks), nameof(UpdateAccountData));
            }

            return await UpdateAccountDataRun(userId, newPacks);
        }

        public async ValueTask<bool> UpdateAccountDataRun(System.Guid userId, string[] newPacks)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 10);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = UpdateAccountDataImpl(userId, newPacks);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public ValueTask<bool> RemoveCharacter(System.Guid userId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveCharacterRunMaster(userId);
                else
                    return RemoveCharacterRun(userId);
            else
                return SendFuncs.RemoveCharacter(userId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<bool>> RemoveCharacterCreateDeferredDelegate(System.Guid userId) => () =>
        {
            return RemoveCharacter(userId).AsTask();
        }

        ;
        public async ValueTask<bool> RemoveCharacterRunMaster(System.Guid userId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveCharacterCreateDeferredDelegate(userId), nameof(RemoveCharacter));
            }

            return await RemoveCharacterRun(userId);
        }

        public async ValueTask<bool> RemoveCharacterRun(System.Guid userId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 11);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = RemoveCharacterImpl(userId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task AddClientConnection(System.Collections.Generic.List<System.Guid> userIds, string host, int port, System.Guid repositoryId)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddClientConnectionRunMaster(userIds, host, port, repositoryId).AsTask();
                else
                    return AddClientConnectionRun(userIds, host, port, repositoryId).AsTask();
            else
                return SendFuncs.AddClientConnection(userIds, host, port, repositoryId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> AddClientConnectionCreateDeferredDelegate(System.Collections.Generic.List<System.Guid> userIds, string host, int port, System.Guid repositoryId) => () =>
        {
            return AddClientConnection(userIds, host, port, repositoryId);
        }

        ;
        public async ValueTask AddClientConnectionRunMaster(System.Collections.Generic.List<System.Guid> userIds, string host, int port, System.Guid repositoryId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddClientConnectionCreateDeferredDelegate(userIds, host, port, repositoryId), nameof(AddClientConnection));
            }

            await AddClientConnectionRun(userIds, host, port, repositoryId);
        }

        public async ValueTask AddClientConnectionRun(System.Collections.Generic.List<System.Guid> userIds, string host, int port, System.Guid repositoryId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 12);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = AddClientConnectionImpl(userIds, host, port, repositoryId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task RemoveClientConnection(System.Collections.Generic.List<System.Guid> userIds, System.Guid repositoryId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveClientConnectionRunMaster(userIds, repositoryId).AsTask();
                else
                    return RemoveClientConnectionRun(userIds, repositoryId).AsTask();
            else
                return SendFuncs.RemoveClientConnection(userIds, repositoryId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> RemoveClientConnectionCreateDeferredDelegate(System.Collections.Generic.List<System.Guid> userIds, System.Guid repositoryId) => () =>
        {
            return RemoveClientConnection(userIds, repositoryId);
        }

        ;
        public async ValueTask RemoveClientConnectionRunMaster(System.Collections.Generic.List<System.Guid> userIds, System.Guid repositoryId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveClientConnectionCreateDeferredDelegate(userIds, repositoryId), nameof(RemoveClientConnection));
            }

            await RemoveClientConnectionRun(userIds, repositoryId);
        }

        public async ValueTask RemoveClientConnectionRun(System.Collections.Generic.List<System.Guid> userIds, System.Guid repositoryId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 13);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = RemoveClientConnectionImpl(userIds, repositoryId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public ValueTask<SharedCode.Entities.Service.AccountData[]> ListAllKnownAccounts()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ListAllKnownAccountsRunMaster();
                else
                    return ListAllKnownAccountsRun();
            else
                return SendFuncs.ListAllKnownAccounts(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<SharedCode.Entities.Service.AccountData[]>> ListAllKnownAccountsCreateDeferredDelegate() => () =>
        {
            return ListAllKnownAccounts().AsTask();
        }

        ;
        public async ValueTask<SharedCode.Entities.Service.AccountData[]> ListAllKnownAccountsRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ListAllKnownAccountsCreateDeferredDelegate(), nameof(ListAllKnownAccounts));
            }

            return await ListAllKnownAccountsRun();
        }

        public async ValueTask<SharedCode.Entities.Service.AccountData[]> ListAllKnownAccountsRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.ILoginInternalServiceEntity), 14);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = ListAllKnownAccountsImpl();
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}