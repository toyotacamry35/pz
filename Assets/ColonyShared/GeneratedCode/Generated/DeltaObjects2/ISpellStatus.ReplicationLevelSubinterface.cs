// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, 2145549162, typeof(SharedCode.Wizardry.ISpellStatus))]
    public interface ISpellStatusAlways : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Wizardry.SubSpell SubSpell
        {
            get;
        }

        SharedCode.Wizardry.SpellDef Spell
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaList<(SharedCode.Wizardry.SpellWordDef, int)> ActivationsPerWord
        {
            get;
        }

        int SuccesfullPredicatesCheckCount
        {
            get;
        }

        int FailedPredicatesCheckCount
        {
            get;
        }

        int ActivationsCount
        {
            get;
        }

        int DeactivationsCount
        {
            get;
        }

        int SuccesfullActivationsCount
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusAlways> SubSpells
        {
            get;
        }

        int Activations
        {
            get;
        }

        long AccumulatedDelta
        {
            get;
        }

        long LastTimeUpdated
        {
            get;
        }
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, 77959227, typeof(SharedCode.Wizardry.ISpellStatus))]
    public interface ISpellStatusClientBroadcast : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Wizardry.SubSpell SubSpell
        {
            get;
        }

        SharedCode.Wizardry.SpellDef Spell
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaList<(SharedCode.Wizardry.SpellWordDef, int)> ActivationsPerWord
        {
            get;
        }

        int SuccesfullPredicatesCheckCount
        {
            get;
        }

        int FailedPredicatesCheckCount
        {
            get;
        }

        int ActivationsCount
        {
            get;
        }

        int DeactivationsCount
        {
            get;
        }

        int SuccesfullActivationsCount
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientBroadcast> SubSpells
        {
            get;
        }

        int Activations
        {
            get;
        }

        long AccumulatedDelta
        {
            get;
        }

        long LastTimeUpdated
        {
            get;
        }
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, -1005845828, typeof(SharedCode.Wizardry.ISpellStatus))]
    public interface ISpellStatusClientFullApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, -783245190, typeof(SharedCode.Wizardry.ISpellStatus))]
    public interface ISpellStatusClientFull : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Wizardry.SubSpell SubSpell
        {
            get;
        }

        SharedCode.Wizardry.SpellDef Spell
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaList<(SharedCode.Wizardry.SpellWordDef, int)> ActivationsPerWord
        {
            get;
        }

        int SuccesfullPredicatesCheckCount
        {
            get;
        }

        int FailedPredicatesCheckCount
        {
            get;
        }

        int ActivationsCount
        {
            get;
        }

        int DeactivationsCount
        {
            get;
        }

        int SuccesfullActivationsCount
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusClientFull> SubSpells
        {
            get;
        }

        int Activations
        {
            get;
        }

        long AccumulatedDelta
        {
            get;
        }

        long LastTimeUpdated
        {
            get;
        }
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, -1123764415, typeof(SharedCode.Wizardry.ISpellStatus))]
    public interface ISpellStatusServerApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, 698791548, typeof(SharedCode.Wizardry.ISpellStatus))]
    public interface ISpellStatusServer : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Wizardry.SubSpell SubSpell
        {
            get;
        }

        SharedCode.Wizardry.SpellDef Spell
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaList<(SharedCode.Wizardry.SpellWordDef, int)> ActivationsPerWord
        {
            get;
        }

        int SuccesfullPredicatesCheckCount
        {
            get;
        }

        int FailedPredicatesCheckCount
        {
            get;
        }

        int ActivationsCount
        {
            get;
        }

        int DeactivationsCount
        {
            get;
        }

        int SuccesfullActivationsCount
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellStatusServer> SubSpells
        {
            get;
        }

        int Activations
        {
            get;
        }

        long AccumulatedDelta
        {
            get;
        }

        long LastTimeUpdated
        {
            get;
        }
    }
}