// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class BuildPlace
    {
        public Task<bool> RemoveDelay(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return RemoveDelayRunMaster(elements).AsTask();
                else
                    return RemoveDelayRun(elements).AsTask();
            else
                return SendFuncs.RemoveDelay(elements, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> RemoveDelayCreateDeferredDelegate(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements) => () =>
        {
            return RemoveDelay(elements);
        }

        ;
        public async ValueTask<bool> RemoveDelayRunMaster(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(RemoveDelayCreateDeferredDelegate(elements), nameof(RemoveDelay));
            }

            return await RemoveDelayRun(elements);
        }

        public async ValueTask<bool> RemoveDelayRun(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<SharedCode.DeltaObjects.Building.BuildType, System.Guid>> elements)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IBuildPlace), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(RemoveDelay)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = RemoveDelayImpl(elements);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> Check(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.Entities.Building.IPositionedBuildWrapper buildWrapper)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CheckRunMaster(type, buildWrapper).AsTask();
                else
                    return CheckRun(type, buildWrapper).AsTask();
            else
                return SendFuncs.Check(type, buildWrapper, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CheckCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.Entities.Building.IPositionedBuildWrapper buildWrapper) => () =>
        {
            return Check(type, buildWrapper);
        }

        ;
        public async ValueTask<bool> CheckRunMaster(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.Entities.Building.IPositionedBuildWrapper buildWrapper)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CheckCreateDeferredDelegate(type, buildWrapper), nameof(Check));
            }

            return await CheckRun(type, buildWrapper);
        }

        public async ValueTask<bool> CheckRun(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.Entities.Building.IPositionedBuildWrapper buildWrapper)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IBuildPlace), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(Check)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = CheckImpl(type, buildWrapper);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> Start(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.Entities.Building.IPositionedBuildWrapper buildWrapper)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return StartRunMaster(type, buildWrapper).AsTask();
                else
                    return StartRun(type, buildWrapper).AsTask();
            else
                return SendFuncs.Start(type, buildWrapper, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> StartCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.Entities.Building.IPositionedBuildWrapper buildWrapper) => () =>
        {
            return Start(type, buildWrapper);
        }

        ;
        public async ValueTask<bool> StartRunMaster(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.Entities.Building.IPositionedBuildWrapper buildWrapper)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(StartCreateDeferredDelegate(type, buildWrapper), nameof(Start));
            }

            return await StartRun(type, buildWrapper);
        }

        public async ValueTask<bool> StartRun(SharedCode.DeltaObjects.Building.BuildType type, SharedCode.Entities.Building.IPositionedBuildWrapper buildWrapper)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IBuildPlace), 2);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(Start)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = StartImpl(type, buildWrapper);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> OnProgress(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OnProgressRunMaster(type, elementId).AsTask();
                else
                    return OnProgressRun(type, elementId).AsTask();
            else
                return SendFuncs.OnProgress(type, elementId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> OnProgressCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId) => () =>
        {
            return OnProgress(type, elementId);
        }

        ;
        public async ValueTask<bool> OnProgressRunMaster(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OnProgressCreateDeferredDelegate(type, elementId), nameof(OnProgress));
            }

            return await OnProgressRun(type, elementId);
        }

        public async ValueTask<bool> OnProgressRun(SharedCode.DeltaObjects.Building.BuildType type, System.Guid elementId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IBuildPlace), 3);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(OnProgress)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OnProgressImpl(type, elementId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<SharedCode.Entities.Building.OperationResultEx> Operate(SharedCode.DeltaObjects.Building.BuildType type, System.Guid callerId, System.Guid elementId, SharedCode.Entities.Building.OperationData data)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return OperateRunMaster(type, callerId, elementId, data).AsTask();
                else
                    return OperateRun(type, callerId, elementId, data).AsTask();
            else
                return SendFuncs.Operate(type, callerId, elementId, data, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Building.OperationResultEx>> OperateCreateDeferredDelegate(SharedCode.DeltaObjects.Building.BuildType type, System.Guid callerId, System.Guid elementId, SharedCode.Entities.Building.OperationData data) => () =>
        {
            return Operate(type, callerId, elementId, data);
        }

        ;
        public async ValueTask<SharedCode.Entities.Building.OperationResultEx> OperateRunMaster(SharedCode.DeltaObjects.Building.BuildType type, System.Guid callerId, System.Guid elementId, SharedCode.Entities.Building.OperationData data)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(OperateCreateDeferredDelegate(type, callerId, elementId, data), nameof(Operate));
            }

            return await OperateRun(type, callerId, elementId, data);
        }

        public async ValueTask<SharedCode.Entities.Building.OperationResultEx> OperateRun(SharedCode.DeltaObjects.Building.BuildType type, System.Guid callerId, System.Guid elementId, SharedCode.Entities.Building.OperationData data)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Building.IBuildPlace), 4);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(Operate)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = OperateImpl(type, callerId, elementId, data);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }
    }
}