// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using SharedCode.Entities.Service;
using SharedCode.EntitySystem.ChainCalls;
using SharedCode.Logging;
using SharedCode.OurSimpleIoC;
using SharedCode.Serializers;
using SharedCode.Utils;
using System.Linq;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using GeneratedCode.DeltaObjects.Chain;

[GeneratedCode("CodeGen", "1.0")]
public class LoginServiceEntityAlwaysChainProxy : IChainedEntity
{
    private LoginServiceEntityChainProxy __chain__;
    public LoginServiceEntityAlwaysChainProxy(LoginServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public LoginServiceEntityAlwaysChainProxy IsMapDead(ChainArgument<System.Guid> map, ChainArgument<System.Guid> realmId)
    {
        __chain__.IsMapDead(map, realmId);
        return this;
    }

    public LoginServiceEntityAlwaysChainProxy RequestUpdateAccountData(ChainArgument<System.Guid> accId)
    {
        __chain__.RequestUpdateAccountData(accId);
        return this;
    }

    public LoginServiceEntityAlwaysChainProxy NotifyPlatformOfJoining(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfJoining(accId, realmId);
        return this;
    }

    public LoginServiceEntityAlwaysChainProxy NotifyPlatformOfLeaving(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfLeaving(accId, realmId);
        return this;
    }

    public LoginServiceEntityAlwaysChainProxy NotifyPlatformOfRealmGiveUp(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfRealmGiveUp(accId, realmId);
        return this;
    }

    public LoginServiceEntityAlwaysChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public LoginServiceEntityAlwaysChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public LoginServiceEntityAlwaysChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static LoginServiceEntityAlwaysChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityAlways entity)
    {
        return new LoginServiceEntityAlwaysChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static LoginServiceEntityAlwaysChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityAlways entity, IChainedEntity fromChain)
    {
        return new LoginServiceEntityAlwaysChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class LoginServiceEntityClientBroadcastChainProxy : IChainedEntity
{
    private LoginServiceEntityChainProxy __chain__;
    public LoginServiceEntityClientBroadcastChainProxy(LoginServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public LoginServiceEntityClientBroadcastChainProxy AttachMapToRealm(ChainArgument<System.Guid> mapId, ChainArgument<GeneratedCode.Custom.Config.MapDef> mapDef, ChainArgument<System.Guid> realmId)
    {
        __chain__.AttachMapToRealm(mapId, mapDef, realmId);
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy Login(ChainArgument<SharedCode.Data.Platform> platform, ChainArgument<string> version, ChainArgument<string> userId, ChainArgument<string> code)
    {
        __chain__.Login(platform, version, userId, code);
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy Logout()
    {
        __chain__.Logout();
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy SetMaxCCU(ChainArgument<int> ccu)
    {
        __chain__.SetMaxCCU(ccu);
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy GetCCU()
    {
        __chain__.GetCCU();
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy GetMaxCCU()
    {
        __chain__.GetMaxCCU();
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy IsMapDead(ChainArgument<System.Guid> map, ChainArgument<System.Guid> realmId)
    {
        __chain__.IsMapDead(map, realmId);
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy RequestUpdateAccountData(ChainArgument<System.Guid> accId)
    {
        __chain__.RequestUpdateAccountData(accId);
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy NotifyPlatformOfJoining(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfJoining(accId, realmId);
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy NotifyPlatformOfLeaving(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfLeaving(accId, realmId);
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy NotifyPlatformOfRealmGiveUp(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfRealmGiveUp(accId, realmId);
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public LoginServiceEntityClientBroadcastChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static LoginServiceEntityClientBroadcastChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityClientBroadcast entity)
    {
        return new LoginServiceEntityClientBroadcastChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static LoginServiceEntityClientBroadcastChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityClientBroadcast entity, IChainedEntity fromChain)
    {
        return new LoginServiceEntityClientBroadcastChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class LoginServiceEntityClientFullApiChainProxy : IChainedEntity
{
    private LoginServiceEntityChainProxy __chain__;
    public LoginServiceEntityClientFullApiChainProxy(LoginServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public LoginServiceEntityClientFullApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public LoginServiceEntityClientFullApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public LoginServiceEntityClientFullApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static LoginServiceEntityClientFullApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityClientFullApi entity)
    {
        return new LoginServiceEntityClientFullApiChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static LoginServiceEntityClientFullApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityClientFullApi entity, IChainedEntity fromChain)
    {
        return new LoginServiceEntityClientFullApiChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class LoginServiceEntityClientFullChainProxy : IChainedEntity
{
    private LoginServiceEntityChainProxy __chain__;
    public LoginServiceEntityClientFullChainProxy(LoginServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public LoginServiceEntityClientFullChainProxy AttachMapToRealm(ChainArgument<System.Guid> mapId, ChainArgument<GeneratedCode.Custom.Config.MapDef> mapDef, ChainArgument<System.Guid> realmId)
    {
        __chain__.AttachMapToRealm(mapId, mapDef, realmId);
        return this;
    }

    public LoginServiceEntityClientFullChainProxy Login(ChainArgument<SharedCode.Data.Platform> platform, ChainArgument<string> version, ChainArgument<string> userId, ChainArgument<string> code)
    {
        __chain__.Login(platform, version, userId, code);
        return this;
    }

    public LoginServiceEntityClientFullChainProxy Logout()
    {
        __chain__.Logout();
        return this;
    }

    public LoginServiceEntityClientFullChainProxy SetMaxCCU(ChainArgument<int> ccu)
    {
        __chain__.SetMaxCCU(ccu);
        return this;
    }

    public LoginServiceEntityClientFullChainProxy GetCCU()
    {
        __chain__.GetCCU();
        return this;
    }

    public LoginServiceEntityClientFullChainProxy GetMaxCCU()
    {
        __chain__.GetMaxCCU();
        return this;
    }

    public LoginServiceEntityClientFullChainProxy IsMapDead(ChainArgument<System.Guid> map, ChainArgument<System.Guid> realmId)
    {
        __chain__.IsMapDead(map, realmId);
        return this;
    }

    public LoginServiceEntityClientFullChainProxy RequestUpdateAccountData(ChainArgument<System.Guid> accId)
    {
        __chain__.RequestUpdateAccountData(accId);
        return this;
    }

    public LoginServiceEntityClientFullChainProxy NotifyPlatformOfJoining(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfJoining(accId, realmId);
        return this;
    }

    public LoginServiceEntityClientFullChainProxy NotifyPlatformOfLeaving(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfLeaving(accId, realmId);
        return this;
    }

    public LoginServiceEntityClientFullChainProxy NotifyPlatformOfRealmGiveUp(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfRealmGiveUp(accId, realmId);
        return this;
    }

    public LoginServiceEntityClientFullChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public LoginServiceEntityClientFullChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public LoginServiceEntityClientFullChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static LoginServiceEntityClientFullChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityClientFull entity)
    {
        return new LoginServiceEntityClientFullChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static LoginServiceEntityClientFullChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityClientFull entity, IChainedEntity fromChain)
    {
        return new LoginServiceEntityClientFullChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class LoginServiceEntityServerApiChainProxy : IChainedEntity
{
    private LoginServiceEntityChainProxy __chain__;
    public LoginServiceEntityServerApiChainProxy(LoginServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public LoginServiceEntityServerApiChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public LoginServiceEntityServerApiChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public LoginServiceEntityServerApiChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static LoginServiceEntityServerApiChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityServerApi entity)
    {
        return new LoginServiceEntityServerApiChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static LoginServiceEntityServerApiChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityServerApi entity, IChainedEntity fromChain)
    {
        return new LoginServiceEntityServerApiChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}

[GeneratedCode("CodeGen", "1.0")]
public class LoginServiceEntityServerChainProxy : IChainedEntity
{
    private LoginServiceEntityChainProxy __chain__;
    public LoginServiceEntityServerChainProxy(LoginServiceEntityChainProxy chain)
    {
        __chain__ = chain;
    }

    public ChainCancellationToken Run()
    {
        return __chain__.Run();
    }

    public LoginServiceEntityServerChainProxy FindRealm(ChainArgument<SharedCode.Aspects.Sessions.RealmRulesQueryDef> query, ChainArgument<System.Guid> accountId, ChainArgument<System.Guid> currentRealm)
    {
        __chain__.FindRealm(query, accountId, currentRealm);
        return this;
    }

    public LoginServiceEntityServerChainProxy GetUserRealm(ChainArgument<System.Guid> userId)
    {
        __chain__.GetUserRealm(userId);
        return this;
    }

    public LoginServiceEntityServerChainProxy AttachMapToRealm(ChainArgument<System.Guid> mapId, ChainArgument<GeneratedCode.Custom.Config.MapDef> mapDef, ChainArgument<System.Guid> realmId)
    {
        __chain__.AttachMapToRealm(mapId, mapDef, realmId);
        return this;
    }

    public LoginServiceEntityServerChainProxy Login(ChainArgument<SharedCode.Data.Platform> platform, ChainArgument<string> version, ChainArgument<string> userId, ChainArgument<string> code)
    {
        __chain__.Login(platform, version, userId, code);
        return this;
    }

    public LoginServiceEntityServerChainProxy Logout()
    {
        __chain__.Logout();
        return this;
    }

    public LoginServiceEntityServerChainProxy GetRealmStatus()
    {
        __chain__.GetRealmStatus();
        return this;
    }

    public LoginServiceEntityServerChainProxy Kick(ChainArgument<System.Guid> id)
    {
        __chain__.Kick(id);
        return this;
    }

    public LoginServiceEntityServerChainProxy SetMaxCCU(ChainArgument<int> ccu)
    {
        __chain__.SetMaxCCU(ccu);
        return this;
    }

    public LoginServiceEntityServerChainProxy GetCCU()
    {
        __chain__.GetCCU();
        return this;
    }

    public LoginServiceEntityServerChainProxy GetMaxCCU()
    {
        __chain__.GetMaxCCU();
        return this;
    }

    public LoginServiceEntityServerChainProxy GetAllAccountsOnline()
    {
        __chain__.GetAllAccountsOnline();
        return this;
    }

    public LoginServiceEntityServerChainProxy IsMapDead(ChainArgument<System.Guid> map, ChainArgument<System.Guid> realmId)
    {
        __chain__.IsMapDead(map, realmId);
        return this;
    }

    public LoginServiceEntityServerChainProxy DeleteAllCharacters(ChainArgument<System.Guid> accountId)
    {
        __chain__.DeleteAllCharacters(accountId);
        return this;
    }

    public LoginServiceEntityServerChainProxy GetAllCharactersForAccount(ChainArgument<System.Guid> accountId)
    {
        __chain__.GetAllCharactersForAccount(accountId);
        return this;
    }

    public LoginServiceEntityServerChainProxy GetAccountExperience(ChainArgument<System.Guid> accountId)
    {
        __chain__.GetAccountExperience(accountId);
        return this;
    }

    public LoginServiceEntityServerChainProxy AddAccountExperience(ChainArgument<System.Guid> accountId, ChainArgument<int> expToGive)
    {
        __chain__.AddAccountExperience(accountId, expToGive);
        return this;
    }

    public LoginServiceEntityServerChainProxy RequestUpdateAccountData(ChainArgument<System.Guid> accId)
    {
        __chain__.RequestUpdateAccountData(accId);
        return this;
    }

    public LoginServiceEntityServerChainProxy NotifyPlatformOfJoining(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfJoining(accId, realmId);
        return this;
    }

    public LoginServiceEntityServerChainProxy NotifyPlatformOfLeaving(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfLeaving(accId, realmId);
        return this;
    }

    public LoginServiceEntityServerChainProxy NotifyPlatformOfRealmGiveUp(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> realmId)
    {
        __chain__.NotifyPlatformOfRealmGiveUp(accId, realmId);
        return this;
    }

    public LoginServiceEntityServerChainProxy GiveUpRealmOnDeath(ChainArgument<System.Guid> accId)
    {
        __chain__.GiveUpRealmOnDeath(accId);
        return this;
    }

    public LoginServiceEntityServerChainProxy GetAccountIdByUserId(ChainArgument<System.Guid> userId)
    {
        __chain__.GetAccountIdByUserId(userId);
        return this;
    }

    public LoginServiceEntityServerChainProxy GetAccountDataForAccStats(ChainArgument<System.Guid> accountId)
    {
        __chain__.GetAccountDataForAccStats(accountId);
        return this;
    }

    public LoginServiceEntityServerChainProxy AssignAccountToMap(ChainArgument<System.Guid> accId, ChainArgument<System.Guid> mapId)
    {
        __chain__.AssignAccountToMap(accId, mapId);
        return this;
    }

    public LoginServiceEntityServerChainProxy GrantAccountReward(ChainArgument<System.Guid> characterId, ChainArgument<ResourceSystem.Aspects.Rewards.RewardDef> reward)
    {
        __chain__.GrantAccountReward(characterId, reward);
        return this;
    }

    public LoginServiceEntityServerChainProxy Delay(float duration, bool repeat = false, bool fromUtcNow = true)
    {
        __chain__.Delay(duration, repeat, fromUtcNow);
        return this;
    }

    public LoginServiceEntityServerChainProxy DelayCount(float duration, int count, bool fromUtcNow = true)
    {
        __chain__.DelayCount(duration, count, fromUtcNow);
        return this;
    }

    public LoginServiceEntityServerChainProxy StoreResult(string name)
    {
        __chain__.StoreResult(name);
        return this;
    }

    BaseChainEntity IChainedEntity.GetBaseChainEntity()
    {
        return (BaseChainEntity)__chain__;
    }
}

public static partial class ChainProxyExtensions
{
    public static LoginServiceEntityServerChainProxy Chain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityServer entity)
    {
        return new LoginServiceEntityServerChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject()));
    }

    public static LoginServiceEntityServerChainProxy ContinueChain(this GeneratedCode.DeltaObjects.ReplicationInterfaces.ILoginServiceEntityServer entity, IChainedEntity fromChain)
    {
        return new LoginServiceEntityServerChainProxy(new LoginServiceEntityChainProxy((SharedCode.Entities.Cloud.ILoginServiceEntity)entity.GetBaseDeltaObject(), fromChain));
    }
}