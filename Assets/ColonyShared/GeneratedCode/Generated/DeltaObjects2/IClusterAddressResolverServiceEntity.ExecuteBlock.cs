// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    public partial class ClusterAddressResolverServiceEntity
    {
        internal static class ExecuteMethods
        {
            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(0, "IClusterAddressResolverServiceEntity_GetEntityAddressRepositoryId_Int32_Guid_Message")]
            internal static async System.Threading.Tasks.Task GetEntityAddressRepositoryId_0(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                int typeId;
                (typeId, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<int>(__data__, __offset__, 0, chainContext, argumentRefs);
                System.Guid entityId;
                (entityId, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<System.Guid>(__data__, __offset__, 1, chainContext, argumentRefs);
                var __result__ = await ((SharedCode.Entities.Service.IClusterAddressResolverServiceEntity)__deltaObj__).GetEntityAddressRepositoryId(typeId, entityId);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(1, "IClusterAddressResolverServiceEntity_GetAllEntitiesByType_Int32_Message")]
            internal static async System.Threading.Tasks.Task GetAllEntitiesByType_1(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                int typeId;
                (typeId, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<int>(__data__, __offset__, 0, chainContext, argumentRefs);
                var __result__ = await ((SharedCode.Entities.Service.IClusterAddressResolverServiceEntity)__deltaObj__).GetAllEntitiesByType(typeId);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(2, "IClusterAddressResolverServiceEntity_SetEntityAddressRepositoryId_Int32_Guid_Guid_Message")]
            internal static async System.Threading.Tasks.Task SetEntityAddressRepositoryId_2(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                int typeId;
                (typeId, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<int>(__data__, __offset__, 0, chainContext, argumentRefs);
                System.Guid entityId;
                (entityId, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<System.Guid>(__data__, __offset__, 1, chainContext, argumentRefs);
                System.Guid repositoryId;
                (repositoryId, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<System.Guid>(__data__, __offset__, 2, chainContext, argumentRefs);
                await ((SharedCode.Entities.Service.IClusterAddressResolverServiceEntity)__deltaObj__).SetEntityAddressRepositoryId(typeId, entityId, repositoryId);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(3, "IClusterAddressResolverServiceEntity_SetEntitiesAddressRepositoryId_Dictionary_Guid_Message")]
            internal static async System.Threading.Tasks.Task SetEntitiesAddressRepositoryId_3(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                System.Collections.Generic.Dictionary<int, System.Guid> entities;
                (entities, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<System.Collections.Generic.Dictionary<int, System.Guid>>(__data__, __offset__, 0, chainContext, argumentRefs);
                System.Guid repositoryId;
                (repositoryId, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<System.Guid>(__data__, __offset__, 1, chainContext, argumentRefs);
                await ((SharedCode.Entities.Service.IClusterAddressResolverServiceEntity)__deltaObj__).SetEntitiesAddressRepositoryId(entities, repositoryId);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(4, "IClusterAddressResolverServiceEntity_RemoveEntityAddressRepositoryId_Int32_Guid_Message")]
            internal static async System.Threading.Tasks.Task RemoveEntityAddressRepositoryId_4(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                int typeId;
                (typeId, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<int>(__data__, __offset__, 0, chainContext, argumentRefs);
                System.Guid entityId;
                (entityId, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<System.Guid>(__data__, __offset__, 1, chainContext, argumentRefs);
                await ((SharedCode.Entities.Service.IClusterAddressResolverServiceEntity)__deltaObj__).RemoveEntityAddressRepositoryId(typeId, entityId);
            }
        }
    }
}