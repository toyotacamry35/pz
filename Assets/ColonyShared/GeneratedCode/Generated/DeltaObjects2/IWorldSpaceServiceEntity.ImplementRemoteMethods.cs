// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    public interface IWorldSpacedImplementRemoteMethods
    {
        System.Threading.Tasks.Task<bool> AssignToWorldSpaceImpl(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Service.IWorldSpaceServiceEntity> ownWorldSpace);
    }
}

namespace GeneratedCode.DeltaObjects
{
    public interface IWorldSpaceServiceEntityImplementRemoteMethods
    {
        System.Threading.Tasks.Task<System.Guid?> GetWorldNodeIdImpl(ResourceSystem.Utils.OuterRef entityRef);
        System.Threading.Tasks.Task<bool> AddWorldObjectImpl(int typeId, System.Guid entityId);
        System.Threading.Tasks.Task<bool> RemoveWorldObjectImpl(int typeId, System.Guid entityId);
        System.Threading.Tasks.Task<bool> UpdateTransformImpl(int typeId, System.Guid entityId);
        System.Threading.Tasks.Task<SharedCode.Entities.Service.AddClientResult> AddClientImpl(System.Guid characterId, System.Guid repositoryId);
        System.Threading.Tasks.Task<bool> RemoveClientImpl(System.Guid repositoryId, bool immediate);
        System.Threading.Tasks.Task<System.Guid> GetWorldBoxIdToDropImpl(SharedCode.Utils.Vector3 position, System.Guid characterOwnerId);
        System.Threading.Tasks.Task<bool> RegisterFencePlaceImpl(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Building.IFencePlace> fencePlace);
        System.Threading.Tasks.Task<bool> UnregisterFencePlaceImpl(SharedCode.EntitySystem.OuterRef<SharedCode.Entities.Building.IFencePlace> fencePlace);
        System.Threading.Tasks.Task<System.Guid> CreateFencePlaceIdImpl(SharedCode.Utils.Vector3 position);
        System.Threading.Tasks.Task<System.Guid> GetFencePlaceIdImpl(SharedCode.Utils.Vector3 position, bool onlyExisted);
        System.Threading.Tasks.Task OnVisibilityChangedImpl(int subjectTypeId, System.Guid subjectEntityId, System.Collections.Generic.List<(int, System.Guid)> addedObjects, System.Collections.Generic.List<(int, System.Guid)> removedObjects);
        System.Threading.Tasks.Task EnableReplicationsImpl(int subjectTypeId, System.Guid subjectEntityId, bool enable);
        System.Threading.Tasks.Task<int> GetCCUImpl();
        System.Threading.Tasks.Task SpawnNewBotImpl(string spawnPointTypePath, System.Collections.Generic.List<System.Guid> botIds, System.Guid userId);
        System.Threading.Tasks.Task<bool> RespawnImpl(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId);
        System.Threading.Tasks.Task<SharedCode.Entities.Service.AddClientResult> LoginImpl(Assets.Src.Aspects.Doings.BotActionDef botDef, string spawnPointPath, System.Guid userRepository, GeneratedCode.MapSystem.MapOwner mapOwner);
        System.Threading.Tasks.Task<bool> LogoutImpl(System.Guid userId, bool terminal);
        System.Threading.Tasks.Task<bool> LogoutAllImpl();
        System.Threading.Tasks.Task<bool> ConnectStreamingRepoImpl(System.Guid repo);
        System.Threading.Tasks.Task<bool> DisconnectStreamingRepoImpl(System.Guid repo);
        System.Threading.Tasks.Task<bool> TeleportImpl(System.Guid oldRepositoryGuid);
        System.Threading.Tasks.Task<bool> PrepareStaticsForImpl(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> sceneEntity);
        System.Threading.Tasks.Task<bool> SpawnEntityImpl(System.Guid staticIdFromExport, SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent, SharedCode.Utils.Vector3 pos, SharedCode.Utils.Quaternion rot, GeneratedCode.MapSystem.MapOwner mapOwner, System.Guid spawner, SharedCode.Entities.GameObjectEntities.IEntityObjectDef def, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef point, SharedCode.Entities.GameObjectEntities.ScenicEntityDef scenicEntityDef, Scripting.ScriptingContext ctx);
        System.Threading.Tasks.Task<bool> DespawnEntityImpl(SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> ent);
        System.Threading.Tasks.Task<SharedCode.Entities.GameObjectEntities.PositionRotation> GetPositionToSpawnAtImpl(System.Guid charId, bool checkBakens, bool anyCommonBaken, System.Guid commonBakenId, SharedCode.Entities.GameObjectEntities.SpawnPointTypeDef overrideAllowedPointType);
        System.Threading.Tasks.Task<bool> RegisterWorldObjectsInNewInformationSetImpl(ResourceSystem.Utils.OuterRef worldObjectSetRef);
    }
}