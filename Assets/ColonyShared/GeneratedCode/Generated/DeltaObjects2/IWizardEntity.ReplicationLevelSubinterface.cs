// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, -396455191, typeof(SharedCode.Wizardry.IWizardEntity))]
    public interface IWizardEntityAlways : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsAlways, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.Wizardry.UnityEnvironmentMark SlaveWizardMark
        {
            get;
        }

        System.Threading.Tasks.Task<bool> LocalUpdateTimeLineData();
        System.Threading.Tasks.Task<bool> CheckSpellCastPredicates(long currentTime, SharedCode.Wizardry.SpellCast spell, System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef> failedPredicates, Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef predicateIgnoreGroupDef);
        System.Threading.Tasks.Task<bool> HasSpellsPreventingThisFromStart(SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId, SharedCode.Wizardry.SpellId prevSpell);
        System.Threading.Tasks.Task<long> Update();
        System.Threading.Tasks.Task<bool> Update(SharedCode.Wizardry.SpellId spellId);
        System.Threading.Tasks.Task<SharedCode.Wizardry.WizardDebugData> GetDebugData();
        System.Threading.Tasks.Task<bool> WizardHasDied();
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> WizardHasRisen();
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, -1987923869, typeof(SharedCode.Wizardry.IWizardEntity))]
    public interface IWizardEntityClientBroadcast : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsClientBroadcast, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> Owner
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientBroadcast> Spells
        {
            get;
        }

        SharedCode.Wizardry.UnityEnvironmentMark SlaveWizardMark
        {
            get;
        }

        System.Threading.Tasks.ValueTask<bool> HasActiveSpell(SharedCode.Wizardry.SpellDef spell);
        System.Threading.Tasks.ValueTask<bool> HasActiveSpellGroup(SharedCode.Wizardry.SpellGroupDef group);
        System.Threading.Tasks.Task<bool> LocalUpdateTimeLineData();
        System.Threading.Tasks.Task<bool> CheckSpellCastPredicates(long currentTime, SharedCode.Wizardry.SpellCast spell, System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef> failedPredicates, Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef predicateIgnoreGroupDef);
        System.Threading.Tasks.Task<bool> HasSpellsPreventingThisFromStart(SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId, SharedCode.Wizardry.SpellId prevSpell);
        System.Threading.Tasks.Task<long> Update();
        System.Threading.Tasks.Task<bool> Update(SharedCode.Wizardry.SpellId spellId);
        System.Threading.Tasks.Task<SharedCode.Wizardry.WizardDebugData> GetDebugData();
        System.Threading.Tasks.Task<bool> WizardHasDied();
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> WizardHasRisen();
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, 1492505429, typeof(SharedCode.Wizardry.IWizardEntity))]
    public interface IWizardEntityClientFullApi : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsClientFullApi, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, -1989821429, typeof(SharedCode.Wizardry.IWizardEntity))]
    public interface IWizardEntityClientFull : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsClientFull, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        bool IsInterestingEnoughToLog
        {
            get;
        }

        SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> Owner
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellClientFull> Spells
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<SharedCode.Wizardry.CooldownGroupDef, long> CooldownsUntil
        {
            get;
        }

        SharedCode.Wizardry.UnityEnvironmentMark SlaveWizardMark
        {
            get;
        }

        System.Threading.Tasks.Task<bool> StopAllSpellsOfGroup(SharedCode.Wizardry.SpellGroupDef group, SharedCode.Wizardry.SpellId except, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.Task<bool> StopSpellByDef(SharedCode.Wizardry.SpellDef spellDef, SharedCode.Wizardry.SpellId except, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.Task<bool> StopSpellByCauser(GeneratedCode.DeltaObjects.SpellPartCastId causer, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.ValueTask<bool> HasActiveSpell(SharedCode.Wizardry.SpellDef spell);
        System.Threading.Tasks.ValueTask<bool> HasActiveSpellGroup(SharedCode.Wizardry.SpellGroupDef group);
        System.Threading.Tasks.Task<string> DumpEvents();
        System.Threading.Tasks.Task<bool> LocalUpdateTimeLineData();
        System.Threading.Tasks.Task<bool> CheckSpellCastPredicates(long currentTime, SharedCode.Wizardry.SpellCast spell, System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef> failedPredicates, Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef predicateIgnoreGroupDef);
        System.Threading.Tasks.Task<bool> HasSpellsPreventingThisFromStart(SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId, SharedCode.Wizardry.SpellId prevSpell);
        System.Threading.Tasks.Task<bool> StopCastSpell(SharedCode.Wizardry.SpellId spell, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.Task<bool> StopCastSpell(SharedCode.Wizardry.SpellId spell);
        System.Threading.Tasks.Task<long> Update();
        System.Threading.Tasks.Task<bool> Update(SharedCode.Wizardry.SpellId spellId);
        System.Threading.Tasks.Task<SharedCode.Wizardry.WizardDebugData> GetDebugData();
        System.Threading.Tasks.Task<bool> WizardHasDied();
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> WizardHasRisen();
        System.Threading.Tasks.Task CancelSpell(SharedCode.Wizardry.SpellId spellId);
        System.Threading.Tasks.Task SetIsInterestingEnoughToLog(bool enable);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, 1678221158, typeof(SharedCode.Wizardry.IWizardEntity))]
    public interface IWizardEntityServerApi : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsServerApi, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, 892391134, typeof(SharedCode.Wizardry.IWizardEntity))]
    public interface IWizardEntityServer : SharedCode.EntitySystem.IEntity, IHasPingDiagnosticsServer, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        bool IsInterestingEnoughToLog
        {
            get;
        }

        SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> Owner
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionaryWrapper<SharedCode.Wizardry.SpellId, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISpellServer> Spells
        {
            get;
        }

        SharedCode.EntitySystem.Delta.IDeltaDictionary<SharedCode.Wizardry.CooldownGroupDef, long> CooldownsUntil
        {
            get;
        }

        SharedCode.Wizardry.UnityEnvironmentMark SlaveWizardMark
        {
            get;
        }

        System.Threading.Tasks.Task<bool> StopAllSpellsOfGroup(SharedCode.Wizardry.SpellGroupDef group, SharedCode.Wizardry.SpellId except, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.Task<bool> StopSpellByDef(SharedCode.Wizardry.SpellDef spellDef, SharedCode.Wizardry.SpellId except, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.Task<bool> StopSpellByCauser(GeneratedCode.DeltaObjects.SpellPartCastId causer, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.ValueTask<bool> HasActiveSpell(SharedCode.Wizardry.SpellDef spell);
        System.Threading.Tasks.ValueTask<bool> HasActiveSpellGroup(SharedCode.Wizardry.SpellGroupDef group);
        System.Threading.Tasks.Task<string> DumpEvents();
        System.Threading.Tasks.Task<bool> LocalUpdateTimeLineData();
        System.Threading.Tasks.Task<bool> CheckSpellCastPredicates(long currentTime, SharedCode.Wizardry.SpellCast spell, System.Collections.Generic.List<SharedCode.Wizardry.SpellPredicateDef> failedPredicates, Assets.ResourceSystem.Arithmetic.Templates.Predicates.PredicateIgnoreGroupDef predicateIgnoreGroupDef);
        System.Threading.Tasks.Task<bool> HasSpellsPreventingThisFromStart(SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId);
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> CastSpell(SharedCode.Wizardry.SpellCast spell, SharedCode.Wizardry.SpellId clientSpellId, SharedCode.Wizardry.SpellId prevSpell);
        System.Threading.Tasks.Task<bool> StopCastSpell(SharedCode.Wizardry.SpellId spell, SharedCode.Wizardry.SpellFinishReason reason);
        System.Threading.Tasks.Task<bool> StopCastSpell(SharedCode.Wizardry.SpellId spell);
        System.Threading.Tasks.Task<long> Update();
        System.Threading.Tasks.Task<bool> Update(SharedCode.Wizardry.SpellId spellId);
        System.Threading.Tasks.Task<SharedCode.Wizardry.WizardDebugData> GetDebugData();
        System.Threading.Tasks.Task<bool> WizardHasDied();
        System.Threading.Tasks.Task<SharedCode.Wizardry.SpellId> WizardHasRisen();
        System.Threading.Tasks.Task CancelSpell(SharedCode.Wizardry.SpellId spellId);
        System.Threading.Tasks.Task SetIsInterestingEnoughToLog(bool enable);
    }
}