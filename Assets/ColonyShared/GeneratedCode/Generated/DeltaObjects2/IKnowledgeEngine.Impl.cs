// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("KnowledgeEngine")]
    public partial class KnowledgeEngine : SharedCode.EntitySystem.BaseEntity, SharedCode.Entities.Engine.IKnowledgeEngine, IKnowledgeEngineImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public KnowledgeEngine()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                KnownTechnologies = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Aspects.Science.TechnologyDef>();
                KnownKnowledges = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Aspects.Science.KnowledgeDef>();
                ShownKnowledgeRecords = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Aspects.Science.KnowledgeRecordDef>();
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
            }

            constructor();
        }

        public KnowledgeEngine(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                KnownTechnologies = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Aspects.Science.TechnologyDef>();
                KnownKnowledges = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Aspects.Science.KnowledgeDef>();
                ShownKnowledgeRecords = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Aspects.Science.KnowledgeRecordDef>();
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_KnownTechnologies != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_KnownTechnologies).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_KnownKnowledges != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_KnownKnowledges).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_ShownKnowledgeRecords != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_ShownKnowledgeRecords).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_OwnerInformation != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_OwnerInformation).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _KnownTechnologies, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _KnownKnowledges, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _ShownKnowledgeRecords, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _OwnerInformation, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _KnownTechnologies, 10, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _KnownKnowledges, 11, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _ShownKnowledgeRecords, 12, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _OwnerInformation, 13, false, SharedCode.EntitySystem.ReplicationLevel.Always);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_KnownTechnologies)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_KnownKnowledges)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ShownKnowledgeRecords)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _KnownTechnologies, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _KnownKnowledges, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _ShownKnowledgeRecords, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _OwnerInformation, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_KnownTechnologies)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_KnownKnowledges)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ShownKnowledgeRecords)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "KnownTechnologies":
                    KnownTechnologies__Changed += callback;
                    break;
                case "KnownKnowledges":
                    KnownKnowledges__Changed += callback;
                    break;
                case "ShownKnowledgeRecords":
                    ShownKnowledgeRecords__Changed += callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "KnownTechnologies":
                    KnownTechnologies__Changed -= callback;
                    break;
                case "KnownKnowledges":
                    KnownKnowledges__Changed -= callback;
                    break;
                case "ShownKnowledgeRecords":
                    ShownKnowledgeRecords__Changed -= callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "KnownTechnologies":
                    KnownTechnologies__Changed = null;
                    break;
                case "KnownKnowledges":
                    KnownKnowledges__Changed = null;
                    break;
                case "ShownKnowledgeRecords":
                    ShownKnowledgeRecords__Changed = null;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            KnownTechnologies__Changed = null;
            KnownKnowledges__Changed = null;
            ShownKnowledgeRecords__Changed = null;
            OwnerInformation__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && KnownTechnologies__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_KnownTechnologies, nameof(KnownTechnologies), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, KnownTechnologies__Changed);
            }

            if (NeedFireEvent(11) && KnownKnowledges__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_KnownKnowledges, nameof(KnownKnowledges), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, KnownKnowledges__Changed);
            }

            if (NeedFireEvent(12) && ShownKnowledgeRecords__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ShownKnowledgeRecords, nameof(ShownKnowledgeRecords), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ShownKnowledgeRecords__Changed);
            }

            if (NeedFireEvent(13) && OwnerInformation__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OwnerInformation, nameof(OwnerInformation), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OwnerInformation__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                KnownTechnologies = default;
            if (_KnownTechnologies != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_KnownTechnologies).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                KnownKnowledges = default;
            if (_KnownKnowledges != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_KnownKnowledges).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                ShownKnowledgeRecords = default;
            if (_ShownKnowledgeRecords != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ShownKnowledgeRecords).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                OwnerInformation = default;
            if (_OwnerInformation != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation).Downgrade(mask);
        }
    }
}