// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    public partial class Brute
    {
        internal static class ExecuteMethods
        {
            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(0, "IBrute_GetForwardDamageMultiplier__Message")]
            internal static async System.Threading.Tasks.Task GetForwardDamageMultiplier_0(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                var __result__ = await ((Assets.ColonyShared.SharedCode.Entities.IBrute)__deltaObj__).GetForwardDamageMultiplier();
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(1, "IBrute_GetSideDamageMultiplier__Message")]
            internal static async System.Threading.Tasks.Task GetSideDamageMultiplier_1(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                var __result__ = await ((Assets.ColonyShared.SharedCode.Entities.IBrute)__deltaObj__).GetSideDamageMultiplier();
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(2, "IBrute_GetBackwardDamageMultiplier__Message")]
            internal static async System.Threading.Tasks.Task GetBackwardDamageMultiplier_2(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                var __result__ = await ((Assets.ColonyShared.SharedCode.Entities.IBrute)__deltaObj__).GetBackwardDamageMultiplier();
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(3, "IBrute_GetAggressionPoint__Message")]
            internal static async System.Threading.Tasks.Task GetAggressionPoint_3(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                var __result__ = await ((Assets.ColonyShared.SharedCode.Entities.IBrute)__deltaObj__).GetAggressionPoint();
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }

            [SharedCode.EntitySystem.RpcMethodExecuteFuncAttribute(4, "IBrute_GetSlotItemAddr_SlotDef_Message")]
            internal static async System.Threading.Tasks.Task GetSlotItemAddr_4(SharedCode.EntitySystem.IDeltaObject __deltaObj__, byte[] __data__, SharedCode.Entities.Core.IChainContext chainContext, string saveResultKey, System.Collections.Generic.Dictionary<int, string> argumentRefs)
            {
                int __offset__ = 0;
                SharedCode.Aspects.Item.Templates.SlotDef weaponSlot;
                (weaponSlot, __offset__) = await SharedCode.EntitySystem.ChainCalls.ChainCallHelpers.GetArg<SharedCode.Aspects.Item.Templates.SlotDef>(__data__, __offset__, 0, chainContext, argumentRefs);
                var __result__ = await ((Assets.ColonyShared.SharedCode.Entities.IBrute)__deltaObj__).GetSlotItemAddr(weaponSlot);
                if (!string.IsNullOrEmpty(saveResultKey))
                    await chainContext.SetContextValue(saveResultKey, __result__);
            }
        }
    }
}