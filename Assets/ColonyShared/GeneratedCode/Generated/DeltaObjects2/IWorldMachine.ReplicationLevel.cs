// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class WorldMachineAlways : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldMachineAlways
    {
        public WorldMachineAlways(SharedCode.Entities.IWorldMachine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldMachine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldMachine)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedAlways)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncAlways)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationAlways)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiAlways)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Always);
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public System.Threading.Tasks.Task<bool> CraftProgressInfoSet(GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftProgressInfoAlways value)
        {
            return __deltaObject__.CraftProgressInfoSet(value.To<SharedCode.DeltaObjects.ICraftProgressInfo>());
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 14:
                    currProperty = Def;
                    break;
                case 15:
                    currProperty = MapOwner;
                    break;
                case 16:
                    currProperty = StaticIdFromExport;
                    break;
                case 17:
                    currProperty = Name;
                    break;
                case 18:
                    currProperty = Prefab;
                    break;
                case 19:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 20:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 22:
                    currProperty = WorldSpaced;
                    break;
                case 23:
                    currProperty = MovementSync;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 29:
                    currProperty = ContainerApi;
                    break;
                case 32:
                    currProperty = Wizard;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 2002737951;
    }

    public class WorldMachineClientBroadcast : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldMachineClientBroadcast
    {
        public WorldMachineClientBroadcast(SharedCode.Entities.IWorldMachine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldMachine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldMachine)__deltaObjectBase__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientBroadcast)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientBroadcast)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientBroadcast OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientBroadcast)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public bool IsActive => __deltaObject__.IsActive;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientBroadcast)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftProgressInfoClientBroadcast CraftProgressInfo => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftProgressInfoClientBroadcast)__deltaObject__.CraftProgressInfo?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientBroadcast)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientBroadcast)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientBroadcast)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientBroadcast)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.RecipeOperationResult> SetActive(bool activate)
        {
            return __deltaObject__.SetActive(activate);
        }

        public System.Threading.Tasks.Task<bool> CraftProgressInfoSet(GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftProgressInfoClientBroadcast value)
        {
            return __deltaObject__.CraftProgressInfoSet(value.To<SharedCode.DeltaObjects.ICraftProgressInfo>());
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 14:
                    currProperty = Def;
                    break;
                case 15:
                    currProperty = MapOwner;
                    break;
                case 16:
                    currProperty = StaticIdFromExport;
                    break;
                case 17:
                    currProperty = Name;
                    break;
                case 18:
                    currProperty = Prefab;
                    break;
                case 19:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 20:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 22:
                    currProperty = WorldSpaced;
                    break;
                case 23:
                    currProperty = MovementSync;
                    break;
                case 24:
                    currProperty = OpenMechanics;
                    break;
                case 25:
                    currProperty = IsActive;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 28:
                    currProperty = CraftProgressInfo;
                    break;
                case 29:
                    currProperty = ContainerApi;
                    break;
                case 30:
                    currProperty = Stats;
                    break;
                case 31:
                    currProperty = Health;
                    break;
                case 32:
                    currProperty = Wizard;
                    break;
                case 33:
                    currProperty = SlaveWizardHolder;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 54740839;
    }

    public class WorldMachineClientFullApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldMachineClientFullApi
    {
        public WorldMachineClientFullApi(SharedCode.Entities.IWorldMachine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldMachine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldMachine)__deltaObjectBase__;
            }
        }

        public override int TypeId => -1825430013;
    }

    public class WorldMachineClientFull : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldMachineClientFull
    {
        public WorldMachineClientFull(SharedCode.Entities.IWorldMachine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldMachine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldMachine)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuildingContainerClientFull Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuildingContainerClientFull)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineFuelContainerClientFull FuelContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineFuelContainerClientFull)__deltaObject__.FuelContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineOutputContainerClientFull OutputContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineOutputContainerClientFull)__deltaObject__.OutputContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemClientFull> __PriorityQueue__Wrapper__;
        public IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemClientFull> PriorityQueue
        {
            get
            {
                if (__PriorityQueue__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__PriorityQueue__Wrapper__).GetBaseDeltaObject() != __deltaObject__.PriorityQueue)
                    __PriorityQueue__Wrapper__ = __deltaObject__.PriorityQueue == null ? null : new DeltaListWrapper<SharedCode.Entities.ICraftingPriorityQueueItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemClientFull>(__deltaObject__.PriorityQueue);
                return __PriorityQueue__Wrapper__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedClientFull)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncClientFull)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientFull OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsClientFull)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public bool IsActive => __deltaObject__.IsActive;
        public SharedCode.Refs.EntityRef<SharedCode.Entities.Engine.ICraftEngine> CraftEngine => __deltaObject__.CraftEngine;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationClientFull)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftProgressInfoClientFull CraftProgressInfo => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftProgressInfoClientFull)__deltaObject__.CraftProgressInfo?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiClientFull)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineClientFull)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineClientFull)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderClientFull)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        public System.Threading.Tasks.Task<SharedCode.Entities.RecipeOperationResult> SetRecipeActivity(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipeDef, bool activate)
        {
            return __deltaObject__.SetRecipeActivity(recipeDef, activate);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.RecipeOperationResult> SetRecipePriority(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipeDef, int priority)
        {
            return __deltaObject__.SetRecipePriority(recipeDef, priority);
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.RecipeOperationResult> SetActive(bool activate)
        {
            return __deltaObject__.SetActive(activate);
        }

        public System.Threading.Tasks.Task<bool> CraftProgressInfoSet(GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftProgressInfoClientFull value)
        {
            return __deltaObject__.CraftProgressInfoSet(value.To<SharedCode.DeltaObjects.ICraftProgressInfo>());
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Inventory;
                    break;
                case 11:
                    currProperty = FuelContainer;
                    break;
                case 12:
                    currProperty = OutputContainer;
                    break;
                case 13:
                    currProperty = PriorityQueue;
                    break;
                case 14:
                    currProperty = Def;
                    break;
                case 15:
                    currProperty = MapOwner;
                    break;
                case 16:
                    currProperty = StaticIdFromExport;
                    break;
                case 17:
                    currProperty = Name;
                    break;
                case 18:
                    currProperty = Prefab;
                    break;
                case 19:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 20:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 22:
                    currProperty = WorldSpaced;
                    break;
                case 23:
                    currProperty = MovementSync;
                    break;
                case 24:
                    currProperty = OpenMechanics;
                    break;
                case 25:
                    currProperty = IsActive;
                    break;
                case 26:
                    currProperty = CraftEngine;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 28:
                    currProperty = CraftProgressInfo;
                    break;
                case 29:
                    currProperty = ContainerApi;
                    break;
                case 30:
                    currProperty = Stats;
                    break;
                case 31:
                    currProperty = Health;
                    break;
                case 32:
                    currProperty = Wizard;
                    break;
                case 33:
                    currProperty = SlaveWizardHolder;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1173070865;
    }

    public class WorldMachineServerApi : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldMachineServerApi
    {
        public WorldMachineServerApi(SharedCode.Entities.IWorldMachine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldMachine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldMachine)__deltaObjectBase__;
            }
        }

        public override int TypeId => -981914158;
    }

    public class WorldMachineServer : BaseEntityWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldMachineServer
    {
        public WorldMachineServer(SharedCode.Entities.IWorldMachine deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.IWorldMachine __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.IWorldMachine)__deltaObjectBase__;
            }
        }

        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuildingContainerServer Inventory => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IBuildingContainerServer)__deltaObject__.Inventory?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineFuelContainerServer FuelContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineFuelContainerServer)__deltaObject__.FuelContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineOutputContainerServer OutputContainer => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IMachineOutputContainerServer)__deltaObject__.OutputContainer?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemServer> __PriorityQueue__Wrapper__;
        public IDeltaListWrapper<GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemServer> PriorityQueue
        {
            get
            {
                if (__PriorityQueue__Wrapper__ == null || ((IBaseDeltaObjectWrapper)__PriorityQueue__Wrapper__).GetBaseDeltaObject() != __deltaObject__.PriorityQueue)
                    __PriorityQueue__Wrapper__ = __deltaObject__.PriorityQueue == null ? null : new DeltaListWrapper<SharedCode.Entities.ICraftingPriorityQueueItem, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemServer>(__deltaObject__.PriorityQueue);
                return __PriorityQueue__Wrapper__;
            }
        }

        public SharedCode.Entities.GameObjectEntities.IEntityObjectDef Def => __deltaObject__.Def;
        public GeneratedCode.MapSystem.MapOwner MapOwner => __deltaObject__.MapOwner;
        public System.Guid StaticIdFromExport => __deltaObject__.StaticIdFromExport;
        public string Name => __deltaObject__.Name;
        public string Prefab => __deltaObject__.Prefab;
        public Assets.Src.ResourcesSystem.Base.ISaveableResource SomeUnknownResourceThatMayBeUseful => __deltaObject__.SomeUnknownResourceThatMayBeUseful;
        public SharedCode.Entities.OnSceneObjectNetId OnSceneObjectNetId => __deltaObject__.OnSceneObjectNetId;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer WorldSpaced => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IWorldSpacedServer)__deltaObject__.WorldSpaced?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer MovementSync => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISimpleMovementSyncServer)__deltaObject__.MovementSync?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public Assets.ColonyShared.SharedCode.Aspects.Damage.Templates.ItemSpecificStats SpecificStats => __deltaObject__.SpecificStats;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsServer OpenMechanics => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOpenMechanicsServer)__deltaObject__.OpenMechanics?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public bool IsActive => __deltaObject__.IsActive;
        public SharedCode.Refs.EntityRef<SharedCode.Entities.Engine.ICraftEngine> CraftEngine => __deltaObject__.CraftEngine;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer OwnerInformation => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IOwnerInformationServer)__deltaObject__.OwnerInformation?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftProgressInfoServer CraftProgressInfo => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftProgressInfoServer)__deltaObject__.CraftProgressInfo?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer ContainerApi => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IContainerApiServer)__deltaObject__.ContainerApi?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer Stats => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IStatsEngineServer)__deltaObject__.Stats?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer Health => (GeneratedCode.DeltaObjects.ReplicationInterfaces.IHealthEngineServer)__deltaObject__.Health?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public SharedCode.Refs.EntityRef<SharedCode.Wizardry.IWizardEntity> Wizard => __deltaObject__.Wizard;
        public GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer SlaveWizardHolder => (GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlaveWizardHolderServer)__deltaObject__.SlaveWizardHolder?.GetReplicationLevel(SharedCode.EntitySystem.ReplicationLevel.Server);
        public System.Threading.Tasks.Task<SharedCode.Entities.RecipeOperationResult> SetRecipeActivity(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipeDef, bool activate)
        {
            return __deltaObject__.SetRecipeActivity(recipeDef, activate);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.RecipeOperationResult> SetRecipePriority(Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef recipeDef, int priority)
        {
            return __deltaObject__.SetRecipePriority(recipeDef, priority);
        }

        public System.Threading.Tasks.Task UpdateCraftProgressInfo()
        {
            return __deltaObject__.UpdateCraftProgressInfo();
        }

        public System.Threading.Tasks.Task<bool> NameSet(string value)
        {
            return __deltaObject__.NameSet(value);
        }

        public System.Threading.Tasks.Task<bool> PrefabSet(string value)
        {
            return __deltaObject__.PrefabSet(value);
        }

        public System.Threading.Tasks.Task<SharedCode.Entities.RecipeOperationResult> SetActive(bool activate)
        {
            return __deltaObject__.SetActive(activate);
        }

        public System.Threading.Tasks.Task<bool> CraftProgressInfoSet(GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftProgressInfoServer value)
        {
            return __deltaObject__.CraftProgressInfoSet(value.To<SharedCode.DeltaObjects.ICraftProgressInfo>());
        }

        public System.Threading.Tasks.Task<ResourceSystem.Utils.OuterRef> GetOpenOuterRef(ResourceSystem.Utils.OuterRef oref)
        {
            return __deltaObject__.GetOpenOuterRef(oref);
        }

        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Inventory;
                    break;
                case 11:
                    currProperty = FuelContainer;
                    break;
                case 12:
                    currProperty = OutputContainer;
                    break;
                case 13:
                    currProperty = PriorityQueue;
                    break;
                case 14:
                    currProperty = Def;
                    break;
                case 15:
                    currProperty = MapOwner;
                    break;
                case 16:
                    currProperty = StaticIdFromExport;
                    break;
                case 17:
                    currProperty = Name;
                    break;
                case 18:
                    currProperty = Prefab;
                    break;
                case 19:
                    currProperty = SomeUnknownResourceThatMayBeUseful;
                    break;
                case 20:
                    currProperty = OnSceneObjectNetId;
                    break;
                case 22:
                    currProperty = WorldSpaced;
                    break;
                case 23:
                    currProperty = MovementSync;
                    break;
                case 24:
                    currProperty = OpenMechanics;
                    break;
                case 25:
                    currProperty = IsActive;
                    break;
                case 26:
                    currProperty = CraftEngine;
                    break;
                case 27:
                    currProperty = OwnerInformation;
                    break;
                case 28:
                    currProperty = CraftProgressInfo;
                    break;
                case 29:
                    currProperty = ContainerApi;
                    break;
                case 30:
                    currProperty = Stats;
                    break;
                case 31:
                    currProperty = Health;
                    break;
                case 32:
                    currProperty = Wizard;
                    break;
                case 33:
                    currProperty = SlaveWizardHolder;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 1583812497;
    }
}

namespace GeneratedCode.DeltaObjects
{
    public class CraftingPriorityQueueItemAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemAlways
    {
        public CraftingPriorityQueueItemAlways(SharedCode.Entities.ICraftingPriorityQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ICraftingPriorityQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ICraftingPriorityQueueItem)__deltaObjectBase__;
            }
        }

        public override int TypeId => -196734927;
    }

    public class CraftingPriorityQueueItemClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemClientBroadcast
    {
        public CraftingPriorityQueueItemClientBroadcast(SharedCode.Entities.ICraftingPriorityQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ICraftingPriorityQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ICraftingPriorityQueueItem)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1527882854;
    }

    public class CraftingPriorityQueueItemClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemClientFullApi
    {
        public CraftingPriorityQueueItemClientFullApi(SharedCode.Entities.ICraftingPriorityQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ICraftingPriorityQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ICraftingPriorityQueueItem)__deltaObjectBase__;
            }
        }

        public override int TypeId => -693547340;
    }

    public class CraftingPriorityQueueItemClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemClientFull
    {
        public CraftingPriorityQueueItemClientFull(SharedCode.Entities.ICraftingPriorityQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ICraftingPriorityQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ICraftingPriorityQueueItem)__deltaObjectBase__;
            }
        }

        public Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef CraftRecipe => __deltaObject__.CraftRecipe;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = CraftRecipe;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -260629898;
    }

    public class CraftingPriorityQueueItemServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemServerApi
    {
        public CraftingPriorityQueueItemServerApi(SharedCode.Entities.ICraftingPriorityQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ICraftingPriorityQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ICraftingPriorityQueueItem)__deltaObjectBase__;
            }
        }

        public override int TypeId => -258269006;
    }

    public class CraftingPriorityQueueItemServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingPriorityQueueItemServer
    {
        public CraftingPriorityQueueItemServer(SharedCode.Entities.ICraftingPriorityQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.ICraftingPriorityQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.ICraftingPriorityQueueItem)__deltaObjectBase__;
            }
        }

        public Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef CraftRecipe => __deltaObject__.CraftRecipe;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = CraftRecipe;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -931476670;
    }
}