// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("MineableEntity")]
    public partial class MineableEntity : SharedCode.EntitySystem.BaseEntity, SharedCode.Entities.Mineable.IMineableEntity, IMineableEntityImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public MineableEntity()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                CurrProgressActualTime = default(float);
                Health = new GeneratedCode.DeltaObjects.HealthEngine();
                Destroyable = new GeneratedCode.DeltaObjects.Destroyable();
                Mortal = new GeneratedCode.DeltaObjects.Mortal();
                Brute = new GeneratedCode.DeltaObjects.Brute();
                Stats = new GeneratedCode.DeltaObjects.StatsEngine();
                Lifespan = new GeneratedCode.DeltaObjects.Lifespan();
                ComputableStateMachine = new GeneratedCode.DeltaObjects.ComputableStateMachine();
                SpawnedObject = new GeneratedCode.DeltaObjects.SpawnedObject();
                Def = default(SharedCode.Entities.GameObjectEntities.IEntityObjectDef);
                MapOwner = default(GeneratedCode.MapSystem.MapOwner);
                StaticIdFromExport = default(System.Guid);
                Name = default(string);
                Prefab = default(string);
                SomeUnknownResourceThatMayBeUseful = default(Assets.Src.ResourcesSystem.Base.ISaveableResource);
                OnSceneObjectNetId = default(SharedCode.Entities.OnSceneObjectNetId);
                AutoAddToWorldSpace = new GeneratedCode.DeltaObjects.AutoAddToWorldSpace();
                WorldSpaced = new GeneratedCode.DeltaObjects.WorldSpaced();
                MovementSync = new GeneratedCode.DeltaObjects.SimpleMovementSync();
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
            }

            constructor();
        }

        public MineableEntity(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                CurrProgressActualTime = default(float);
                Health = new GeneratedCode.DeltaObjects.HealthEngine();
                Destroyable = new GeneratedCode.DeltaObjects.Destroyable();
                Mortal = new GeneratedCode.DeltaObjects.Mortal();
                Brute = new GeneratedCode.DeltaObjects.Brute();
                Stats = new GeneratedCode.DeltaObjects.StatsEngine();
                Lifespan = new GeneratedCode.DeltaObjects.Lifespan();
                ComputableStateMachine = new GeneratedCode.DeltaObjects.ComputableStateMachine();
                SpawnedObject = new GeneratedCode.DeltaObjects.SpawnedObject();
                Def = default(SharedCode.Entities.GameObjectEntities.IEntityObjectDef);
                MapOwner = default(GeneratedCode.MapSystem.MapOwner);
                StaticIdFromExport = default(System.Guid);
                Name = default(string);
                Prefab = default(string);
                SomeUnknownResourceThatMayBeUseful = default(Assets.Src.ResourcesSystem.Base.ISaveableResource);
                OnSceneObjectNetId = default(SharedCode.Entities.OnSceneObjectNetId);
                AutoAddToWorldSpace = new GeneratedCode.DeltaObjects.AutoAddToWorldSpace();
                WorldSpaced = new GeneratedCode.DeltaObjects.WorldSpaced();
                MovementSync = new GeneratedCode.DeltaObjects.SimpleMovementSync();
                OwnerInformation = new GeneratedCode.DeltaObjects.OwnerInformation();
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_Health != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Health).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Server) == (long)SharedCode.EntitySystem.ReplicationLevel.Server)
                if (_Destroyable != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Destroyable).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Server, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_Mortal != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Mortal).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_Brute != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Brute).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_Stats != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Stats).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_Lifespan != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Lifespan).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_ComputableStateMachine != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_ComputableStateMachine).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast)
                if (_SpawnedObject != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_SpawnedObject).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Master) == (long)SharedCode.EntitySystem.ReplicationLevel.Master)
                if (_AutoAddToWorldSpace != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_AutoAddToWorldSpace).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Master, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_WorldSpaced != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_WorldSpaced).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_MovementSync != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_MovementSync).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.Always) == (long)SharedCode.EntitySystem.ReplicationLevel.Always)
                if (_OwnerInformation != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_OwnerInformation).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.Always, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Health, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Destroyable, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Server ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Server, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Mortal, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Brute, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Stats, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Lifespan, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _ComputableStateMachine, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _SpawnedObject, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _AutoAddToWorldSpace, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Master ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Master, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _WorldSpaced, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _MovementSync, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _OwnerInformation, currentLevel > SharedCode.EntitySystem.ReplicationLevel.Always ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.Always, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Health, 11, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Destroyable, 12, false, SharedCode.EntitySystem.ReplicationLevel.Server);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Mortal, 13, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Brute, 14, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Stats, 15, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Lifespan, 16, false, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _ComputableStateMachine, 17, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _SpawnedObject, 18, true, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _AutoAddToWorldSpace, 26, false, SharedCode.EntitySystem.ReplicationLevel.Master);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _WorldSpaced, 27, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _MovementSync, 28, false, SharedCode.EntitySystem.ReplicationLevel.Always);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _OwnerInformation, 29, false, SharedCode.EntitySystem.ReplicationLevel.Always);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Health)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Destroyable)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Mortal)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Brute)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Stats)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Lifespan)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ComputableStateMachine)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SpawnedObject)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AutoAddToWorldSpace)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_WorldSpaced)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_MovementSync)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Health, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Destroyable, SharedCode.EntitySystem.ReplicationLevel.Server, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Mortal, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Brute, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Stats, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Lifespan, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _ComputableStateMachine, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _SpawnedObject, SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _AutoAddToWorldSpace, SharedCode.EntitySystem.ReplicationLevel.Master, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _WorldSpaced, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _MovementSync, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _OwnerInformation, SharedCode.EntitySystem.ReplicationLevel.Always, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Health)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Destroyable)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Mortal)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Brute)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Stats)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Lifespan)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ComputableStateMachine)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SpawnedObject)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AutoAddToWorldSpace)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_WorldSpaced)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_MovementSync)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "CurrProgressActualTime":
                    CurrProgressActualTime__Changed += callback;
                    break;
                case "Health":
                    Health__Changed += callback;
                    break;
                case "Destroyable":
                    Destroyable__Changed += callback;
                    break;
                case "Mortal":
                    Mortal__Changed += callback;
                    break;
                case "Brute":
                    Brute__Changed += callback;
                    break;
                case "Stats":
                    Stats__Changed += callback;
                    break;
                case "Lifespan":
                    Lifespan__Changed += callback;
                    break;
                case "ComputableStateMachine":
                    ComputableStateMachine__Changed += callback;
                    break;
                case "SpawnedObject":
                    SpawnedObject__Changed += callback;
                    break;
                case "Def":
                    Def__Changed += callback;
                    break;
                case "MapOwner":
                    MapOwner__Changed += callback;
                    break;
                case "StaticIdFromExport":
                    StaticIdFromExport__Changed += callback;
                    break;
                case "Name":
                    Name__Changed += callback;
                    break;
                case "Prefab":
                    Prefab__Changed += callback;
                    break;
                case "SomeUnknownResourceThatMayBeUseful":
                    SomeUnknownResourceThatMayBeUseful__Changed += callback;
                    break;
                case "OnSceneObjectNetId":
                    OnSceneObjectNetId__Changed += callback;
                    break;
                case "AutoAddToWorldSpace":
                    AutoAddToWorldSpace__Changed += callback;
                    break;
                case "WorldSpaced":
                    WorldSpaced__Changed += callback;
                    break;
                case "MovementSync":
                    MovementSync__Changed += callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "CurrProgressActualTime":
                    CurrProgressActualTime__Changed -= callback;
                    break;
                case "Health":
                    Health__Changed -= callback;
                    break;
                case "Destroyable":
                    Destroyable__Changed -= callback;
                    break;
                case "Mortal":
                    Mortal__Changed -= callback;
                    break;
                case "Brute":
                    Brute__Changed -= callback;
                    break;
                case "Stats":
                    Stats__Changed -= callback;
                    break;
                case "Lifespan":
                    Lifespan__Changed -= callback;
                    break;
                case "ComputableStateMachine":
                    ComputableStateMachine__Changed -= callback;
                    break;
                case "SpawnedObject":
                    SpawnedObject__Changed -= callback;
                    break;
                case "Def":
                    Def__Changed -= callback;
                    break;
                case "MapOwner":
                    MapOwner__Changed -= callback;
                    break;
                case "StaticIdFromExport":
                    StaticIdFromExport__Changed -= callback;
                    break;
                case "Name":
                    Name__Changed -= callback;
                    break;
                case "Prefab":
                    Prefab__Changed -= callback;
                    break;
                case "SomeUnknownResourceThatMayBeUseful":
                    SomeUnknownResourceThatMayBeUseful__Changed -= callback;
                    break;
                case "OnSceneObjectNetId":
                    OnSceneObjectNetId__Changed -= callback;
                    break;
                case "AutoAddToWorldSpace":
                    AutoAddToWorldSpace__Changed -= callback;
                    break;
                case "WorldSpaced":
                    WorldSpaced__Changed -= callback;
                    break;
                case "MovementSync":
                    MovementSync__Changed -= callback;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "CurrProgressActualTime":
                    CurrProgressActualTime__Changed = null;
                    break;
                case "Health":
                    Health__Changed = null;
                    break;
                case "Destroyable":
                    Destroyable__Changed = null;
                    break;
                case "Mortal":
                    Mortal__Changed = null;
                    break;
                case "Brute":
                    Brute__Changed = null;
                    break;
                case "Stats":
                    Stats__Changed = null;
                    break;
                case "Lifespan":
                    Lifespan__Changed = null;
                    break;
                case "ComputableStateMachine":
                    ComputableStateMachine__Changed = null;
                    break;
                case "SpawnedObject":
                    SpawnedObject__Changed = null;
                    break;
                case "Def":
                    Def__Changed = null;
                    break;
                case "MapOwner":
                    MapOwner__Changed = null;
                    break;
                case "StaticIdFromExport":
                    StaticIdFromExport__Changed = null;
                    break;
                case "Name":
                    Name__Changed = null;
                    break;
                case "Prefab":
                    Prefab__Changed = null;
                    break;
                case "SomeUnknownResourceThatMayBeUseful":
                    SomeUnknownResourceThatMayBeUseful__Changed = null;
                    break;
                case "OnSceneObjectNetId":
                    OnSceneObjectNetId__Changed = null;
                    break;
                case "AutoAddToWorldSpace":
                    AutoAddToWorldSpace__Changed = null;
                    break;
                case "WorldSpaced":
                    WorldSpaced__Changed = null;
                    break;
                case "MovementSync":
                    MovementSync__Changed = null;
                    break;
                case "OwnerInformation":
                    OwnerInformation__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            CurrProgressActualTime__Changed = null;
            Health__Changed = null;
            Destroyable__Changed = null;
            Mortal__Changed = null;
            Brute__Changed = null;
            Stats__Changed = null;
            Lifespan__Changed = null;
            ComputableStateMachine__Changed = null;
            SpawnedObject__Changed = null;
            Def__Changed = null;
            MapOwner__Changed = null;
            StaticIdFromExport__Changed = null;
            Name__Changed = null;
            Prefab__Changed = null;
            SomeUnknownResourceThatMayBeUseful__Changed = null;
            OnSceneObjectNetId__Changed = null;
            AutoAddToWorldSpace__Changed = null;
            WorldSpaced__Changed = null;
            MovementSync__Changed = null;
            OwnerInformation__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && CurrProgressActualTime__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CurrProgressActualTime, nameof(CurrProgressActualTime), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CurrProgressActualTime__Changed);
            }

            if (NeedFireEvent(11) && Health__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Health, nameof(Health), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Health__Changed);
            }

            if (NeedFireEvent(12) && Destroyable__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Destroyable, nameof(Destroyable), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Destroyable__Changed);
            }

            if (NeedFireEvent(13) && Mortal__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Mortal, nameof(Mortal), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Mortal__Changed);
            }

            if (NeedFireEvent(14) && Brute__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Brute, nameof(Brute), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Brute__Changed);
            }

            if (NeedFireEvent(15) && Stats__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Stats, nameof(Stats), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Stats__Changed);
            }

            if (NeedFireEvent(16) && Lifespan__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 16;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Lifespan, nameof(Lifespan), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Lifespan__Changed);
            }

            if (NeedFireEvent(17) && ComputableStateMachine__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 17;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_ComputableStateMachine, nameof(ComputableStateMachine), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, ComputableStateMachine__Changed);
            }

            if (NeedFireEvent(18) && SpawnedObject__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 18;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SpawnedObject, nameof(SpawnedObject), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SpawnedObject__Changed);
            }

            if (NeedFireEvent(19) && Def__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 19;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Def, nameof(Def), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Def__Changed);
            }

            if (NeedFireEvent(20) && MapOwner__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 20;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_MapOwner, nameof(MapOwner), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, MapOwner__Changed);
            }

            if (NeedFireEvent(21) && StaticIdFromExport__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 21;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_StaticIdFromExport, nameof(StaticIdFromExport), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, StaticIdFromExport__Changed);
            }

            if (NeedFireEvent(22) && Name__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 22;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Name, nameof(Name), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Name__Changed);
            }

            if (NeedFireEvent(23) && Prefab__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 23;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Prefab, nameof(Prefab), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Prefab__Changed);
            }

            if (NeedFireEvent(24) && SomeUnknownResourceThatMayBeUseful__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 24;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_SomeUnknownResourceThatMayBeUseful, nameof(SomeUnknownResourceThatMayBeUseful), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, SomeUnknownResourceThatMayBeUseful__Changed);
            }

            if (NeedFireEvent(25) && OnSceneObjectNetId__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 25;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OnSceneObjectNetId, nameof(OnSceneObjectNetId), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OnSceneObjectNetId__Changed);
            }

            if (NeedFireEvent(26) && AutoAddToWorldSpace__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 26;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AutoAddToWorldSpace, nameof(AutoAddToWorldSpace), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AutoAddToWorldSpace__Changed);
            }

            if (NeedFireEvent(27) && WorldSpaced__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 27;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_WorldSpaced, nameof(WorldSpaced), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, WorldSpaced__Changed);
            }

            if (NeedFireEvent(28) && MovementSync__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 28;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_MovementSync, nameof(MovementSync), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, MovementSync__Changed);
            }

            if (NeedFireEvent(29) && OwnerInformation__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 29;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_OwnerInformation, nameof(OwnerInformation), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, OwnerInformation__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                CurrProgressActualTime = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Health = default;
            if (_Health != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Health).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Server & mask) > 0)
                Destroyable = default;
            if (_Destroyable != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Destroyable).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Mortal = default;
            if (_Mortal != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Mortal).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                Brute = default;
            if (_Brute != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Brute).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Stats = default;
            if (_Stats != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Stats).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                Lifespan = default;
            if (_Lifespan != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Lifespan).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                ComputableStateMachine = default;
            if (_ComputableStateMachine != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_ComputableStateMachine).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                SpawnedObject = default;
            if (_SpawnedObject != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_SpawnedObject).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                MapOwner = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Name = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                Prefab = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                SomeUnknownResourceThatMayBeUseful = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                OnSceneObjectNetId = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Master & mask) > 0)
                AutoAddToWorldSpace = default;
            if (_AutoAddToWorldSpace != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AutoAddToWorldSpace).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                WorldSpaced = default;
            if (_WorldSpaced != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_WorldSpaced).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                MovementSync = default;
            if (_MovementSync != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_MovementSync).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                OwnerInformation = default;
            if (_OwnerInformation != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_OwnerInformation).Downgrade(mask);
        }
    }
}