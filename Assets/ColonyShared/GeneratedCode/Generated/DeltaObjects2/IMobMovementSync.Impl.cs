// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("MobMovementSync")]
    public partial class MobMovementSync : SharedCode.EntitySystem.BaseDeltaObject, SharedCode.MovementSync.IMobMovementSync, IMobMovementSyncImplementRemoteMethods
    {
        public MobMovementSync()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                __SyncMovementReliable = default(SharedCode.MovementSync.MobMovementStatePacked);
                def = default(SharedCode.Wizardry.SpellEffectDef);
                MovementData = default(SharedCode.MovementSync.MovementData);
                PathFindingOwnerRepositoryId = default(System.Guid);
            }

            constructor();
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "__SyncMovementReliable":
                    __SyncMovementReliable__Changed += callback;
                    break;
                case "def":
                    def__Changed += callback;
                    break;
                case "MovementData":
                    MovementData__Changed += callback;
                    break;
                case "PathFindingOwnerRepositoryId":
                    PathFindingOwnerRepositoryId__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "__SyncMovementReliable":
                    __SyncMovementReliable__Changed -= callback;
                    break;
                case "def":
                    def__Changed -= callback;
                    break;
                case "MovementData":
                    MovementData__Changed -= callback;
                    break;
                case "PathFindingOwnerRepositoryId":
                    PathFindingOwnerRepositoryId__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "__SyncMovementReliable":
                    __SyncMovementReliable__Changed = null;
                    break;
                case "def":
                    def__Changed = null;
                    break;
                case "MovementData":
                    MovementData__Changed = null;
                    break;
                case "PathFindingOwnerRepositoryId":
                    PathFindingOwnerRepositoryId__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            __SyncMovementReliable__Changed = null;
            def__Changed = null;
            MovementData__Changed = null;
            PathFindingOwnerRepositoryId__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && __SyncMovementReliable__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(___SyncMovementReliable, nameof(__SyncMovementReliable), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, __SyncMovementReliable__Changed);
            }

            if (NeedFireEvent(11) && def__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_def, nameof(def), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, def__Changed);
            }

            if (NeedFireEvent(12) && MovementData__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_MovementData, nameof(MovementData), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, MovementData__Changed);
            }

            if (NeedFireEvent(13) && PathFindingOwnerRepositoryId__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_PathFindingOwnerRepositoryId, nameof(PathFindingOwnerRepositoryId), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, PathFindingOwnerRepositoryId__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                __SyncMovementReliable = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                def = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                MovementData = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.Always & mask) > 0)
                PathFindingOwnerRepositoryId = default;
        }
    }
}