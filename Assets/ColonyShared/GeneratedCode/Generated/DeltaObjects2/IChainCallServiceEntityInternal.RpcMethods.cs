// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class ChainCallServiceEntityInternal
    {
        public Task ChainCall(SharedCode.Entities.Core.IEntityMethodsCallsChain chainCall)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ChainCallRunMaster(chainCall).AsTask();
                else
                    return ChainCallRun(chainCall).AsTask();
            else
                return SendFuncs.ChainCall(chainCall, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> ChainCallCreateDeferredDelegate(SharedCode.Entities.Core.IEntityMethodsCallsChain chainCall) => () =>
        {
            return ChainCall(chainCall);
        }

        ;
        public async ValueTask ChainCallRunMaster(SharedCode.Entities.Core.IEntityMethodsCallsChain chainCall)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ChainCallCreateDeferredDelegate(chainCall), nameof(ChainCall));
            }

            await ChainCallRun(chainCall);
        }

        public async ValueTask ChainCallRun(SharedCode.Entities.Core.IEntityMethodsCallsChain chainCall)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IChainCallServiceEntityInternal), 0);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = ChainCallImpl(chainCall);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task AddExistingChainCalls(System.Collections.Generic.List<SharedCode.Entities.Core.IEntityMethodsCallsChain> chainCalls, int typeId, System.Guid entityId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return AddExistingChainCallsRunMaster(chainCalls, typeId, entityId).AsTask();
                else
                    return AddExistingChainCallsRun(chainCalls, typeId, entityId).AsTask();
            else
                return SendFuncs.AddExistingChainCalls(chainCalls, typeId, entityId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> AddExistingChainCallsCreateDeferredDelegate(System.Collections.Generic.List<SharedCode.Entities.Core.IEntityMethodsCallsChain> chainCalls, int typeId, System.Guid entityId) => () =>
        {
            return AddExistingChainCalls(chainCalls, typeId, entityId);
        }

        ;
        public async ValueTask AddExistingChainCallsRunMaster(System.Collections.Generic.List<SharedCode.Entities.Core.IEntityMethodsCallsChain> chainCalls, int typeId, System.Guid entityId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(AddExistingChainCallsCreateDeferredDelegate(chainCalls, typeId, entityId), nameof(AddExistingChainCalls));
            }

            await AddExistingChainCallsRun(chainCalls, typeId, entityId);
        }

        public async ValueTask AddExistingChainCallsRun(System.Collections.Generic.List<SharedCode.Entities.Core.IEntityMethodsCallsChain> chainCalls, int typeId, System.Guid entityId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IChainCallServiceEntityInternal), 1);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = AddExistingChainCallsImpl(chainCalls, typeId, entityId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task ChainCallBatch(System.Collections.Generic.List<SharedCode.Entities.Core.IEntityMethodsCallsChain> chainCalls)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ChainCallBatchRunMaster(chainCalls).AsTask();
                else
                    return ChainCallBatchRun(chainCalls).AsTask();
            else
                return SendFuncs.ChainCallBatch(chainCalls, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> ChainCallBatchCreateDeferredDelegate(System.Collections.Generic.List<SharedCode.Entities.Core.IEntityMethodsCallsChain> chainCalls) => () =>
        {
            return ChainCallBatch(chainCalls);
        }

        ;
        public async ValueTask ChainCallBatchRunMaster(System.Collections.Generic.List<SharedCode.Entities.Core.IEntityMethodsCallsChain> chainCalls)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ChainCallBatchCreateDeferredDelegate(chainCalls), nameof(ChainCallBatch));
            }

            await ChainCallBatchRun(chainCalls);
        }

        public async ValueTask ChainCallBatchRun(System.Collections.Generic.List<SharedCode.Entities.Core.IEntityMethodsCallsChain> chainCalls)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IChainCallServiceEntityInternal), 2);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = ChainCallBatchImpl(chainCalls);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task CancelChain(int typeId, System.Guid entityId, System.Guid chainId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CancelChainRunMaster(typeId, entityId, chainId).AsTask();
                else
                    return CancelChainRun(typeId, entityId, chainId).AsTask();
            else
                return SendFuncs.CancelChain(typeId, entityId, chainId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> CancelChainCreateDeferredDelegate(int typeId, System.Guid entityId, System.Guid chainId) => () =>
        {
            return CancelChain(typeId, entityId, chainId);
        }

        ;
        public async ValueTask CancelChainRunMaster(int typeId, System.Guid entityId, System.Guid chainId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CancelChainCreateDeferredDelegate(typeId, entityId, chainId), nameof(CancelChain));
            }

            await CancelChainRun(typeId, entityId, chainId);
        }

        public async ValueTask CancelChainRun(int typeId, System.Guid entityId, System.Guid chainId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IChainCallServiceEntityInternal), 3);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CancelChainImpl(typeId, entityId, chainId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> CancelAllChain(int typeId, System.Guid entityId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return CancelAllChainRunMaster(typeId, entityId).AsTask();
                else
                    return CancelAllChainRun(typeId, entityId).AsTask();
            else
                return SendFuncs.CancelAllChain(typeId, entityId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> CancelAllChainCreateDeferredDelegate(int typeId, System.Guid entityId) => () =>
        {
            return CancelAllChain(typeId, entityId);
        }

        ;
        public async ValueTask<bool> CancelAllChainRunMaster(int typeId, System.Guid entityId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(CancelAllChainCreateDeferredDelegate(typeId, entityId), nameof(CancelAllChain));
            }

            return await CancelAllChainRun(typeId, entityId);
        }

        public async ValueTask<bool> CancelAllChainRun(int typeId, System.Guid entityId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Service.IChainCallServiceEntityInternal), 4);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = CancelAllChainImpl(typeId, entityId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}