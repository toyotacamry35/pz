// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading;
using System.Threading.Tasks;
using GeneratedCode.EntitySystem;
using SharedCode.Logging;
using System.Linq;
using SharedCode.EntitySystem;
using SharedCode.Network;

namespace GeneratedCode.DeltaObjects
{
    public partial class RepositoryCommunicationEntity
    {
        public ValueTask<bool> SetCloudRequirementsMet()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetCloudRequirementsMetRunMaster();
                else
                    return SetCloudRequirementsMetRun();
            else
                return SendFuncs.SetCloudRequirementsMet(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<bool>> SetCloudRequirementsMetCreateDeferredDelegate() => () =>
        {
            return SetCloudRequirementsMet().AsTask();
        }

        ;
        public async ValueTask<bool> SetCloudRequirementsMetRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetCloudRequirementsMetCreateDeferredDelegate(), nameof(SetCloudRequirementsMet));
            }

            return await SetCloudRequirementsMetRun();
        }

        public async ValueTask<bool> SetCloudRequirementsMetRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 0);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(SetCloudRequirementsMet)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = SetCloudRequirementsMetImpl();
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public ValueTask<bool> SetInitializationTasksCompleted()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetInitializationTasksCompletedRunMaster();
                else
                    return SetInitializationTasksCompletedRun();
            else
                return SendFuncs.SetInitializationTasksCompleted(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<bool>> SetInitializationTasksCompletedCreateDeferredDelegate() => () =>
        {
            return SetInitializationTasksCompleted().AsTask();
        }

        ;
        public async ValueTask<bool> SetInitializationTasksCompletedRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetInitializationTasksCompletedCreateDeferredDelegate(), nameof(SetInitializationTasksCompleted));
            }

            return await SetInitializationTasksCompletedRun();
        }

        public async ValueTask<bool> SetInitializationTasksCompletedRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 1);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(SetInitializationTasksCompleted)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = SetInitializationTasksCompletedImpl();
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public ValueTask<bool> SetExternalCommNodeOpen()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SetExternalCommNodeOpenRunMaster();
                else
                    return SetExternalCommNodeOpenRun();
            else
                return SendFuncs.SetExternalCommNodeOpen(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId());
        }

        private Func<Task<bool>> SetExternalCommNodeOpenCreateDeferredDelegate() => () =>
        {
            return SetExternalCommNodeOpen().AsTask();
        }

        ;
        public async ValueTask<bool> SetExternalCommNodeOpenRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SetExternalCommNodeOpenCreateDeferredDelegate(), nameof(SetExternalCommNodeOpen));
            }

            return await SetExternalCommNodeOpenRun();
        }

        public async ValueTask<bool> SetExternalCommNodeOpenRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 2);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(SetExternalCommNodeOpen)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = SetExternalCommNodeOpenImpl();
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> FireOnDisconnect()
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return FireOnDisconnectRunMaster().AsTask();
                else
                    return FireOnDisconnectRun().AsTask();
            else
                return SendFuncs.FireOnDisconnect(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> FireOnDisconnectCreateDeferredDelegate() => () =>
        {
            return FireOnDisconnect();
        }

        ;
        public async ValueTask<bool> FireOnDisconnectRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(FireOnDisconnectCreateDeferredDelegate(), nameof(FireOnDisconnect));
            }

            return await FireOnDisconnectRun();
        }

        public async ValueTask<bool> FireOnDisconnectRun()
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 3);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(FireOnDisconnect)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = FireOnDisconnectImpl();
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            return await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                    else
                        return returnTask.Result;
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task<bool> NotifyOfExistingConnections(System.Collections.Generic.List<SharedCode.Entities.Cloud.EndpointAddress> endpoints)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return NotifyOfExistingConnectionsRunMaster(endpoints).AsTask();
                else
                    return NotifyOfExistingConnectionsRun(endpoints).AsTask();
            else
                return SendFuncs.NotifyOfExistingConnections(endpoints, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> NotifyOfExistingConnectionsCreateDeferredDelegate(System.Collections.Generic.List<SharedCode.Entities.Cloud.EndpointAddress> endpoints) => () =>
        {
            return NotifyOfExistingConnections(endpoints);
        }

        ;
        public async ValueTask<bool> NotifyOfExistingConnectionsRunMaster(System.Collections.Generic.List<SharedCode.Entities.Cloud.EndpointAddress> endpoints)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(NotifyOfExistingConnectionsCreateDeferredDelegate(endpoints), nameof(NotifyOfExistingConnections));
            }

            return await NotifyOfExistingConnectionsRun(endpoints);
        }

        public async ValueTask<bool> NotifyOfExistingConnectionsRun(System.Collections.Generic.List<SharedCode.Entities.Cloud.EndpointAddress> endpoints)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 4);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = NotifyOfExistingConnectionsImpl(endpoints);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task NewNodeConnected(System.Guid newNodeId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return NewNodeConnectedRunMaster(newNodeId).AsTask();
                else
                    return NewNodeConnectedRun(newNodeId).AsTask();
            else
                return SendFuncs.NewNodeConnected(newNodeId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> NewNodeConnectedCreateDeferredDelegate(System.Guid newNodeId) => () =>
        {
            return NewNodeConnected(newNodeId);
        }

        ;
        public async ValueTask NewNodeConnectedRunMaster(System.Guid newNodeId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(NewNodeConnectedCreateDeferredDelegate(newNodeId), nameof(NewNodeConnected));
            }

            await NewNodeConnectedRun(newNodeId);
        }

        public async ValueTask NewNodeConnectedRun(System.Guid newNodeId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 5);
            var getTask = this.GetThisExclusive();
            var wrapper = getTask.IsCompleted ? getTask.Result : await getTask;
            using (wrapper)
            {
                if (wrapper == null && EntitiesRepository != null)
                    throw new Exception($"{nameof(NewNodeConnected)} GetExclusive wrapper is null");
                GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
                Guid __oldMigrationId__ = default;
                var __needSetMigrationgId__ = MigratingId != Guid.Empty;
                if (__needSetMigrationgId__)
                {
                    __oldMigrationId__ = GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                    GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
                }

                try
                {
                    var returnTask = NewNodeConnectedImpl(newNodeId);
                    if (!returnTask.IsCompleted || returnTask.IsFaulted)
                    {
                        var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                        try
                        {
                            await returnTask;
                        }
                        finally
                        {
                            ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                        }
                    }
                }
                finally
                {
                    if (__needSetMigrationgId__)
                        GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
                }
            }
        }

        public Task EntityUpdate(SharedCode.EntitySystem.UpdateBatch updateBatch)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return EntityUpdateRunMaster(updateBatch).AsTask();
                else
                    return EntityUpdateRun(updateBatch).AsTask();
            else
                return SendFuncs.EntityUpdate(updateBatch, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> EntityUpdateCreateDeferredDelegate(SharedCode.EntitySystem.UpdateBatch updateBatch) => () =>
        {
            return EntityUpdate(updateBatch);
        }

        ;
        public async ValueTask EntityUpdateRunMaster(SharedCode.EntitySystem.UpdateBatch updateBatch)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(EntityUpdateCreateDeferredDelegate(updateBatch), nameof(EntityUpdate));
            }

            await EntityUpdateRun(updateBatch);
        }

        public async ValueTask EntityUpdateRun(SharedCode.EntitySystem.UpdateBatch updateBatch)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 6);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = EntityUpdateImpl(updateBatch);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task EntityUpdate(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return EntityUpdateRunMaster(updateBatchContainer).AsTask();
                else
                    return EntityUpdateRun(updateBatchContainer).AsTask();
            else
                return SendFuncs.EntityUpdate(updateBatchContainer, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> EntityUpdateCreateDeferredDelegate(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer) => () =>
        {
            return EntityUpdate(updateBatchContainer);
        }

        ;
        public async ValueTask EntityUpdateRunMaster(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(EntityUpdateCreateDeferredDelegate(updateBatchContainer), nameof(EntityUpdate));
            }

            await EntityUpdateRun(updateBatchContainer);
        }

        public async ValueTask EntityUpdateRun(SharedCode.EntitySystem.UpdateBatchContainer updateBatchContainer)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 7);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = EntityUpdateImpl(updateBatchContainer);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task EntityUpload(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return EntityUploadRunMaster(uploadBatchContainer).AsTask();
                else
                    return EntityUploadRun(uploadBatchContainer).AsTask();
            else
                return SendFuncs.EntityUpload(uploadBatchContainer, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> EntityUploadCreateDeferredDelegate(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer) => () =>
        {
            return EntityUpload(uploadBatchContainer);
        }

        ;
        public async ValueTask EntityUploadRunMaster(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(EntityUploadCreateDeferredDelegate(uploadBatchContainer), nameof(EntityUpload));
            }

            await EntityUploadRun(uploadBatchContainer);
        }

        public async ValueTask EntityUploadRun(SharedCode.EntitySystem.UploadBatchContainer uploadBatchContainer)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 8);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = EntityUploadImpl(uploadBatchContainer, null);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task EntityDestroyed(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return EntityDestroyedRunMaster(destroyBatchContainer).AsTask();
                else
                    return EntityDestroyedRun(destroyBatchContainer).AsTask();
            else
                return SendFuncs.EntityDestroyed(destroyBatchContainer, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> EntityDestroyedCreateDeferredDelegate(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer) => () =>
        {
            return EntityDestroyed(destroyBatchContainer);
        }

        ;
        public async ValueTask EntityDestroyedRunMaster(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(EntityDestroyedCreateDeferredDelegate(destroyBatchContainer), nameof(EntityDestroyed));
            }

            await EntityDestroyedRun(destroyBatchContainer);
        }

        public async ValueTask EntityDestroyedRun(SharedCode.EntitySystem.DestroyBatchContainer destroyBatchContainer)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 9);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = EntityDestroyedImpl(destroyBatchContainer);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task EntityDowngrade(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return EntityDowngradeRunMaster(downgradeBatchContainer).AsTask();
                else
                    return EntityDowngradeRun(downgradeBatchContainer).AsTask();
            else
                return SendFuncs.EntityDowngrade(downgradeBatchContainer, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> EntityDowngradeCreateDeferredDelegate(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer) => () =>
        {
            return EntityDowngrade(downgradeBatchContainer);
        }

        ;
        public async ValueTask EntityDowngradeRunMaster(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(EntityDowngradeCreateDeferredDelegate(downgradeBatchContainer), nameof(EntityDowngrade));
            }

            await EntityDowngradeRun(downgradeBatchContainer);
        }

        public async ValueTask EntityDowngradeRun(SharedCode.EntitySystem.DowngradeBatchContainer downgradeBatchContainer)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 10);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = EntityDowngradeImpl(downgradeBatchContainer);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task Dump(string fileName)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return DumpRunMaster(fileName).AsTask();
                else
                    return DumpRun(fileName).AsTask();
            else
                return SendFuncs.Dump(fileName, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> DumpCreateDeferredDelegate(string fileName) => () =>
        {
            return Dump(fileName);
        }

        ;
        public async ValueTask DumpRunMaster(string fileName)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(DumpCreateDeferredDelegate(fileName), nameof(Dump));
            }

            await DumpRun(fileName);
        }

        public async ValueTask DumpRun(string fileName)
        {
            if (!await global::GeneratedCode.Shared.Utils.AccountTypeUtils.CheckAccountType(GeneratedCode.Manual.Repositories.CallbackRepositoryHolder.CurrentCallbackRepositoryId, SharedCode.Entities.Service.AccountType.TechnicalSupport, EntitiesRepository))
                throw new System.UnauthorizedAccessException(string.Format("User {0} has no rights to use cheat {1}", GeneratedCode.Manual.Repositories.CallbackRepositoryHolder.CurrentCallbackRepositoryId, nameof(Dump)));
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 11);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = DumpImpl(fileName);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task DumpEntity(int typeId, System.Guid entityId, string fileName)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return DumpEntityRunMaster(typeId, entityId, fileName).AsTask();
                else
                    return DumpEntityRun(typeId, entityId, fileName).AsTask();
            else
                return SendFuncs.DumpEntity(typeId, entityId, fileName, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> DumpEntityCreateDeferredDelegate(int typeId, System.Guid entityId, string fileName) => () =>
        {
            return DumpEntity(typeId, entityId, fileName);
        }

        ;
        public async ValueTask DumpEntityRunMaster(int typeId, System.Guid entityId, string fileName)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(DumpEntityCreateDeferredDelegate(typeId, entityId, fileName), nameof(DumpEntity));
            }

            await DumpEntityRun(typeId, entityId, fileName);
        }

        public async ValueTask DumpEntityRun(int typeId, System.Guid entityId, string fileName)
        {
            if (!await global::GeneratedCode.Shared.Utils.AccountTypeUtils.CheckAccountType(GeneratedCode.Manual.Repositories.CallbackRepositoryHolder.CurrentCallbackRepositoryId, SharedCode.Entities.Service.AccountType.TechnicalSupport, EntitiesRepository))
                throw new System.UnauthorizedAccessException(string.Format("User {0} has no rights to use cheat {1}", GeneratedCode.Manual.Repositories.CallbackRepositoryHolder.CurrentCallbackRepositoryId, nameof(DumpEntity)));
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 12);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = DumpEntityImpl(typeId, entityId, fileName);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task DumpEntitySerializedData(string fileName, int entityTypeId, System.Guid entityId, long replicationMask)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return DumpEntitySerializedDataRunMaster(fileName, entityTypeId, entityId, replicationMask).AsTask();
                else
                    return DumpEntitySerializedDataRun(fileName, entityTypeId, entityId, replicationMask).AsTask();
            else
                return SendFuncs.DumpEntitySerializedData(fileName, entityTypeId, entityId, replicationMask, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> DumpEntitySerializedDataCreateDeferredDelegate(string fileName, int entityTypeId, System.Guid entityId, long replicationMask) => () =>
        {
            return DumpEntitySerializedData(fileName, entityTypeId, entityId, replicationMask);
        }

        ;
        public async ValueTask DumpEntitySerializedDataRunMaster(string fileName, int entityTypeId, System.Guid entityId, long replicationMask)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(DumpEntitySerializedDataCreateDeferredDelegate(fileName, entityTypeId, entityId, replicationMask), nameof(DumpEntitySerializedData));
            }

            await DumpEntitySerializedDataRun(fileName, entityTypeId, entityId, replicationMask);
        }

        public async ValueTask DumpEntitySerializedDataRun(string fileName, int entityTypeId, System.Guid entityId, long replicationMask)
        {
            if (!await global::GeneratedCode.Shared.Utils.AccountTypeUtils.CheckAccountType(GeneratedCode.Manual.Repositories.CallbackRepositoryHolder.CurrentCallbackRepositoryId, SharedCode.Entities.Service.AccountType.TechnicalSupport, EntitiesRepository))
                throw new System.UnauthorizedAccessException(string.Format("User {0} has no rights to use cheat {1}", GeneratedCode.Manual.Repositories.CallbackRepositoryHolder.CurrentCallbackRepositoryId, nameof(DumpEntitySerializedData)));
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 13);
            GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = DumpEntitySerializedDataImpl(fileName, entityTypeId, entityId, replicationMask);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> SubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return SubscribeReplicationRunMaster(typeId, entityId, repositoryId, replicationLevel).AsTask();
                else
                    return SubscribeReplicationRun(typeId, entityId, repositoryId, replicationLevel).AsTask();
            else
                return SendFuncs.SubscribeReplication(typeId, entityId, repositoryId, replicationLevel, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> SubscribeReplicationCreateDeferredDelegate(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel) => () =>
        {
            return SubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        }

        ;
        public async ValueTask<bool> SubscribeReplicationRunMaster(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(SubscribeReplicationCreateDeferredDelegate(typeId, entityId, repositoryId, replicationLevel), nameof(SubscribeReplication));
            }

            return await SubscribeReplicationRun(typeId, entityId, repositoryId, replicationLevel);
        }

        public async ValueTask<bool> SubscribeReplicationRun(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 14);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = SubscribeReplicationImpl(typeId, entityId, repositoryId, replicationLevel);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> UnsubscribeReplication(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return UnsubscribeReplicationRunMaster(typeId, entityId, repositoryId, replicationLevel).AsTask();
                else
                    return UnsubscribeReplicationRun(typeId, entityId, repositoryId, replicationLevel).AsTask();
            else
                return SendFuncs.UnsubscribeReplication(typeId, entityId, repositoryId, replicationLevel, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> UnsubscribeReplicationCreateDeferredDelegate(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel) => () =>
        {
            return UnsubscribeReplication(typeId, entityId, repositoryId, replicationLevel);
        }

        ;
        public async ValueTask<bool> UnsubscribeReplicationRunMaster(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(UnsubscribeReplicationCreateDeferredDelegate(typeId, entityId, repositoryId, replicationLevel), nameof(UnsubscribeReplication));
            }

            return await UnsubscribeReplicationRun(typeId, entityId, repositoryId, replicationLevel);
        }

        public async ValueTask<bool> UnsubscribeReplicationRun(int typeId, System.Guid entityId, System.Guid repositoryId, SharedCode.EntitySystem.ReplicationLevel replicationLevel)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 15);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = UnsubscribeReplicationImpl(typeId, entityId, repositoryId, replicationLevel);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<string> GetEntityStatus(int typeId, System.Guid entityId)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetEntityStatusRunMaster(typeId, entityId).AsTask();
                else
                    return GetEntityStatusRun(typeId, entityId).AsTask();
            else
                return SendFuncs.GetEntityStatus(typeId, entityId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<string>> GetEntityStatusCreateDeferredDelegate(int typeId, System.Guid entityId) => () =>
        {
            return GetEntityStatus(typeId, entityId);
        }

        ;
        public async ValueTask<string> GetEntityStatusRunMaster(int typeId, System.Guid entityId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetEntityStatusCreateDeferredDelegate(typeId, entityId), nameof(GetEntityStatus));
            }

            return await GetEntityStatusRun(typeId, entityId);
        }

        public async ValueTask<string> GetEntityStatusRun(int typeId, System.Guid entityId)
        {
            if (!await global::GeneratedCode.Shared.Utils.AccountTypeUtils.CheckAccountType(GeneratedCode.Manual.Repositories.CallbackRepositoryHolder.CurrentCallbackRepositoryId, SharedCode.Entities.Service.AccountType.TechnicalSupport, EntitiesRepository))
                throw new System.UnauthorizedAccessException(string.Format("User {0} has no rights to use cheat {1}", GeneratedCode.Manual.Repositories.CallbackRepositoryHolder.CurrentCallbackRepositoryId, nameof(GetEntityStatus)));
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 16);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetEntityStatusImpl(typeId, entityId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<string> GetAllServiceEntityStatus()
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return GetAllServiceEntityStatusRunMaster().AsTask();
                else
                    return GetAllServiceEntityStatusRun().AsTask();
            else
                return SendFuncs.GetAllServiceEntityStatus(this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<string>> GetAllServiceEntityStatusCreateDeferredDelegate() => () =>
        {
            return GetAllServiceEntityStatus();
        }

        ;
        public async ValueTask<string> GetAllServiceEntityStatusRunMaster()
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(GetAllServiceEntityStatusCreateDeferredDelegate(), nameof(GetAllServiceEntityStatus));
            }

            return await GetAllServiceEntityStatusRun();
        }

        public async ValueTask<string> GetAllServiceEntityStatusRun()
        {
            if (!await global::GeneratedCode.Shared.Utils.AccountTypeUtils.CheckAccountType(GeneratedCode.Manual.Repositories.CallbackRepositoryHolder.CurrentCallbackRepositoryId, SharedCode.Entities.Service.AccountType.TechnicalSupport, EntitiesRepository))
                throw new System.UnauthorizedAccessException(string.Format("User {0} has no rights to use cheat {1}", GeneratedCode.Manual.Repositories.CallbackRepositoryHolder.CurrentCallbackRepositoryId, nameof(GetAllServiceEntityStatus)));
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 17);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = GetAllServiceEntityStatusImpl();
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<bool> ForceCloseConnection(System.Guid userId)
        {
            this.CheckValidateEntityInAsyncContext();
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return ForceCloseConnectionRunMaster(userId).AsTask();
                else
                    return ForceCloseConnectionRun(userId).AsTask();
            else
                return SendFuncs.ForceCloseConnection(userId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<bool>> ForceCloseConnectionCreateDeferredDelegate(System.Guid userId) => () =>
        {
            return ForceCloseConnection(userId);
        }

        ;
        public async ValueTask<bool> ForceCloseConnectionRunMaster(System.Guid userId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(ForceCloseConnectionCreateDeferredDelegate(userId), nameof(ForceCloseConnection));
            }

            return await ForceCloseConnectionRun(userId);
        }

        public async ValueTask<bool> ForceCloseConnectionRun(System.Guid userId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 18);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = ForceCloseConnectionImpl(userId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.Entities.Cloud.StartMigrateEntityResult> StartMigrateEntity(int entityTypeId, System.Guid entityId)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return StartMigrateEntityRunMaster(entityTypeId, entityId).AsTask();
                else
                    return StartMigrateEntityRun(entityTypeId, entityId).AsTask();
            else
                return SendFuncs.StartMigrateEntity(entityTypeId, entityId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.Entities.Cloud.StartMigrateEntityResult>> StartMigrateEntityCreateDeferredDelegate(int entityTypeId, System.Guid entityId) => () =>
        {
            return StartMigrateEntity(entityTypeId, entityId);
        }

        ;
        public async ValueTask<SharedCode.Entities.Cloud.StartMigrateEntityResult> StartMigrateEntityRunMaster(int entityTypeId, System.Guid entityId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(StartMigrateEntityCreateDeferredDelegate(entityTypeId, entityId), nameof(StartMigrateEntity));
            }

            return await StartMigrateEntityRun(entityTypeId, entityId);
        }

        public async ValueTask<SharedCode.Entities.Cloud.StartMigrateEntityResult> StartMigrateEntityRun(int entityTypeId, System.Guid entityId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 19);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = StartMigrateEntityImpl(entityTypeId, entityId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task<SharedCode.EntitySystem.FinishMigrateEntityResult> FinishMigrateEntity(int entityTypeId, System.Guid entityId, System.Collections.Generic.Dictionary<(int, System.Guid), System.Collections.Generic.Dictionary<System.Guid, int>> replicateRefsVersions)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return FinishMigrateEntityRunMaster(entityTypeId, entityId, replicateRefsVersions).AsTask();
                else
                    return FinishMigrateEntityRun(entityTypeId, entityId, replicateRefsVersions).AsTask();
            else
                return SendFuncs.FinishMigrateEntity(entityTypeId, entityId, replicateRefsVersions, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task<SharedCode.EntitySystem.FinishMigrateEntityResult>> FinishMigrateEntityCreateDeferredDelegate(int entityTypeId, System.Guid entityId, System.Collections.Generic.Dictionary<(int, System.Guid), System.Collections.Generic.Dictionary<System.Guid, int>> replicateRefsVersions) => () =>
        {
            return FinishMigrateEntity(entityTypeId, entityId, replicateRefsVersions);
        }

        ;
        public async ValueTask<SharedCode.EntitySystem.FinishMigrateEntityResult> FinishMigrateEntityRunMaster(int entityTypeId, System.Guid entityId, System.Collections.Generic.Dictionary<(int, System.Guid), System.Collections.Generic.Dictionary<System.Guid, int>> replicateRefsVersions)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    return await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(FinishMigrateEntityCreateDeferredDelegate(entityTypeId, entityId, replicateRefsVersions), nameof(FinishMigrateEntity));
            }

            return await FinishMigrateEntityRun(entityTypeId, entityId, replicateRefsVersions);
        }

        public async ValueTask<SharedCode.EntitySystem.FinishMigrateEntityResult> FinishMigrateEntityRun(int entityTypeId, System.Guid entityId, System.Collections.Generic.Dictionary<(int, System.Guid), System.Collections.Generic.Dictionary<System.Guid, int>> replicateRefsVersions)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 20);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = FinishMigrateEntityImpl(entityTypeId, entityId, replicateRefsVersions);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        return await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
                else
                    return returnTask.Result;
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }

        public Task DispatchMigratedEntityDeferredRpc(int entityTypeId, System.Guid entityId)
        {
            if (this.IsMaster())
                if (this.NeedDeferredRpcOnMigrating())
                    return DispatchMigratedEntityDeferredRpcRunMaster(entityTypeId, entityId).AsTask();
                else
                    return DispatchMigratedEntityDeferredRpcRun(entityTypeId, entityId).AsTask();
            else
                return SendFuncs.DispatchMigratedEntityDeferredRpc(entityTypeId, entityId, this, this.GetNetworkProxyForSerialization(), this.EntitiesRepository, GetActualMigratingId()).AsTask();
        }

        private Func<Task> DispatchMigratedEntityDeferredRpcCreateDeferredDelegate(int entityTypeId, System.Guid entityId) => () =>
        {
            return DispatchMigratedEntityDeferredRpc(entityTypeId, entityId);
        }

        ;
        public async ValueTask DispatchMigratedEntityDeferredRpcRunMaster(int entityTypeId, System.Guid entityId)
        {
            if (parentEntity != null)
            {
                var __checkTask__ = ((IEntityExt)parentEntity).NeedPutToDeferredRpcQueue();
                if (!__checkTask__.IsCompleted)
                    await __checkTask__;
                if (__checkTask__.Result)
                    await ((IEntityExt)parentEntity).AddDeferredMigratingRpc(DispatchMigratedEntityDeferredRpcCreateDeferredDelegate(entityTypeId, entityId), nameof(DispatchMigratedEntityDeferredRpc));
            }

            await DispatchMigratedEntityDeferredRpcRun(entityTypeId, entityId);
        }

        public async ValueTask DispatchMigratedEntityDeferredRpcRun(int entityTypeId, System.Guid entityId)
        {
            GeneratedCode.Network.Statistic.Statistics<GeneratedCode.Network.Statistic.RpcInnerStatistics>.Instance.Used(typeof(SharedCode.Entities.Cloud.IRepositoryCommunicationEntity), 21);
            global::GeneratedCode.Manual.Repositories.RpcCurrentObject.ThisObj = this;
            Guid __oldMigrationId__ = default;
            var __needSetMigrationgId__ = MigratingId != Guid.Empty;
            if (__needSetMigrationgId__)
            {
                __oldMigrationId__ = global::GeneratedCode.Manual.Repositories.MigrationIdHolder.CurrentMigrationId;
                global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref MigratingId);
            }

            try
            {
                var returnTask = DispatchMigratedEntityDeferredRpcImpl(entityTypeId, entityId);
                if (!returnTask.IsCompleted || returnTask.IsFaulted)
                {
                    var __needDecrement__ = IncrementExecutedMethodsCounter(out var __parentEntity__);
                    try
                    {
                        await returnTask;
                    }
                    finally
                    {
                        ((IEntityExt)__parentEntity__)?.DecrementExecutedMethodsCounter(__needDecrement__);
                    }
                }
            }
            finally
            {
                if (__needSetMigrationgId__)
                    global::GeneratedCode.Manual.Repositories.MigrationIdHolder.SetCurrentMigrationId(ref __oldMigrationId__);
            }
        }
    }
}