// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects
{
    [ProtoBuf.ProtoContract]
    [MongoDB.Bson.Serialization.Attributes.BsonDiscriminator("AccountEntity")]
    public partial class AccountEntity : SharedCode.EntitySystem.BaseEntity, SharedCode.Entities.IAccountEntity, IAccountEntityImplementRemoteMethods
    {
        public override string CodeVersion => ThisAssembly.AssemblyInformationalVersion;
        public AccountEntity()
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                Experience = default(int);
                UnconsumedExperience = default(int);
                LastSessionResult = new GeneratedCode.DeltaObjects.SessionResult();
                AvailableRealmQueries = new SharedCode.EntitySystem.Delta.DeltaDictionary<SharedCode.Aspects.Sessions.RealmRulesQueryDef, SharedCode.Entities.RealmRulesQueryState>();
                Characters = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Entities.IAccountCharacter>();
                CharRealmData = new GeneratedCode.DeltaObjects.CharRealmData();
                AccountId = default(string);
                Gender = default(ResourceSystem.Aspects.Misc.GenderDef);
            }

            constructor();
        }

        public AccountEntity(System.Guid id): base(id)
        {
            if (!SharedCode.Serializers._SerializerContext.Pool.Current.Deserialization)
            {
                Experience = default(int);
                UnconsumedExperience = default(int);
                LastSessionResult = new GeneratedCode.DeltaObjects.SessionResult();
                AvailableRealmQueries = new SharedCode.EntitySystem.Delta.DeltaDictionary<SharedCode.Aspects.Sessions.RealmRulesQueryDef, SharedCode.Entities.RealmRulesQueryState>();
                Characters = new SharedCode.EntitySystem.Delta.DeltaList<SharedCode.Entities.IAccountCharacter>();
                CharRealmData = new GeneratedCode.DeltaObjects.CharRealmData();
                AccountId = default(string);
                Gender = default(ResourceSystem.Aspects.Misc.GenderDef);
            }

            constructor();
        }

        public override void GetAllLinkedEntities(long replicationMask, System.Collections.Generic.List<(long level, SharedCode.Refs.IEntityRef entityRef)> entities, long currentLevel, bool onlyDbEntities)
        {
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_LastSessionResult != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_LastSessionResult).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_AvailableRealmQueries != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_AvailableRealmQueries).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_Characters != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_Characters).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            if ((replicationMask & (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull) == (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull)
                if (_CharRealmData != null)
                    ((SharedCode.EntitySystem.IDeltaObject)_CharRealmData).GetAllLinkedEntities(replicationMask, entities, currentLevel | (long)SharedCode.EntitySystem.ReplicationLevel.ClientFull, onlyDbEntities);
            base.GetAllLinkedEntities(replicationMask, entities, currentLevel, onlyDbEntities);
        }

        public override void FillReplicationSetRecursive(System.Collections.Generic.Dictionary<SharedCode.EntitySystem.ReplicationLevel, System.Collections.Generic.Dictionary<SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.DeltaObjectReplicationInfo>> replicationSets, System.Collections.Generic.HashSet<SharedCode.EntitySystem.ReplicationLevel> traverseReplicationLevels, SharedCode.EntitySystem.ReplicationLevel currentLevel, bool withBsonIgnore)
        {
            base.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, currentLevel, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _LastSessionResult, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _AvailableRealmQueries, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, false, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _Characters, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
            GeneratedCode.EntitySystem.DeltaObjectHelper.FillReplicationSetRecursive(replicationSets, traverseReplicationLevels, _CharRealmData, currentLevel > SharedCode.EntitySystem.ReplicationLevel.ClientFull ? currentLevel : SharedCode.EntitySystem.ReplicationLevel.ClientFull, true, withBsonIgnore);
        }

        public override void LinkChangedDeltaObjects(System.Collections.Generic.Dictionary<ulong, SharedCode.Serializers.Protobuf.DeserializedObjectInfo> deserializedObjects, SharedCode.EntitySystem.IEntity parentEntity)
        {
            base.LinkChangedDeltaObjects(deserializedObjects, parentEntity);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _LastSessionResult, 12, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _AvailableRealmQueries, 13, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _Characters, 14, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
            GeneratedCode.EntitySystem.DeltaObjectHelper.LinkChangedDeltaObject(deserializedObjects, parentEntity, this, ref _CharRealmData, 15, false, SharedCode.EntitySystem.ReplicationLevel.ClientFull);
        }

        public override void IncrementParentRefs(SharedCode.EntitySystem.IEntity parentEntity, bool trackChanged)
        {
            base.IncrementParentRefs(parentEntity, trackChanged);
            if (ParentEntityRefCount == 1)
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LastSessionResult)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AvailableRealmQueries)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Characters)?.IncrementParentRefs(parentEntity, trackChanged);
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CharRealmData)?.IncrementParentRefs(parentEntity, trackChanged);
            }
        }

        public override void ReplicationLevelActualize(SharedCode.EntitySystem.ReplicationLevel? actualParentLevel, SharedCode.EntitySystem.ReplicationLevel? oldParentLevel)
        {
            base.ReplicationLevelActualize(actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _LastSessionResult, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _AvailableRealmQueries, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _Characters, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
            GeneratedCode.EntitySystem.DeltaObjectHelper.ReplicationLevelActualize(parentEntity, _CharRealmData, SharedCode.EntitySystem.ReplicationLevel.ClientFull, actualParentLevel, oldParentLevel);
        }

        public override void DecrementParentRefs()
        {
            base.DecrementParentRefs();
            if (!HasParentRef())
            {
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LastSessionResult)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AvailableRealmQueries)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Characters)?.DecrementParentRefs();
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CharRealmData)?.DecrementParentRefs();
            }
        }

        protected override void Subscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Subscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Experience":
                    Experience__Changed += callback;
                    break;
                case "UnconsumedExperience":
                    UnconsumedExperience__Changed += callback;
                    break;
                case "LastSessionResult":
                    LastSessionResult__Changed += callback;
                    break;
                case "AvailableRealmQueries":
                    AvailableRealmQueries__Changed += callback;
                    break;
                case "Characters":
                    Characters__Changed += callback;
                    break;
                case "CharRealmData":
                    CharRealmData__Changed += callback;
                    break;
                case "AccountId":
                    AccountId__Changed += callback;
                    break;
                case "Gender":
                    Gender__Changed += callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName, SharedCode.EntitySystem.PropertyChangedDelegate callback)
        {
            base.Unsubscribe(propertyName, callback);
            switch (propertyName)
            {
                case "Experience":
                    Experience__Changed -= callback;
                    break;
                case "UnconsumedExperience":
                    UnconsumedExperience__Changed -= callback;
                    break;
                case "LastSessionResult":
                    LastSessionResult__Changed -= callback;
                    break;
                case "AvailableRealmQueries":
                    AvailableRealmQueries__Changed -= callback;
                    break;
                case "Characters":
                    Characters__Changed -= callback;
                    break;
                case "CharRealmData":
                    CharRealmData__Changed -= callback;
                    break;
                case "AccountId":
                    AccountId__Changed -= callback;
                    break;
                case "Gender":
                    Gender__Changed -= callback;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe(string propertyName)
        {
            base.Unsubscribe(propertyName);
            switch (propertyName)
            {
                case "Experience":
                    Experience__Changed = null;
                    break;
                case "UnconsumedExperience":
                    UnconsumedExperience__Changed = null;
                    break;
                case "LastSessionResult":
                    LastSessionResult__Changed = null;
                    break;
                case "AvailableRealmQueries":
                    AvailableRealmQueries__Changed = null;
                    break;
                case "Characters":
                    Characters__Changed = null;
                    break;
                case "CharRealmData":
                    CharRealmData__Changed = null;
                    break;
                case "AccountId":
                    AccountId__Changed = null;
                    break;
                case "Gender":
                    Gender__Changed = null;
                    break;
                default:
                    throw new System.ArgumentException($"Field {propertyName} does not exist in {GetType()}", nameof(propertyName));
            }
        }

        protected override void Unsubscribe()
        {
            base.Unsubscribe();
            Experience__Changed = null;
            UnconsumedExperience__Changed = null;
            LastSessionResult__Changed = null;
            AvailableRealmQueries__Changed = null;
            Characters__Changed = null;
            CharRealmData__Changed = null;
            AccountId__Changed = null;
            Gender__Changed = null;
        }

        protected override void FireEvents(System.Collections.Generic.List<System.Func<System.Threading.Tasks.Task>> container)
        {
            base.FireEvents(container);
            if (NeedFireEvent(10) && Experience__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 10;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Experience, nameof(Experience), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Experience__Changed);
            }

            if (NeedFireEvent(11) && UnconsumedExperience__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 11;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_UnconsumedExperience, nameof(UnconsumedExperience), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, UnconsumedExperience__Changed);
            }

            if (NeedFireEvent(12) && LastSessionResult__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 12;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_LastSessionResult, nameof(LastSessionResult), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, LastSessionResult__Changed);
            }

            if (NeedFireEvent(13) && AvailableRealmQueries__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 13;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AvailableRealmQueries, nameof(AvailableRealmQueries), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AvailableRealmQueries__Changed);
            }

            if (NeedFireEvent(14) && Characters__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 14;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Characters, nameof(Characters), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Characters__Changed);
            }

            if (NeedFireEvent(15) && CharRealmData__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 15;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_CharRealmData, nameof(CharRealmData), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, CharRealmData__Changed);
            }

            if (NeedFireEvent(16) && AccountId__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 16;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_AccountId, nameof(AccountId), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, AccountId__Changed);
            }

            if (NeedFireEvent(17) && Gender__Changed != null)
            {
                SharedCode.EntitySystem.PropertyAddress __propAddress__ = SharedCode.EntitySystem.EntityPropertyResolvers.EntityPropertyResolver.GetPropertyAddress(this);
                __propAddress__.DeltaObjectFieldId = 17;
                var __Event__Args__ = new SharedCode.EntitySystem.EntityEventArgs(_Gender, nameof(Gender), __propAddress__, this);
                GeneratedCode.EntitySystem.EventHelper.FireEvent(container, __Event__Args__, Gender__Changed);
            }
        }

        public override void Downgrade(long mask)
        {
            base.Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                Experience = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                UnconsumedExperience = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                LastSessionResult = default;
            if (_LastSessionResult != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_LastSessionResult).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                AvailableRealmQueries = default;
            if (_AvailableRealmQueries != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_AvailableRealmQueries).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                Characters = default;
            if (_Characters != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_Characters).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                CharRealmData = default;
            if (_CharRealmData != null)
                ((SharedCode.EntitySystem.IDeltaObjectExt)_CharRealmData).Downgrade(mask);
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast & mask) > 0)
                AccountId = default;
            if (((long)SharedCode.EntitySystem.ReplicationLevel.ClientFull & mask) > 0)
                Gender = default;
        }
    }
}