// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using GeneratedCode.DeltaObjects.ReplicationInterfaces;
using SharedCode.Logging;
using GeneratedCode.Repositories;
using SharedCode.EntitySystem;
using GeneratedCode.EntitySystem;
using SharedCode.EntitySystem.Delta;

namespace GeneratedCode.DeltaObjects
{
    public class CraftingQueueItemAlways : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemAlways
    {
        public CraftingQueueItemAlways(SharedCode.Entities.Engine.ICraftingQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftingQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftingQueueItem)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1275672183;
    }

    public class CraftingQueueItemClientBroadcast : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientBroadcast
    {
        public CraftingQueueItemClientBroadcast(SharedCode.Entities.Engine.ICraftingQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftingQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftingQueueItem)__deltaObjectBase__;
            }
        }

        public override int TypeId => 1618460939;
    }

    public class CraftingQueueItemClientFullApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientFullApi
    {
        public CraftingQueueItemClientFullApi(SharedCode.Entities.Engine.ICraftingQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftingQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftingQueueItem)__deltaObjectBase__;
            }
        }

        public override int TypeId => 2112015645;
    }

    public class CraftingQueueItemClientFull : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemClientFull
    {
        public CraftingQueueItemClientFull(SharedCode.Entities.Engine.ICraftingQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftingQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftingQueueItem)__deltaObjectBase__;
            }
        }

        public int Index => __deltaObject__.Index;
        public Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef CraftRecipe => __deltaObject__.CraftRecipe;
        public System.Collections.Generic.List<int> MandatorySlotPermutation => __deltaObject__.MandatorySlotPermutation;
        public System.Collections.Generic.List<int> OptionalSlotPermutation => __deltaObject__.OptionalSlotPermutation;
        public int SelectedVariantIndex => __deltaObject__.SelectedVariantIndex;
        public long TimeAlreadyCrafted => __deltaObject__.TimeAlreadyCrafted;
        public long CraftStartTime => __deltaObject__.CraftStartTime;
        public bool IsActive => __deltaObject__.IsActive;
        public int Count => __deltaObject__.Count;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Index;
                    break;
                case 11:
                    currProperty = CraftRecipe;
                    break;
                case 12:
                    currProperty = MandatorySlotPermutation;
                    break;
                case 13:
                    currProperty = OptionalSlotPermutation;
                    break;
                case 14:
                    currProperty = SelectedVariantIndex;
                    break;
                case 15:
                    currProperty = TimeAlreadyCrafted;
                    break;
                case 16:
                    currProperty = CraftStartTime;
                    break;
                case 17:
                    currProperty = IsActive;
                    break;
                case 18:
                    currProperty = Count;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => -1688276114;
    }

    public class CraftingQueueItemServerApi : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemServerApi
    {
        public CraftingQueueItemServerApi(SharedCode.Entities.Engine.ICraftingQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftingQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftingQueueItem)__deltaObjectBase__;
            }
        }

        public override int TypeId => 786230136;
    }

    public class CraftingQueueItemServer : BaseDeltaObjectWrapper, GeneratedCode.DeltaObjects.ReplicationInterfaces.ICraftingQueueItemServer
    {
        public CraftingQueueItemServer(SharedCode.Entities.Engine.ICraftingQueueItem deltaObject): base(deltaObject)
        {
        }

        SharedCode.Entities.Engine.ICraftingQueueItem __deltaObject__
        {
            get
            {
                return (SharedCode.Entities.Engine.ICraftingQueueItem)__deltaObjectBase__;
            }
        }

        public int Index => __deltaObject__.Index;
        public Assets.ColonyShared.SharedCode.Aspects.Craft.CraftRecipeDef CraftRecipe => __deltaObject__.CraftRecipe;
        public System.Collections.Generic.List<int> MandatorySlotPermutation => __deltaObject__.MandatorySlotPermutation;
        public System.Collections.Generic.List<int> OptionalSlotPermutation => __deltaObject__.OptionalSlotPermutation;
        public int SelectedVariantIndex => __deltaObject__.SelectedVariantIndex;
        public long TimeAlreadyCrafted => __deltaObject__.TimeAlreadyCrafted;
        public long CraftStartTime => __deltaObject__.CraftStartTime;
        public bool IsActive => __deltaObject__.IsActive;
        public int Count => __deltaObject__.Count;
        public override bool TryGetProperty<T>(int address, out T property)
        {
            property = default(T);
            object currProperty = null;
            switch (address)
            {
                case 10:
                    currProperty = Index;
                    break;
                case 11:
                    currProperty = CraftRecipe;
                    break;
                case 12:
                    currProperty = MandatorySlotPermutation;
                    break;
                case 13:
                    currProperty = OptionalSlotPermutation;
                    break;
                case 14:
                    currProperty = SelectedVariantIndex;
                    break;
                case 15:
                    currProperty = TimeAlreadyCrafted;
                    break;
                case 16:
                    currProperty = CraftStartTime;
                    break;
                case 17:
                    currProperty = IsActive;
                    break;
                case 18:
                    currProperty = Count;
                    break;
                default:
                    Core.Environment.Logging.Extension.LoggerExtensions.IfError(Log.Logger)?.Message("DeltaObject TryGetProperty not found {0} address {1}", this.GetType().Name, address).Write();
                    return false;
            }

            property = (T)currProperty;
            return true;
        }

        public override int TypeId => 246830582;
    }
}