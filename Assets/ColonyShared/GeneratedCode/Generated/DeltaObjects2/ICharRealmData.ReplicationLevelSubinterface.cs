// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, 649072270, typeof(SharedCode.Entities.ICharRealmData))]
    public interface ICharRealmDataAlways : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, -1496514980, typeof(SharedCode.Entities.ICharRealmData))]
    public interface ICharRealmDataClientBroadcast : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        System.Threading.Tasks.Task ChangeCurrentRealmActivity(System.Guid accountId, bool active);
        System.Threading.Tasks.Task DestroyCurrentRealm(System.Guid accountId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, -1737399810, typeof(SharedCode.Entities.ICharRealmData))]
    public interface ICharRealmDataClientFullApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, -345856699, typeof(SharedCode.Entities.ICharRealmData))]
    public interface ICharRealmDataClientFull : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> CurrentRealm
        {
            get;
        }

        SharedCode.Entities.RealmCharStateEnum CurrentRealmCharState
        {
            get;
        }

        SharedCode.Aspects.Sessions.RealmRulesDef CurrentRealmRulesCached
        {
            get;
        }

        System.Threading.Tasks.Task<SharedCode.Entities.RealmOperationResult> FindRealm(SharedCode.Aspects.Sessions.RealmRulesQueryDef settings);
        System.Threading.Tasks.Task<SharedCode.Entities.RealmOperationResult> EnterCurrentRealm(bool autoPlay);
        System.Threading.Tasks.Task<bool> LeaveCurrentRealm();
        System.Threading.Tasks.Task<bool> GiveUpCurrentRealm();
        System.Threading.Tasks.Task ChangeCurrentRealmActivity(System.Guid accountId, bool active);
        System.Threading.Tasks.Task DestroyCurrentRealm(System.Guid accountId);
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, -255841455, typeof(SharedCode.Entities.ICharRealmData))]
    public interface ICharRealmDataServerApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, -468045247, typeof(SharedCode.Entities.ICharRealmData))]
    public interface ICharRealmDataServer : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.EntitySystem.OuterRef<SharedCode.EntitySystem.IEntity> CurrentRealm
        {
            get;
        }

        SharedCode.Entities.RealmCharStateEnum CurrentRealmCharState
        {
            get;
        }

        SharedCode.Aspects.Sessions.RealmRulesDef CurrentRealmRulesCached
        {
            get;
        }

        System.Threading.Tasks.Task<SharedCode.Entities.RealmOperationResult> FindRealm(SharedCode.Aspects.Sessions.RealmRulesQueryDef settings);
        System.Threading.Tasks.Task<SharedCode.Entities.RealmOperationResult> EnterCurrentRealm(bool autoPlay);
        System.Threading.Tasks.Task<bool> LeaveCurrentRealm();
        System.Threading.Tasks.Task<bool> GiveUpCurrentRealm();
        System.Threading.Tasks.Task<SharedCode.Entities.Cloud.FindRealmRequestResult> GetRealm(SharedCode.Aspects.Sessions.RealmRulesQueryDef settings);
        System.Threading.Tasks.Task ChangeCurrentRealmActivity(System.Guid accountId, bool active);
        System.Threading.Tasks.Task DestroyCurrentRealm(System.Guid accountId);
    }
}