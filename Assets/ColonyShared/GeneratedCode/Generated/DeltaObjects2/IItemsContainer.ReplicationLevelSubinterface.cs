// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace GeneratedCode.DeltaObjects.ReplicationInterfaces
{
    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Always, -1661585190, typeof(SharedCode.CustomData.IItemsContainer))]
    public interface IItemsContainerAlways : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots
        {
            get;
        }
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientBroadcast, -885376403, typeof(SharedCode.CustomData.IItemsContainer))]
    public interface IItemsContainerClientBroadcast : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.EntitySystem.Delta.IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientBroadcast> Items
        {
            get;
        }

        System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots
        {
            get;
        }

        int Size
        {
            get;
        }

        System.Threading.Tasks.Task<float> GetMaxWeigth();
        System.Threading.Tasks.Task<float> GetTotalWeight();
        System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot);
        System.Threading.Tasks.Task<bool> IgnoreMaxStack();
        System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks();
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFullApi, -785426280, typeof(SharedCode.CustomData.IItemsContainer))]
    public interface IItemsContainerClientFullApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ClientFull, -602213363, typeof(SharedCode.CustomData.IItemsContainer))]
    public interface IItemsContainerClientFull : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.EntitySystem.Delta.IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemClientFull> Items
        {
            get;
        }

        System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots
        {
            get;
        }

        int Size
        {
            get;
        }

        System.Threading.Tasks.Task<float> GetMaxWeigth();
        System.Threading.Tasks.Task<float> GetTotalWeight();
        System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot);
        System.Threading.Tasks.Task<bool> IgnoreMaxStack();
        System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks();
        event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer;
        event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer;
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.ServerApi, 1695987649, typeof(SharedCode.CustomData.IItemsContainer))]
    public interface IItemsContainerServerApi : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
    }

    [SharedCode.EntitySystem.ReplicationInterface(SharedCode.EntitySystem.ReplicationLevel.Server, 1262006155, typeof(SharedCode.CustomData.IItemsContainer))]
    public interface IItemsContainerServer : SharedCode.EntitySystem.IDeltaObject, SharedCode.EntitySystem.IBaseDeltaObjectWrapper
    {
        SharedCode.EntitySystem.Delta.IDeltaDictionaryWrapper<int, GeneratedCode.DeltaObjects.ReplicationInterfaces.ISlotItemServer> Items
        {
            get;
        }

        System.Collections.Concurrent.ConcurrentDictionary<int, System.Guid> TransactionReservedSlots
        {
            get;
        }

        int Size
        {
            get;
        }

        System.Threading.Tasks.Task<float> GetMaxWeigth();
        System.Threading.Tasks.Task<float> GetTotalWeight();
        System.Threading.Tasks.Task<int> GetMaxStackForSlot(int destinationSlot);
        System.Threading.Tasks.Task<bool> IgnoreMaxStack();
        System.Threading.Tasks.Task<bool> CanAutoselectEmptySlotsForAddStacks();
        System.Threading.Tasks.Task<bool> CanAdd(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual);
        System.Threading.Tasks.Task<bool> CanRemove(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual);
        System.Threading.Tasks.Task OnItemAdded(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual);
        System.Threading.Tasks.Task<SharedCode.EntitySystem.PropertyAddress> OnBeforeItemRemoved(GeneratedCode.DeltaObjects.ReplicationInterfaces.IItemServer item, int index, int count, bool manual);
        event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemAddedToContainer;
        event System.Func<SharedCode.Aspects.Item.Templates.BaseItemResource, int, int, bool, System.Threading.Tasks.Task> ItemRemovedToContainer;
    }
}